generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                   @id @default(uuid())
  email               String                   @unique
  passwordHash        String                   @map("password_hash")
  firstName           String?                  @map("first_name")
  lastName            String?                  @map("last_name")
  role                UserRoleType             @default(member)
  createdAt           DateTime                 @default(now()) @map("created_at")
  campaigns           Campaign[]
  touchpoints         Touchpoint[]
  companyAccess       UserCompanyAccess[]
  districtAssignments UserDistrictAssignment[]
  leadAssignments     UserLeadAssignment[]

  @@map("app_users")
}

model UserCompanyAccess {
  id        String      @id @default(uuid())
  userId    String      @map("user_id")
  company   CompanyType
  createdAt DateTime    @default(now()) @map("created_at")
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, company])
  @@map("user_company_access")
}

model Campaign {
  id                  String             @id @default(uuid())
  name                String
  company             CompanyType
  description         String?
  startDate           DateTime?          @map("start_date")
  endDate             DateTime?          @map("end_date")
  createdAt           DateTime           @default(now()) @map("created_at")
  createdById         String?            @map("created_by_id")
  outreachSequenceId  String?            @map("outreach_sequence_id")
  instantlyCampaignId String?            @map("instantly_campaign_id")
  status              CampaignStatusType @default(complete)
  createdBy           User?              @relation(fields: [createdById], references: [id])
  outreachSequence    OutreachSequence?  @relation(fields: [outreachSequenceId], references: [id])
  districtContacts    DistrictContact[]
  leads               Lead[]

  @@map("campaigns")
}

model Lead {
  id              String               @id @default(uuid())
  firstName       String               @map("first_name")
  lastName        String               @map("last_name")
  email           String               @unique
  phone           String?
  city            String?
  state           String?
  company         String?
  linkedinUrl     String?              @map("linkedin_url")
  websiteUrl      String?              @map("website_url")
  onlineProfile   String?              @map("online_profile")
  source          String?
  status          LeadStatusType       @default(not_contacted)
  notes           String?
  campaignId      String?              @map("campaign_id")
  createdAt       DateTime             @default(now()) @map("created_at")
  lastContactedAt DateTime?            @map("last_contacted_at")
  campaign        Campaign?            @relation(fields: [campaignId], references: [id])
  touchpoints     Touchpoint[]
  userAssignments UserLeadAssignment[]

  @@map("leads")
}

model District {
  id              String                   @id @default(uuid())
  name            String
  county          String
  state           String                   @default("California")
  type            String?
  size            Int?
  budget          Decimal?                 @db.Decimal(12, 2)
  website         String?
  notes           String?
  createdAt       DateTime                 @default(now()) @map("created_at")
  updatedAt       DateTime                 @default(now()) @map("updated_at")
  contacts        DistrictContact[]
  userAssignments UserDistrictAssignment[]

  @@unique([name, county, state])
  @@map("districts")
}

model DistrictContact {
  id              String         @id @default(uuid())
  districtId      String         @map("district_id")
  firstName       String         @map("first_name")
  lastName        String         @map("last_name")
  title           String?
  email           String?
  phone           String?
  linkedinUrl     String?        @map("linkedin_url")
  status          LeadStatusType @default(not_contacted)
  notes           String?
  campaignId      String?        @map("campaign_id")
  createdAt       DateTime       @default(now()) @map("created_at")
  lastContactedAt DateTime?      @map("last_contacted_at")
  state           String         @default("California")
  campaign        Campaign?      @relation(fields: [campaignId], references: [id])
  district        District       @relation(fields: [districtId], references: [id])
  touchpoints     Touchpoint[]

  @@unique([districtId, email])
  @@map("district_contacts")
}

model OutreachSequence {
  id          String         @id @default(uuid())
  name        String
  company     CompanyType
  description String?
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @default(now()) @map("updated_at")
  campaigns   Campaign[]
  steps       OutreachStep[]

  @@map("outreach_sequences")
}

model OutreachStep {
  id                String           @id @default(uuid())
  sequenceId        String           @map("sequence_id")
  stepOrder         Int              @map("step_order")
  type              TouchpointType
  name              String?
  contentLink       String?          @map("content_link")
  dayOffset         Int              @map("day_offset")
  daysAfterPrevious Int?             @map("days_after_previous")
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @default(now()) @map("updated_at")
  sequence          OutreachSequence @relation(fields: [sequenceId], references: [id], onDelete: Cascade)

  @@unique([sequenceId, stepOrder])
  @@map("outreach_steps")
}

model Touchpoint {
  id                String             @id @default(uuid())
  leadId            String?            @map("lead_id")
  districtContactId String?            @map("district_contact_id")
  type              TouchpointType
  subject           String?
  content           String?
  scheduledAt       DateTime?          @map("scheduled_at")
  completedAt       DateTime?          @map("completed_at")
  outcome           String?
  outcomeEnum       TouchpointOutcome? @map("outcome_enum")
  createdAt         DateTime           @default(now()) @map("created_at")
  createdById       String?            @map("created_by_id")
  createdBy         User?              @relation(fields: [createdById], references: [id])
  districtContact   DistrictContact?   @relation(fields: [districtContactId], references: [id])
  lead              Lead?              @relation(fields: [leadId], references: [id])

  @@map("touchpoints")
}

model UserLeadAssignment {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  leadId     String   @map("lead_id")
  assignedAt DateTime @default(now()) @map("assigned_at")
  lead       Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, leadId])
  @@map("user_lead_assignments")
}

model UserDistrictAssignment {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  districtId String   @map("district_id")
  assignedAt DateTime @default(now()) @map("assigned_at")
  district   District @relation(fields: [districtId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, districtId])
  @@map("user_district_assignments")
}

enum CompanyType {
  CraftyCode
  Avalern
}

enum TouchpointType {
  email
  call
  linkedin_message
}

enum TouchpointOutcome {
  replied
  no_answer
  voicemail
  opted_out
  bounced
  booked
  ignored
}

enum LeadStatusType {
  not_contacted
  actively_contacting
  engaged
  won
  not_interested
}

enum CampaignStatusType {
  active
  complete
}

enum UserRoleType {
  admin
  member
}
