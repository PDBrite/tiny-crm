name: Deploy to ECS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1 # Change to your region
  ECR_REPOSITORY: lead-manager # Change to your ECR repo name
  ECS_SERVICE: lead-manager-service # Change to your ECS service name
  ECS_CLUSTER: lead-manager-cluster # Change to your ECS cluster name
  ECS_TASK_DEFINITION: lead-manager-task # Change to your task definition name

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Run database migrations
      run: |
        # Install Node.js and npm
        curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
        sudo apt-get install -y nodejs
        
        # Install dependencies
        npm ci
        
        # Run database migrations
        echo "Running database migrations..."
        npx prisma migrate deploy
        
        # Generate Prisma client
        echo "Generating Prisma client..."
        npx prisma generate
        
        echo "Database setup completed successfully!"

    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} \
        --query taskDefinition > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v2
      with:
        task-definition: task-definition.json
        container-name: lead-manager # Change to your container name
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Health check
      run: |
        echo "Waiting for service to be stable..."
        sleep 30
        
        # Health check with retries
        for i in {1..10}; do
          echo "Health check attempt $i..."
          if curl -f ${{ secrets.HEALTH_CHECK_URL }}/api/health; then
            echo "Health check passed!"
            break
          else
            echo "Health check failed, retrying in 10 seconds..."
            sleep 10
          fi
        done
        
        echo "Deployment completed successfully!" 