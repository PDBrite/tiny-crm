{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///Users/jdog/projects/lead-manager/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\nimport { Database } from '@/types/database'\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n\nexport const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey)\n\n// Client-side Supabase client\nexport function createClientComponentClient() {\n  return createClient<Database>(supabaseUrl, supabaseAnonKey)\n} "],"names":[],"mappings":";;;;AAAA;;AAGA,MAAM;AACN,MAAM;AAEC,MAAM,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAY,aAAa;AAGrD,SAAS;IACd,OAAO,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAY,aAAa;AAC7C","debugId":null}},
    {"offset": {"line": 166, "column": 0}, "map": {"version":3,"sources":["file:///Users/jdog/projects/lead-manager/src/app/api/touchpoint-counts/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { supabase } from '../../../lib/supabase'\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const startDate = searchParams.get('startDate')\n    const endDate = searchParams.get('endDate')\n    const campaignId = searchParams.get('campaignId')\n    const company = searchParams.get('company')\n\n    if (!startDate || !endDate) {\n      return NextResponse.json({ error: 'Start date and end date are required' }, { status: 400 })\n    }\n\n    let touchpoints = []\n\n    if (company === 'Avalern') {\n      // For Avalern, fetch touchpoints for district contacts\n      let query = supabase\n        .from('touchpoints')\n        .select(`\n          scheduled_at,\n          district_contact:district_contacts!inner(\n            id,\n            district_lead:district_leads!inner(\n              id,\n              company,\n              campaign_id\n            )\n          )\n        `)\n        .gte('scheduled_at', startDate)\n        .lte('scheduled_at', endDate + 'T23:59:59.999Z')\n        .is('completed_at', null)\n        .eq('district_contact.district_lead.company', 'Avalern')\n\n      // Add campaign filter if provided\n      if (campaignId) {\n        query = query.eq('district_contact.district_lead.campaign_id', campaignId)\n      }\n\n      const { data: districtTouchpoints, error } = await query\n\n      if (error) {\n        console.error('Error fetching district touchpoint counts:', error)\n        return NextResponse.json({ error: 'Failed to fetch touchpoint counts' }, { status: 500 })\n      }\n\n      touchpoints = districtTouchpoints || []\n    } else {\n      // For other companies, fetch regular lead touchpoints\n      let query = supabase\n        .from('touchpoints')\n        .select(`\n          scheduled_at,\n          lead:leads!inner(\n            company, \n            campaign_id,\n            campaign:campaigns(company)\n          )\n        `)\n        .gte('scheduled_at', startDate)\n        .lte('scheduled_at', endDate + 'T23:59:59.999Z')\n        .is('completed_at', null)\n\n      // Add company filter if provided\n      if (company) {\n        query = query.eq('lead.campaign.company', company)\n      }\n\n      // Add campaign filter if provided\n      if (campaignId) {\n        query = query.eq('lead.campaign_id', campaignId)\n      }\n\n      const { data: leadTouchpoints, error } = await query\n\n      if (error) {\n        console.error('Error fetching lead touchpoint counts:', error)\n        return NextResponse.json({ error: 'Failed to fetch touchpoint counts' }, { status: 500 })\n      }\n\n      touchpoints = leadTouchpoints || []\n    }\n\n    // Count touchpoints by date\n    const counts: Record<string, number> = {}\n    \n    touchpoints.forEach((touchpoint: any) => {\n      const date = new Date(touchpoint.scheduled_at).toISOString().split('T')[0]\n      counts[date] = (counts[date] || 0) + 1\n    })\n\n    return NextResponse.json({ counts })\n  } catch (error) {\n    console.error('Error in touchpoint-counts API:', error)\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,YAAY,aAAa,GAAG,CAAC;QACnC,MAAM,UAAU,aAAa,GAAG,CAAC;QACjC,MAAM,aAAa,aAAa,GAAG,CAAC;QACpC,MAAM,UAAU,aAAa,GAAG,CAAC;QAEjC,IAAI,CAAC,aAAa,CAAC,SAAS;YAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAuC,GAAG;gBAAE,QAAQ;YAAI;QAC5F;QAEA,IAAI,cAAc,EAAE;QAEpB,IAAI,YAAY,WAAW;YACzB,uDAAuD;YACvD,IAAI,QAAQ,wHAAA,CAAA,WAAQ,CACjB,IAAI,CAAC,eACL,MAAM,CAAC,CAAC;;;;;;;;;;QAUT,CAAC,EACA,GAAG,CAAC,gBAAgB,WACpB,GAAG,CAAC,gBAAgB,UAAU,kBAC9B,EAAE,CAAC,gBAAgB,MACnB,EAAE,CAAC,0CAA0C;YAEhD,kCAAkC;YAClC,IAAI,YAAY;gBACd,QAAQ,MAAM,EAAE,CAAC,8CAA8C;YACjE;YAEA,MAAM,EAAE,MAAM,mBAAmB,EAAE,KAAK,EAAE,GAAG,MAAM;YAEnD,IAAI,OAAO;gBACT,QAAQ,KAAK,CAAC,8CAA8C;gBAC5D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBAAE,OAAO;gBAAoC,GAAG;oBAAE,QAAQ;gBAAI;YACzF;YAEA,cAAc,uBAAuB,EAAE;QACzC,OAAO;YACL,sDAAsD;YACtD,IAAI,QAAQ,wHAAA,CAAA,WAAQ,CACjB,IAAI,CAAC,eACL,MAAM,CAAC,CAAC;;;;;;;QAOT,CAAC,EACA,GAAG,CAAC,gBAAgB,WACpB,GAAG,CAAC,gBAAgB,UAAU,kBAC9B,EAAE,CAAC,gBAAgB;YAEtB,iCAAiC;YACjC,IAAI,SAAS;gBACX,QAAQ,MAAM,EAAE,CAAC,yBAAyB;YAC5C;YAEA,kCAAkC;YAClC,IAAI,YAAY;gBACd,QAAQ,MAAM,EAAE,CAAC,oBAAoB;YACvC;YAEA,MAAM,EAAE,MAAM,eAAe,EAAE,KAAK,EAAE,GAAG,MAAM;YAE/C,IAAI,OAAO;gBACT,QAAQ,KAAK,CAAC,0CAA0C;gBACxD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBAAE,OAAO;gBAAoC,GAAG;oBAAE,QAAQ;gBAAI;YACzF;YAEA,cAAc,mBAAmB,EAAE;QACrC;QAEA,4BAA4B;QAC5B,MAAM,SAAiC,CAAC;QAExC,YAAY,OAAO,CAAC,CAAC;YACnB,MAAM,OAAO,IAAI,KAAK,WAAW,YAAY,EAAE,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;YAC1E,MAAM,CAAC,KAAK,GAAG,CAAC,MAAM,CAAC,KAAK,IAAI,CAAC,IAAI;QACvC;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAO;IACpC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mCAAmC;QACjD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF","debugId":null}}]
}