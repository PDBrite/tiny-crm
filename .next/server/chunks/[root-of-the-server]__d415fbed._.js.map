{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///Users/jdog/projects/lead-manager/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\nimport { Database } from '@/types/database'\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n\nexport const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey)\n\n// Client-side Supabase client\nexport function createClientComponentClient() {\n  return createClient<Database>(supabaseUrl, supabaseAnonKey)\n} "],"names":[],"mappings":";;;;AAAA;;AAGA,MAAM;AACN,MAAM;AAEC,MAAM,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAY,aAAa;AAGrD,SAAS;IACd,OAAO,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAY,aAAa;AAC7C","debugId":null}},
    {"offset": {"line": 166, "column": 0}, "map": {"version":3,"sources":["file:///Users/jdog/projects/lead-manager/src/app/api/outreach-sequences/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { supabase } from '../../../lib/supabase'\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const company = searchParams.get('company')\n\n    let query = supabase\n      .from('outreach_sequences')\n      .select(`\n        *,\n        steps:outreach_steps(*)\n      `)\n      .order('created_at', { ascending: false })\n\n    if (company) {\n      query = query.eq('company', company)\n    }\n\n    const { data: sequences, error } = await query\n\n    if (error) {\n      console.error('Error fetching outreach sequences:', error)\n      return NextResponse.json(\n        { error: 'Failed to fetch outreach sequences' },\n        { status: 500 }\n      )\n    }\n\n    return NextResponse.json(sequences || [])\n\n  } catch (error) {\n    console.error('Error fetching outreach sequences:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { name, company, description, steps } = await request.json()\n    \n    if (!name || !company) {\n      return NextResponse.json(\n        { error: 'Name and company are required' },\n        { status: 400 }\n      )\n    }\n\n    if (!steps || !Array.isArray(steps) || steps.length === 0) {\n      return NextResponse.json(\n        { error: 'At least one step is required' },\n        { status: 400 }\n      )\n    }\n\n    // Create the sequence\n    const { data: sequence, error: sequenceError } = await supabase\n      .from('outreach_sequences')\n      .insert({\n        name,\n        company,\n        description\n      })\n      .select()\n      .single()\n\n    if (sequenceError) {\n      console.error('Error creating outreach sequence:', sequenceError)\n      return NextResponse.json(\n        { error: 'Failed to create outreach sequence' },\n        { status: 500 }\n      )\n    }\n\n    // Create the steps\n    const stepInserts = steps.map((step: any, index: number) => ({\n      sequence_id: sequence.id,\n      step_order: index + 1,\n      type: step.type,\n      name: step.name,\n      content_link: step.content_link,\n      day_offset: step.day_offset\n    }))\n\n    const { error: stepsError } = await supabase\n      .from('outreach_steps')\n      .insert(stepInserts)\n\n    if (stepsError) {\n      console.error('Error creating outreach steps:', stepsError)\n      // Delete the sequence if steps creation failed\n      await supabase.from('outreach_sequences').delete().eq('id', sequence.id)\n      return NextResponse.json(\n        { error: 'Failed to create outreach steps' },\n        { status: 500 }\n      )\n    }\n\n    // Fetch the complete sequence with steps\n    const { data: completeSequence, error: fetchError } = await supabase\n      .from('outreach_sequences')\n      .select(`\n        *,\n        steps:outreach_steps(*)\n      `)\n      .eq('id', sequence.id)\n      .single()\n\n    if (fetchError) {\n      console.error('Error fetching complete sequence:', fetchError)\n      return NextResponse.json(\n        { error: 'Sequence created but failed to fetch complete data' },\n        { status: 500 }\n      )\n    }\n\n    return NextResponse.json(completeSequence)\n\n  } catch (error) {\n    console.error('Error creating outreach sequence:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n} "],"names":[],"mappings":"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","debugId":null}}]
}