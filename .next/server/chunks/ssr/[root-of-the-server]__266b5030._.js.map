{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file:///Users/jdog/projects/lead-manager/src/components/layout/Sidebar.tsx"],"sourcesContent":["'use client'\n\nimport Link from 'next/link'\nimport { usePathname } from 'next/navigation'\nimport { useCompany } from '@/contexts/CompanyContext'\nimport { \n  LayoutDashboard, \n  Users, \n  Target, \n  Upload, \n  Settings,\n  Building2,\n  Calendar,\n  School,\n  MessageSquare,\n  User\n} from 'lucide-react'\n\nconst craftyCodeNavigation = [\n  { name: 'Dashboard', href: '/', icon: LayoutDashboard },\n  { name: 'Leads', href: '/leads', icon: Users },\n  { name: 'Outreach', href: '/outreach', icon: MessageSquare },\n  { name: 'Campaigns', href: '/campaigns', icon: Target },\n  { name: 'Import', href: '/import', icon: Upload },\n]\n\nconst avalernNav = [\n  { name: 'Dashboard', href: '/', icon: LayoutDashboard },\n  { name: 'Districts', href: '/districts', icon: School },\n  { name: 'District Contacts', href: '/leads', icon: Users },\n  { name: 'Outreach', href: '/outreach', icon: MessageSquare },\n  { name: 'Campaigns', href: '/campaigns', icon: Target },\n  { name: 'Import', href: '/import', icon: Upload },\n]\n\nconst companyColors: Record<string, string> = {\n  'CraftyCode': 'bg-blue-500',\n  'Avalern': 'bg-purple-500'\n}\n\nexport default function Sidebar() {\n  const pathname = usePathname()\n  const { selectedCompany, setSelectedCompany, availableCompanies } = useCompany()\n\n  return (\n    <div className=\"flex h-screen w-64 flex-col bg-white shadow-lg\">\n      {/* Logo */}\n      <div className=\"flex h-16 items-center px-6 border-b border-gray-200\">\n        <Building2 className=\"h-8 w-8 text-blue-600\" />\n        <span className=\"ml-3 text-xl font-bold text-gray-900\">Lead Manager</span>\n      </div>\n\n      {/* User Info */}\n      <div className=\"border-b border-gray-200 p-4\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center\">\n            <User className=\"h-4 w-4 text-gray-500\" />\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-medium text-gray-900 truncate\">\n              Current User\n            </p>\n            <p className=\"text-xs text-gray-500 truncate\">\n              User\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Company Selector */}\n      {availableCompanies.length > 0 && (\n        <div className=\"border-b border-gray-200 p-4\">\n          <div className=\"text-xs font-medium text-gray-500 uppercase tracking-wider mb-3\">\n            Active Companies\n          </div>\n          <div className=\"space-y-2\">\n            {availableCompanies.map((company) => (\n              <button\n                key={company}\n                onClick={() => setSelectedCompany(company)}\n                className={`\n                  flex items-center w-full px-3 py-2 text-sm font-medium rounded-lg transition-colors\n                  ${selectedCompany === company\n                    ? 'bg-gray-100 text-gray-900 border-l-4 border-blue-500'\n                    : 'text-gray-700 hover:bg-gray-50 hover:text-gray-900'\n                  }\n                `}\n              >\n                <div className={`w-3 h-3 ${companyColors[company] || 'bg-gray-500'} rounded-full mr-3`}></div>\n                <span>{company}</span>\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Navigation */}\n      <nav className=\"flex-1 px-4 py-6 space-y-2\">\n        {selectedCompany === 'CraftyCode' && craftyCodeNavigation.map((item) => {\n          const isActive = pathname === item.href\n          return (\n            <Link\n              key={item.name}\n              href={item.href}\n              className={`\n                flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors\n                ${isActive \n                  ? 'bg-blue-50 text-blue-700 border-r-2 border-blue-700' \n                  : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'\n                }\n              `}\n            >\n              <item.icon className={`mr-3 h-5 w-5 ${isActive ? 'text-blue-700' : 'text-gray-400'}`} />\n              {item.name}\n            </Link>\n          )\n        })}\n        {selectedCompany === 'Avalern' && avalernNav.map((item) => {\n          const isActive = pathname === item.href\n          return (\n            <Link\n              key={item.name}\n              href={item.href}\n              className={`\n                flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors\n                ${isActive \n                  ? 'bg-blue-50 text-blue-700 border-r-2 border-blue-700' \n                  : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'\n                }\n              `}\n            >\n              <item.icon className={`mr-3 h-5 w-5 ${isActive ? 'text-blue-700' : 'text-gray-400'}`} />\n              {item.name}\n            </Link>\n          )\n        })}\n      </nav>\n    </div>\n  )\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 321, "column": 0}, "map": {"version":3,"sources":["file:///Users/jdog/projects/lead-manager/src/components/layout/DashboardLayout.tsx"],"sourcesContent":["'use client'\n\nimport Sidebar from './Sidebar'\n\ninterface DashboardLayoutProps {\n  children: React.ReactNode\n}\n\nexport default function DashboardLayout({ children }: DashboardLayoutProps) {\n  return (\n    <div className=\"flex h-screen bg-gray-100\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-auto\">\n        <div className=\"p-8\">\n          {children}\n        </div>\n      </main>\n    </div>\n  )\n} "],"names":[],"mappings":";;;;AAEA;AAFA;;;AAQe,SAAS,gBAAgB,EAAE,QAAQ,EAAwB;IACxE,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC,uIAAA,CAAA,UAAO;;;;;0BACR,8OAAC;gBAAK,WAAU;0BACd,cAAA,8OAAC;oBAAI,WAAU;8BACZ;;;;;;;;;;;;;;;;;AAKX","debugId":null}},
    {"offset": {"line": 454, "column": 0}, "map": {"version":3,"sources":["file:///Users/jdog/projects/lead-manager/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\nimport { Database } from '@/types/database'\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n\nexport const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey)\n\n// Client-side Supabase client\nexport function createClientComponentClient() {\n  return createClient<Database>(supabaseUrl, supabaseAnonKey)\n} "],"names":[],"mappings":";;;;AAAA;;AAGA,MAAM;AACN,MAAM;AAEC,MAAM,WAAW,CAAA,GAAA,uLAAA,CAAA,eAAY,AAAD,EAAY,aAAa;AAGrD,SAAS;IACd,OAAO,CAAA,GAAA,uLAAA,CAAA,eAAY,AAAD,EAAY,aAAa;AAC7C","debugId":null}},
    {"offset": {"line": 472, "column": 0}, "map": {"version":3,"sources":["file:///Users/jdog/projects/lead-manager/src/types/leads.ts"],"sourcesContent":["export interface Campaign {\n  id: string\n  name: string\n  company: string\n  created_at: string\n  outreach_sequence_id?: string\n  outreach_sequence?: OutreachSequence\n}\n\nexport interface Touchpoint {\n  id: string\n  lead_id: string\n  type: 'email' | 'call' | 'linkedin_message'\n  subject?: string\n  content?: string\n  scheduled_at?: string\n  completed_at?: string\n  outcome?: string\n  outcome_enum?: 'replied' | 'no_answer' | 'voicemail' | 'opted_out' | 'bounced' | 'booked' | 'ignored'\n  created_at: string\n}\n\n// Keep ContactAttempt as an alias for backward compatibility during transition\nexport type ContactAttempt = Touchpoint\n\nexport interface OutreachSequence {\n  id: string\n  name: string\n  company: string\n  description?: string\n  created_at: string\n  updated_at: string\n  steps?: OutreachStep[]\n}\n\nexport interface OutreachStep {\n  id: string\n  sequence_id: string\n  step_order: number\n  type: 'email' | 'call' | 'linkedin_message'\n  name?: string\n  content_link?: string\n  day_offset: number\n  created_at: string\n  updated_at: string\n}\n\nexport interface Lead {\n  id: string\n  first_name: string\n  last_name: string\n  email: string\n  phone?: string\n  city?: string\n  state?: string\n  company?: string\n  linkedin_url?: string\n  website_url?: string\n  online_profile?: string\n  source?: string\n  status: string\n  notes?: string\n  campaign_id?: string\n  campaign?: Campaign\n  created_at: string\n  last_contacted_at?: string\n  touchpoints?: Touchpoint[]\n  touchpoints_count?: number\n  scheduled_touchpoints_count?: number\n  // Legacy fields for backward compatibility\n  contact_attempts?: ContactAttempt[]\n  contact_attempts_count?: number\n}\n\nexport interface SyncResults {\n  syncedCount: number\n  totalEmails: number\n  errors?: string[]\n}\n\n// Status mapping for display\nexport const STATUS_DISPLAY_MAP: Record<string, string> = {\n  'not_contacted': 'Not Contacted',\n  'actively_contacting': 'Actively Contacting',\n  'engaged': 'Engaged',\n  'won': 'Won',\n  'not_interested': 'Not Interested'\n}\n\n// Status descriptions for tooltips/help text\nexport const STATUS_DESCRIPTIONS: Record<string, string> = {\n  'not_contacted': 'Lead is in your database, but no outreach yet.',\n  'actively_contacting': \"You're in the process of emailing/calling/following up.\",\n  'engaged': \"They've responded or shown interest (replied, booked a call, etc.).\",\n  'won': 'They became a customer or agreed to a pilot/demo.',\n  'not_interested': 'Said no, ghosted after multiple follow-ups, or clearly not a fit.'\n} "],"names":[],"mappings":";;;;AAiFO,MAAM,qBAA6C;IACxD,iBAAiB;IACjB,uBAAuB;IACvB,WAAW;IACX,OAAO;IACP,kBAAkB;AACpB;AAGO,MAAM,sBAA8C;IACzD,iBAAiB;IACjB,uBAAuB;IACvB,WAAW;IACX,OAAO;IACP,kBAAkB;AACpB","debugId":null}},
    {"offset": {"line": 496, "column": 0}, "map": {"version":3,"sources":["file:///Users/jdog/projects/lead-manager/src/app/campaigns/select-leads/page.tsx"],"sourcesContent":["'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useRouter, useSearchParams } from 'next/navigation'\nimport DashboardLayout from '../../../components/layout/DashboardLayout'\nimport { useCompany } from '../../../contexts/CompanyContext'\nimport { supabase } from '../../../lib/supabase'\nimport { STATUS_DISPLAY_MAP } from '../../../types/leads'\nimport {\n  Search,\n  Users,\n  CheckCircle,\n  ArrowLeft,\n  ArrowRight\n} from 'lucide-react'\n\ninterface Lead {\n  id: string\n  first_name: string\n  last_name: string\n  email: string\n  phone?: string\n  city?: string\n  status: string\n  campaign_id?: string\n  created_at: string\n  source?: string\n}\n\nexport default function SelectLeadsPage() {\n  const router = useRouter()\n  const searchParams = useSearchParams()\n  const { selectedCompany } = useCompany()\n  \n  // Get campaign data from URL params\n  const campaignName = searchParams.get('campaignName') || ''\n  const outreachSequenceId = searchParams.get('outreachSequenceId') || ''\n  const launchDate = searchParams.get('launchDate') || ''\n  const endDate = searchParams.get('endDate') || ''\n  const description = searchParams.get('description') || ''\n  const instantlyCampaignId = searchParams.get('instantlyCampaignId') || ''\n\n  // State\n  const [leads, setLeads] = useState<Lead[]>([])\n  const [filteredLeads, setFilteredLeads] = useState<Lead[]>([])\n  const [paginatedLeads, setPaginatedLeads] = useState<Lead[]>([])\n  const [selectedLeads, setSelectedLeads] = useState<string[]>([])\n  const [loading, setLoading] = useState(true)\n  const [creating, setCreating] = useState(false)\n\n  // Pagination states\n  const [currentPage, setCurrentPage] = useState(1)\n  const [itemsPerPage, setItemsPerPage] = useState(20)\n\n  // Filter states\n  const [searchTerm, setSearchTerm] = useState('')\n  const [selectedStatus, setSelectedStatus] = useState('')\n  const [selectedCity, setSelectedCity] = useState('')\n  const [selectedSource, setSelectedSource] = useState('')\n\n  // Computed values\n  const uniqueCities = [...new Set((leads || []).map(l => l.city).filter(Boolean))].sort()\n  const uniqueSources = [...new Set((leads || []).map(l => l.source).filter(Boolean))].sort()\n  const availableStatuses = Object.keys(STATUS_DISPLAY_MAP)\n\n  // Pagination info\n  const totalPages = Math.ceil(filteredLeads.length / itemsPerPage)\n  const totalFilteredCount = filteredLeads.length\n  const startIndex = (currentPage - 1) * itemsPerPage + 1\n  const endIndex = Math.min(currentPage * itemsPerPage, filteredLeads.length)\n\n  // Fetch available leads\n  useEffect(() => {\n    const fetchLeads = async () => {\n      try {\n        setLoading(true)\n        const { data, error } = await supabase\n          .from('leads')\n          .select('id, first_name, last_name, email, phone, city, status, campaign_id, created_at, source')\n          .is('campaign_id', null) // Only leads not assigned to campaigns\n          .order('created_at', { ascending: false })\n\n        if (error) {\n          console.error('Error fetching leads:', error)\n          return\n        }\n\n        setLeads(data || [])\n      } catch (error) {\n        console.error('Error fetching leads:', error)\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchLeads()\n  }, [])\n\n  // Apply filters\n  useEffect(() => {\n    let filtered = leads || []\n\n    if (searchTerm) {\n      const searchLower = searchTerm.toLowerCase()\n      filtered = filtered.filter(lead => \n        (lead.first_name || '').toLowerCase().includes(searchLower) ||\n        (lead.last_name || '').toLowerCase().includes(searchLower) ||\n        (lead.email || '').toLowerCase().includes(searchLower)\n      )\n    }\n\n    if (selectedStatus) {\n      filtered = filtered.filter(lead => lead.status === selectedStatus)\n    }\n\n    if (selectedCity) {\n      filtered = filtered.filter(lead => lead.city === selectedCity)\n    }\n\n    if (selectedSource) {\n      filtered = filtered.filter(lead => lead.source === selectedSource)\n    }\n\n    setFilteredLeads(filtered)\n    // Reset to first page when filters change\n    setCurrentPage(1)\n  }, [leads, searchTerm, selectedStatus, selectedCity, selectedSource])\n\n  // Pagination logic\n  useEffect(() => {\n    const startIndex = (currentPage - 1) * itemsPerPage\n    const endIndex = startIndex + itemsPerPage\n    const paginated = filteredLeads.slice(startIndex, endIndex)\n    setPaginatedLeads(paginated)\n  }, [filteredLeads, currentPage, itemsPerPage])\n\n  // Selection handlers\n  const handleSelectLead = (leadId: string) => {\n    setSelectedLeads(prev => \n      prev.includes(leadId)\n        ? prev.filter(id => id !== leadId)\n        : [...prev, leadId]\n    )\n  }\n\n  const handleSelectAll = () => {\n    const allFilteredIds = filteredLeads.map(lead => lead.id)\n    setSelectedLeads(prev => \n      prev.length === allFilteredIds.length \n        ? [] \n        : allFilteredIds\n    )\n  }\n\n  const handleClearSelection = () => {\n    setSelectedLeads([])\n  }\n\n  const handleSelectNumber = (count: number) => {\n    if (count === 0) {\n      setSelectedLeads([])\n    } else {\n      const leadsToSelect = filteredLeads.slice(0, count)\n      setSelectedLeads(leadsToSelect.map(lead => lead.id))\n    }\n  }\n\n  // Pagination handlers\n  const handlePageChange = (page: number) => {\n    setCurrentPage(page)\n  }\n\n  const handleItemsPerPageChange = (items: number) => {\n    setItemsPerPage(items)\n    setCurrentPage(1) // Reset to first page\n  }\n\n  // Create campaign with selected leads\n  const handleCreateCampaign = async () => {\n    if (selectedLeads.length === 0) {\n      alert('Please select at least one lead for this campaign')\n      return\n    }\n\n    setCreating(true)\n    try {\n      // Create campaign\n      const { data: campaign, error: campaignError } = await supabase\n        .from('campaigns')\n        .insert({\n          name: campaignName,\n          company: selectedCompany,\n          description: description,\n          start_date: launchDate,\n          end_date: endDate,\n          outreach_sequence_id: outreachSequenceId,\n          instantly_campaign_id: instantlyCampaignId || null,\n          created_at: new Date().toISOString()\n        })\n        .select(`\n          *,\n          outreach_sequence:outreach_sequences(\n            id, name, description,\n            steps:outreach_steps(*)\n          )\n        `)\n        .single()\n\n      if (campaignError) {\n        console.error('Error creating campaign:', campaignError)\n        alert('Failed to create campaign')\n        return\n      }\n\n      // Assign selected leads to the campaign and update status to actively_contacting\n      const { error: leadsError } = await supabase\n        .from('leads')\n        .update({ \n          campaign_id: campaign.id,\n          status: 'actively_contacting'\n        })\n        .in('id', selectedLeads)\n\n      if (leadsError) {\n        console.error('Error assigning leads to campaign:', leadsError)\n        alert('Campaign created but failed to assign leads')\n        return\n      }\n\n      // Schedule touchpoints for all selected leads\n      if (campaign.outreach_sequence?.steps) {\n        const touchpointsToCreate = []\n        const launchDateObj = new Date(launchDate)\n\n        // Helper function to add business days\n        const addBusinessDays = (date: Date, days: number) => {\n          const result = new Date(date)\n          let addedDays = 0\n          while (addedDays < days) {\n            result.setDate(result.getDate() + 1)\n            if (result.getDay() !== 0 && result.getDay() !== 6) { // Skip weekends\n              addedDays++\n            }\n          }\n          return result\n        }\n\n        for (const leadId of selectedLeads) {\n          for (const step of campaign.outreach_sequence.steps) {\n            const scheduledDate = addBusinessDays(launchDateObj, step.day_offset)\n            \n            touchpointsToCreate.push({\n              lead_id: leadId,\n              type: step.type,\n                              subject: step.name || '',\n                              content: step.content_link || '',\n              scheduled_at: scheduledDate.toISOString(),\n              created_at: new Date().toISOString()\n            })\n          }\n        }\n\n        const { error: touchpointsError } = await supabase\n          .from('touchpoints')\n          .insert(touchpointsToCreate)\n\n        if (touchpointsError) {\n          console.error('Error creating touchpoints:', touchpointsError)\n          alert('Campaign and leads created but failed to schedule touchpoints')\n        }\n      }\n\n      const touchpointCount = selectedLeads.length * (campaign.outreach_sequence?.steps?.length || 0)\n      alert(`Campaign \"${campaign.name}\" created successfully!\\n${selectedLeads.length} leads assigned and ${touchpointCount} touchpoints scheduled.`)\n      \n      // Navigate to the campaign detail page\n      router.push(`/campaigns/${campaign.id}`)\n\n    } catch (error) {\n      console.error('Error creating campaign:', error)\n      alert('Failed to create campaign')\n    } finally {\n      setCreating(false)\n    }\n  }\n\n  const getStatusColor = (status: string) => {\n    const colors = {\n      'not_contacted': 'bg-gray-100 text-gray-800',\n      'actively_contacting': 'bg-blue-100 text-blue-800',\n      'engaged': 'bg-green-100 text-green-800',\n      'won': 'bg-emerald-100 text-emerald-800',\n      'not_interested': 'bg-red-100 text-red-800'\n    }\n    return colors[status as keyof typeof colors] || colors.not_contacted\n  }\n\n  if (loading) {\n    return (\n      <DashboardLayout>\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n        </div>\n      </DashboardLayout>\n    )\n  }\n\n  return (\n    <DashboardLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <div className=\"flex items-center space-x-4\">\n                <button\n                  onClick={() => router.back()}\n                  className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n                >\n                  <ArrowLeft className=\"h-5 w-5 text-gray-600\" />\n                </button>\n                <div>\n                  <h1 className=\"text-3xl font-bold text-gray-900\">Select Leads for Campaign</h1>\n                  <p className=\"text-gray-600 mt-1\">\n                    Choose leads for \"<span className=\"font-semibold text-blue-600\">{campaignName}</span>\" campaign\n                  </p>\n                </div>\n              </div>\n            </div>\n\n          </div>\n        </div>\n\n        {/* Campaign Info Card */}\n        <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-6\">\n          <div className=\"flex items-center mb-4\">\n            <div className=\"w-3 h-3 bg-blue-500 rounded-full mr-3\"></div>\n            <h3 className=\"text-lg font-bold text-blue-900\">Campaign Details</h3>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"bg-white rounded-lg p-4 shadow-sm\">\n              <p className=\"text-xs font-medium text-blue-600 uppercase tracking-wide mb-1\">Campaign Name</p>\n              <p className=\"text-lg font-semibold text-gray-900\">{campaignName}</p>\n            </div>\n            <div className=\"bg-white rounded-lg p-4 shadow-sm\">\n              <p className=\"text-xs font-medium text-blue-600 uppercase tracking-wide mb-1\">Launch Date</p>\n              <p className=\"text-lg font-semibold text-gray-900\">{new Date(launchDate).toLocaleDateString()}</p>\n            </div>\n            <div className=\"bg-white rounded-lg p-4 shadow-sm\">\n              <p className=\"text-xs font-medium text-blue-600 uppercase tracking-wide mb-1\">Company</p>\n              <p className=\"text-lg font-semibold text-gray-900\">{selectedCompany}</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Search and Filters */}\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n          <div className=\"p-6\">\n            {/* Search Bar */}\n            <div className=\"mb-6\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Search Leads</label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Search by name or email...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm\"\n                />\n              </div>\n            </div>\n\n            {/* Bulk Selection Controls */}\n            <div className=\"mb-6 p-4 bg-gray-50 rounded-lg border border-gray-200\">\n              <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Bulk Selection</h4>\n              <div className=\"flex flex-wrap items-center gap-3\">\n                <div className=\"flex items-center space-x-2\">\n                  <label className=\"text-sm text-gray-600\">Select:</label>\n                  <input\n                    id=\"selectCount\"\n                    type=\"number\"\n                    min=\"1\"\n                    max={totalFilteredCount}\n                    defaultValue={50}\n                    className=\"w-20 px-3 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  />\n                  <span className=\"text-sm text-gray-500\">leads</span>\n                </div>\n                <button\n                  onClick={() => {\n                    const input = document.getElementById('selectCount') as HTMLInputElement\n                    const count = parseInt(input.value) || 50\n                    if (count > 0 && count <= totalFilteredCount) {\n                      handleSelectNumber(count)\n                    }\n                  }}\n                  className=\"px-4 py-2 bg-blue-600 text-white text-sm rounded-lg hover:bg-blue-700 transition-colors\"\n                >\n                  Select\n                </button>\n                <button\n                  onClick={handleClearSelection}\n                  className=\"px-4 py-2 bg-red-600 text-white text-sm rounded-lg hover:bg-red-700 transition-colors\"\n                >\n                  Clear\n                </button>\n              </div>\n            </div>\n\n            {/* Filters */}\n            <div>\n              <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Filter Leads</h4>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Status</label>\n                  <select\n                    value={selectedStatus}\n                    onChange={(e) => setSelectedStatus(e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  >\n                    <option value=\"\">All Statuses</option>\n                    {availableStatuses.map(status => (\n                      <option key={status} value={status}>\n                        {STATUS_DISPLAY_MAP[status as keyof typeof STATUS_DISPLAY_MAP]}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">City</label>\n                  <select\n                    value={selectedCity}\n                    onChange={(e) => setSelectedCity(e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  >\n                    <option value=\"\">All Cities</option>\n                    {uniqueCities.map(city => (\n                      <option key={city} value={city}>{city}</option>\n                    ))}\n                  </select>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Source</label>\n                  <select\n                    value={selectedSource}\n                    onChange={(e) => setSelectedSource(e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  >\n                    <option value=\"\">All Sources</option>\n                    {uniqueSources.map(source => (\n                      <option key={source} value={source}>{source}</option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Action Bar - Show when leads are selected */}\n        {selectedLeads.length > 0 && (\n          <div className=\"bg-gradient-to-r from-green-50 to-blue-50 border border-green-200 rounded-lg p-6 shadow-sm\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n                  <CheckCircle className=\"h-6 w-6 text-green-600\" />\n                </div>\n                <div>\n                  <p className=\"text-lg font-semibold text-gray-900\">\n                    {selectedLeads.length} leads selected\n                  </p>\n                  <p className=\"text-sm text-gray-600\">\n                    Ready to create campaign with selected leads\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <button\n                  onClick={() => router.back()}\n                  className=\"px-6 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 font-medium transition-colors\"\n                >\n                  Back\n                </button>\n                <button\n                  onClick={handleCreateCampaign}\n                  disabled={creating || selectedLeads.length === 0}\n                  className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed font-medium shadow-sm transition-all flex items-center text-lg\"\n                >\n                  {creating ? (\n                    <>\n                      <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\"></div>\n                      Creating Campaign...\n                    </>\n                  ) : (\n                    <>\n                      Create Campaign\n                      <ArrowRight className=\"w-5 h-5 ml-2\" />\n                    </>\n                  )}\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Leads Table */}\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-gray-50 border-b border-gray-200\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    <input\n                      type=\"checkbox\"\n                      checked={selectedLeads.length === filteredLeads.length && filteredLeads.length > 0}\n                      onChange={handleSelectAll}\n                      className=\"h-4 w-4 text-blue-600 rounded\"\n                    />\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Lead\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Status\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Location\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Contact\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Added\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {(paginatedLeads || []).map((lead) => (\n                  <tr\n                    key={lead.id}\n                    className={`hover:bg-gray-50 cursor-pointer transition-colors ${\n                      selectedLeads.includes(lead.id) ? 'bg-blue-50' : ''\n                    }`}\n                    onClick={() => handleSelectLead(lead.id)}\n                  >\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedLeads.includes(lead.id)}\n                        onChange={() => handleSelectLead(lead.id)}\n                        className=\"h-4 w-4 text-blue-600 rounded\"\n                      />\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div>\n                        <div className=\"text-sm font-medium text-gray-900\">\n                          {lead.first_name} {lead.last_name}\n                        </div>\n                        <div className=\"text-sm text-gray-500\">{lead.email}</div>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(lead.status)}`}>\n                        {STATUS_DISPLAY_MAP[lead.status as keyof typeof STATUS_DISPLAY_MAP]}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {lead.city || '-'}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {lead.phone || '-'}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {new Date(lead.created_at).toLocaleDateString()}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n\n          {filteredLeads.length === 0 && (\n            <div className=\"text-center py-12\">\n              <Users className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No leads found</h3>\n              <p className=\"text-gray-500\">\n                No leads match your current filters. Try adjusting your search criteria.\n              </p>\n            </div>\n          )}\n        </div>\n\n        {/* Pagination */}\n        {totalPages > 1 && (\n          <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <span className=\"text-sm text-gray-700\">\n                  Showing {startIndex}-{endIndex} of {totalFilteredCount} leads\n                </span>\n                <select\n                  value={itemsPerPage}\n                  onChange={(e) => handleItemsPerPageChange(Number(e.target.value))}\n                  className=\"px-3 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                >\n                  <option value={10}>10 per page</option>\n                  <option value={20}>20 per page</option>\n                  <option value={50}>50 per page</option>\n                  <option value={100}>100 per page</option>\n                </select>\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <button\n                  onClick={() => handlePageChange(currentPage - 1)}\n                  disabled={currentPage === 1}\n                  className=\"px-3 py-1 border border-gray-300 rounded text-sm hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\"\n                >\n                  Previous\n                </button>\n                \n                <div className=\"flex items-center space-x-1\">\n                  {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n                    const pageNum = currentPage <= 3 ? i + 1 : currentPage - 2 + i\n                    if (pageNum > totalPages) return null\n                    return (\n                      <button\n                        key={pageNum}\n                        onClick={() => handlePageChange(pageNum)}\n                        className={`px-3 py-1 text-sm rounded ${\n                          pageNum === currentPage\n                            ? 'bg-blue-600 text-white'\n                            : 'border border-gray-300 hover:bg-gray-50'\n                        }`}\n                      >\n                        {pageNum}\n                      </button>\n                    )\n                  })}\n                </div>\n                \n                <button\n                  onClick={() => handlePageChange(currentPage + 1)}\n                  disabled={currentPage === totalPages}\n                  className=\"px-3 py-1 border border-gray-300 rounded text-sm hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\"\n                >\n                  Next\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n\n\n      </div>\n    </DashboardLayout>\n  )\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AARA;;;;;;;;;AA6Be,SAAS;IACtB,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IACvB,MAAM,eAAe,CAAA,GAAA,kIAAA,CAAA,kBAAe,AAAD;IACnC,MAAM,EAAE,eAAe,EAAE,GAAG,CAAA,GAAA,kIAAA,CAAA,aAAU,AAAD;IAErC,oCAAoC;IACpC,MAAM,eAAe,aAAa,GAAG,CAAC,mBAAmB;IACzD,MAAM,qBAAqB,aAAa,GAAG,CAAC,yBAAyB;IACrE,MAAM,aAAa,aAAa,GAAG,CAAC,iBAAiB;IACrD,MAAM,UAAU,aAAa,GAAG,CAAC,cAAc;IAC/C,MAAM,cAAc,aAAa,GAAG,CAAC,kBAAkB;IACvD,MAAM,sBAAsB,aAAa,GAAG,CAAC,0BAA0B;IAEvE,QAAQ;IACR,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU,EAAE;IAC7C,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU,EAAE;IAC7D,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU,EAAE;IAC/D,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAY,EAAE;IAC/D,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEzC,oBAAoB;IACpB,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC/C,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEjD,gBAAgB;IAChB,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACrD,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACjD,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAErD,kBAAkB;IAClB,MAAM,eAAe;WAAI,IAAI,IAAI,CAAC,SAAS,EAAE,EAAE,GAAG,CAAC,CAAA,IAAK,EAAE,IAAI,EAAE,MAAM,CAAC;KAAU,CAAC,IAAI;IACtF,MAAM,gBAAgB;WAAI,IAAI,IAAI,CAAC,SAAS,EAAE,EAAE,GAAG,CAAC,CAAA,IAAK,EAAE,MAAM,EAAE,MAAM,CAAC;KAAU,CAAC,IAAI;IACzF,MAAM,oBAAoB,OAAO,IAAI,CAAC,qHAAA,CAAA,qBAAkB;IAExD,kBAAkB;IAClB,MAAM,aAAa,KAAK,IAAI,CAAC,cAAc,MAAM,GAAG;IACpD,MAAM,qBAAqB,cAAc,MAAM;IAC/C,MAAM,aAAa,CAAC,cAAc,CAAC,IAAI,eAAe;IACtD,MAAM,WAAW,KAAK,GAAG,CAAC,cAAc,cAAc,cAAc,MAAM;IAE1E,wBAAwB;IACxB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,aAAa;YACjB,IAAI;gBACF,WAAW;gBACX,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,sHAAA,CAAA,WAAQ,CACnC,IAAI,CAAC,SACL,MAAM,CAAC,0FACP,EAAE,CAAC,eAAe,MAAM,uCAAuC;iBAC/D,KAAK,CAAC,cAAc;oBAAE,WAAW;gBAAM;gBAE1C,IAAI,OAAO;oBACT,QAAQ,KAAK,CAAC,yBAAyB;oBACvC;gBACF;gBAEA,SAAS,QAAQ,EAAE;YACrB,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,yBAAyB;YACzC,SAAU;gBACR,WAAW;YACb;QACF;QAEA;IACF,GAAG,EAAE;IAEL,gBAAgB;IAChB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,WAAW,SAAS,EAAE;QAE1B,IAAI,YAAY;YACd,MAAM,cAAc,WAAW,WAAW;YAC1C,WAAW,SAAS,MAAM,CAAC,CAAA,OACzB,CAAC,KAAK,UAAU,IAAI,EAAE,EAAE,WAAW,GAAG,QAAQ,CAAC,gBAC/C,CAAC,KAAK,SAAS,IAAI,EAAE,EAAE,WAAW,GAAG,QAAQ,CAAC,gBAC9C,CAAC,KAAK,KAAK,IAAI,EAAE,EAAE,WAAW,GAAG,QAAQ,CAAC;QAE9C;QAEA,IAAI,gBAAgB;YAClB,WAAW,SAAS,MAAM,CAAC,CAAA,OAAQ,KAAK,MAAM,KAAK;QACrD;QAEA,IAAI,cAAc;YAChB,WAAW,SAAS,MAAM,CAAC,CAAA,OAAQ,KAAK,IAAI,KAAK;QACnD;QAEA,IAAI,gBAAgB;YAClB,WAAW,SAAS,MAAM,CAAC,CAAA,OAAQ,KAAK,MAAM,KAAK;QACrD;QAEA,iBAAiB;QACjB,0CAA0C;QAC1C,eAAe;IACjB,GAAG;QAAC;QAAO;QAAY;QAAgB;QAAc;KAAe;IAEpE,mBAAmB;IACnB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,aAAa,CAAC,cAAc,CAAC,IAAI;QACvC,MAAM,WAAW,aAAa;QAC9B,MAAM,YAAY,cAAc,KAAK,CAAC,YAAY;QAClD,kBAAkB;IACpB,GAAG;QAAC;QAAe;QAAa;KAAa;IAE7C,qBAAqB;IACrB,MAAM,mBAAmB,CAAC;QACxB,iBAAiB,CAAA,OACf,KAAK,QAAQ,CAAC,UACV,KAAK,MAAM,CAAC,CAAA,KAAM,OAAO,UACzB;mBAAI;gBAAM;aAAO;IAEzB;IAEA,MAAM,kBAAkB;QACtB,MAAM,iBAAiB,cAAc,GAAG,CAAC,CAAA,OAAQ,KAAK,EAAE;QACxD,iBAAiB,CAAA,OACf,KAAK,MAAM,KAAK,eAAe,MAAM,GACjC,EAAE,GACF;IAER;IAEA,MAAM,uBAAuB;QAC3B,iBAAiB,EAAE;IACrB;IAEA,MAAM,qBAAqB,CAAC;QAC1B,IAAI,UAAU,GAAG;YACf,iBAAiB,EAAE;QACrB,OAAO;YACL,MAAM,gBAAgB,cAAc,KAAK,CAAC,GAAG;YAC7C,iBAAiB,cAAc,GAAG,CAAC,CAAA,OAAQ,KAAK,EAAE;QACpD;IACF;IAEA,sBAAsB;IACtB,MAAM,mBAAmB,CAAC;QACxB,eAAe;IACjB;IAEA,MAAM,2BAA2B,CAAC;QAChC,gBAAgB;QAChB,eAAe,GAAG,sBAAsB;;IAC1C;IAEA,sCAAsC;IACtC,MAAM,uBAAuB;QAC3B,IAAI,cAAc,MAAM,KAAK,GAAG;YAC9B,MAAM;YACN;QACF;QAEA,YAAY;QACZ,IAAI;YACF,kBAAkB;YAClB,MAAM,EAAE,MAAM,QAAQ,EAAE,OAAO,aAAa,EAAE,GAAG,MAAM,sHAAA,CAAA,WAAQ,CAC5D,IAAI,CAAC,aACL,MAAM,CAAC;gBACN,MAAM;gBACN,SAAS;gBACT,aAAa;gBACb,YAAY;gBACZ,UAAU;gBACV,sBAAsB;gBACtB,uBAAuB,uBAAuB;gBAC9C,YAAY,IAAI,OAAO,WAAW;YACpC,GACC,MAAM,CAAC,CAAC;;;;;;QAMT,CAAC,EACA,MAAM;YAET,IAAI,eAAe;gBACjB,QAAQ,KAAK,CAAC,4BAA4B;gBAC1C,MAAM;gBACN;YACF;YAEA,iFAAiF;YACjF,MAAM,EAAE,OAAO,UAAU,EAAE,GAAG,MAAM,sHAAA,CAAA,WAAQ,CACzC,IAAI,CAAC,SACL,MAAM,CAAC;gBACN,aAAa,SAAS,EAAE;gBACxB,QAAQ;YACV,GACC,EAAE,CAAC,MAAM;YAEZ,IAAI,YAAY;gBACd,QAAQ,KAAK,CAAC,sCAAsC;gBACpD,MAAM;gBACN;YACF;YAEA,8CAA8C;YAC9C,IAAI,SAAS,iBAAiB,EAAE,OAAO;gBACrC,MAAM,sBAAsB,EAAE;gBAC9B,MAAM,gBAAgB,IAAI,KAAK;gBAE/B,uCAAuC;gBACvC,MAAM,kBAAkB,CAAC,MAAY;oBACnC,MAAM,SAAS,IAAI,KAAK;oBACxB,IAAI,YAAY;oBAChB,MAAO,YAAY,KAAM;wBACvB,OAAO,OAAO,CAAC,OAAO,OAAO,KAAK;wBAClC,IAAI,OAAO,MAAM,OAAO,KAAK,OAAO,MAAM,OAAO,GAAG;4BAClD;wBACF;oBACF;oBACA,OAAO;gBACT;gBAEA,KAAK,MAAM,UAAU,cAAe;oBAClC,KAAK,MAAM,QAAQ,SAAS,iBAAiB,CAAC,KAAK,CAAE;wBACnD,MAAM,gBAAgB,gBAAgB,eAAe,KAAK,UAAU;wBAEpE,oBAAoB,IAAI,CAAC;4BACvB,SAAS;4BACT,MAAM,KAAK,IAAI;4BACC,SAAS,KAAK,IAAI,IAAI;4BACtB,SAAS,KAAK,YAAY,IAAI;4BAC9C,cAAc,cAAc,WAAW;4BACvC,YAAY,IAAI,OAAO,WAAW;wBACpC;oBACF;gBACF;gBAEA,MAAM,EAAE,OAAO,gBAAgB,EAAE,GAAG,MAAM,sHAAA,CAAA,WAAQ,CAC/C,IAAI,CAAC,eACL,MAAM,CAAC;gBAEV,IAAI,kBAAkB;oBACpB,QAAQ,KAAK,CAAC,+BAA+B;oBAC7C,MAAM;gBACR;YACF;YAEA,MAAM,kBAAkB,cAAc,MAAM,GAAG,CAAC,SAAS,iBAAiB,EAAE,OAAO,UAAU,CAAC;YAC9F,MAAM,CAAC,UAAU,EAAE,SAAS,IAAI,CAAC,yBAAyB,EAAE,cAAc,MAAM,CAAC,oBAAoB,EAAE,gBAAgB,uBAAuB,CAAC;YAE/I,uCAAuC;YACvC,OAAO,IAAI,CAAC,CAAC,WAAW,EAAE,SAAS,EAAE,EAAE;QAEzC,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,4BAA4B;YAC1C,MAAM;QACR,SAAU;YACR,YAAY;QACd;IACF;IAEA,MAAM,iBAAiB,CAAC;QACtB,MAAM,SAAS;YACb,iBAAiB;YACjB,uBAAuB;YACvB,WAAW;YACX,OAAO;YACP,kBAAkB;QACpB;QACA,OAAO,MAAM,CAAC,OAA8B,IAAI,OAAO,aAAa;IACtE;IAEA,IAAI,SAAS;QACX,qBACE,8OAAC,+IAAA,CAAA,UAAe;sBACd,cAAA,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC;oBAAI,WAAU;;;;;;;;;;;;;;;;IAIvB;IAEA,qBACE,8OAAC,+IAAA,CAAA,UAAe;kBACd,cAAA,8OAAC;YAAI,WAAU;;8BAEb,8OAAC;oBAAI,WAAU;8BACb,cAAA,8OAAC;wBAAI,WAAU;kCACb,cAAA,8OAAC;sCACC,cAAA,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;wCACC,SAAS,IAAM,OAAO,IAAI;wCAC1B,WAAU;kDAEV,cAAA,8OAAC,gNAAA,CAAA,YAAS;4CAAC,WAAU;;;;;;;;;;;kDAEvB,8OAAC;;0DACC,8OAAC;gDAAG,WAAU;0DAAmC;;;;;;0DACjD,8OAAC;gDAAE,WAAU;;oDAAqB;kEACd,8OAAC;wDAAK,WAAU;kEAA+B;;;;;;oDAAoB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BAUjG,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAI,WAAU;;8CACb,8OAAC;oCAAI,WAAU;;;;;;8CACf,8OAAC;oCAAG,WAAU;8CAAkC;;;;;;;;;;;;sCAElD,8OAAC;4BAAI,WAAU;;8CACb,8OAAC;oCAAI,WAAU;;sDACb,8OAAC;4CAAE,WAAU;sDAAiE;;;;;;sDAC9E,8OAAC;4CAAE,WAAU;sDAAuC;;;;;;;;;;;;8CAEtD,8OAAC;oCAAI,WAAU;;sDACb,8OAAC;4CAAE,WAAU;sDAAiE;;;;;;sDAC9E,8OAAC;4CAAE,WAAU;sDAAuC,IAAI,KAAK,YAAY,kBAAkB;;;;;;;;;;;;8CAE7F,8OAAC;oCAAI,WAAU;;sDACb,8OAAC;4CAAE,WAAU;sDAAiE;;;;;;sDAC9E,8OAAC;4CAAE,WAAU;sDAAuC;;;;;;;;;;;;;;;;;;;;;;;;8BAM1D,8OAAC;oBAAI,WAAU;8BACb,cAAA,8OAAC;wBAAI,WAAU;;0CAEb,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;wCAAM,WAAU;kDAA+C;;;;;;kDAChE,8OAAC;wCAAI,WAAU;;0DACb,8OAAC,sMAAA,CAAA,SAAM;gDAAC,WAAU;;;;;;0DAClB,8OAAC;gDACC,MAAK;gDACL,aAAY;gDACZ,OAAO;gDACP,UAAU,CAAC,IAAM,cAAc,EAAE,MAAM,CAAC,KAAK;gDAC7C,WAAU;;;;;;;;;;;;;;;;;;0CAMhB,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;wCAAG,WAAU;kDAAyC;;;;;;kDACvD,8OAAC;wCAAI,WAAU;;0DACb,8OAAC;gDAAI,WAAU;;kEACb,8OAAC;wDAAM,WAAU;kEAAwB;;;;;;kEACzC,8OAAC;wDACC,IAAG;wDACH,MAAK;wDACL,KAAI;wDACJ,KAAK;wDACL,cAAc;wDACd,WAAU;;;;;;kEAEZ,8OAAC;wDAAK,WAAU;kEAAwB;;;;;;;;;;;;0DAE1C,8OAAC;gDACC,SAAS;oDACP,MAAM,QAAQ,SAAS,cAAc,CAAC;oDACtC,MAAM,QAAQ,SAAS,MAAM,KAAK,KAAK;oDACvC,IAAI,QAAQ,KAAK,SAAS,oBAAoB;wDAC5C,mBAAmB;oDACrB;gDACF;gDACA,WAAU;0DACX;;;;;;0DAGD,8OAAC;gDACC,SAAS;gDACT,WAAU;0DACX;;;;;;;;;;;;;;;;;;0CAOL,8OAAC;;kDACC,8OAAC;wCAAG,WAAU;kDAAyC;;;;;;kDACvD,8OAAC;wCAAI,WAAU;;0DACb,8OAAC;;kEACC,8OAAC;wDAAM,WAAU;kEAA+C;;;;;;kEAChE,8OAAC;wDACC,OAAO;wDACP,UAAU,CAAC,IAAM,kBAAkB,EAAE,MAAM,CAAC,KAAK;wDACjD,WAAU;;0EAEV,8OAAC;gEAAO,OAAM;0EAAG;;;;;;4DAChB,kBAAkB,GAAG,CAAC,CAAA,uBACrB,8OAAC;oEAAoB,OAAO;8EACzB,qHAAA,CAAA,qBAAkB,CAAC,OAA0C;mEADnD;;;;;;;;;;;;;;;;;0DAMnB,8OAAC;;kEACC,8OAAC;wDAAM,WAAU;kEAA+C;;;;;;kEAChE,8OAAC;wDACC,OAAO;wDACP,UAAU,CAAC,IAAM,gBAAgB,EAAE,MAAM,CAAC,KAAK;wDAC/C,WAAU;;0EAEV,8OAAC;gEAAO,OAAM;0EAAG;;;;;;4DAChB,aAAa,GAAG,CAAC,CAAA,qBAChB,8OAAC;oEAAkB,OAAO;8EAAO;mEAApB;;;;;;;;;;;;;;;;;0DAInB,8OAAC;;kEACC,8OAAC;wDAAM,WAAU;kEAA+C;;;;;;kEAChE,8OAAC;wDACC,OAAO;wDACP,UAAU,CAAC,IAAM,kBAAkB,EAAE,MAAM,CAAC,KAAK;wDACjD,WAAU;;0EAEV,8OAAC;gEAAO,OAAM;0EAAG;;;;;;4DAChB,cAAc,GAAG,CAAC,CAAA,uBACjB,8OAAC;oEAAoB,OAAO;8EAAS;mEAAxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gBAU1B,cAAc,MAAM,GAAG,mBACtB,8OAAC;oBAAI,WAAU;8BACb,cAAA,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;wCAAI,WAAU;kDACb,cAAA,8OAAC,2NAAA,CAAA,cAAW;4CAAC,WAAU;;;;;;;;;;;kDAEzB,8OAAC;;0DACC,8OAAC;gDAAE,WAAU;;oDACV,cAAc,MAAM;oDAAC;;;;;;;0DAExB,8OAAC;gDAAE,WAAU;0DAAwB;;;;;;;;;;;;;;;;;;0CAKzC,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;wCACC,SAAS,IAAM,OAAO,IAAI;wCAC1B,WAAU;kDACX;;;;;;kDAGD,8OAAC;wCACC,SAAS;wCACT,UAAU,YAAY,cAAc,MAAM,KAAK;wCAC/C,WAAU;kDAET,yBACC;;8DACE,8OAAC;oDAAI,WAAU;;;;;;gDAA0F;;yEAI3G;;gDAAE;8DAEA,8OAAC,kNAAA,CAAA,aAAU;oDAAC,WAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BAUpC,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAI,WAAU;sCACb,cAAA,8OAAC;gCAAM,WAAU;;kDACf,8OAAC;wCAAM,WAAU;kDACf,cAAA,8OAAC;;8DACC,8OAAC;oDAAG,WAAU;8DACZ,cAAA,8OAAC;wDACC,MAAK;wDACL,SAAS,cAAc,MAAM,KAAK,cAAc,MAAM,IAAI,cAAc,MAAM,GAAG;wDACjF,UAAU;wDACV,WAAU;;;;;;;;;;;8DAGd,8OAAC;oDAAG,WAAU;8DAAiF;;;;;;8DAG/F,8OAAC;oDAAG,WAAU;8DAAiF;;;;;;8DAG/F,8OAAC;oDAAG,WAAU;8DAAiF;;;;;;8DAG/F,8OAAC;oDAAG,WAAU;8DAAiF;;;;;;8DAG/F,8OAAC;oDAAG,WAAU;8DAAiF;;;;;;;;;;;;;;;;;kDAKnG,8OAAC;wCAAM,WAAU;kDACd,CAAC,kBAAkB,EAAE,EAAE,GAAG,CAAC,CAAC,qBAC3B,8OAAC;gDAEC,WAAW,CAAC,kDAAkD,EAC5D,cAAc,QAAQ,CAAC,KAAK,EAAE,IAAI,eAAe,IACjD;gDACF,SAAS,IAAM,iBAAiB,KAAK,EAAE;;kEAEvC,8OAAC;wDAAG,WAAU;kEACZ,cAAA,8OAAC;4DACC,MAAK;4DACL,SAAS,cAAc,QAAQ,CAAC,KAAK,EAAE;4DACvC,UAAU,IAAM,iBAAiB,KAAK,EAAE;4DACxC,WAAU;;;;;;;;;;;kEAGd,8OAAC;wDAAG,WAAU;kEACZ,cAAA,8OAAC;;8EACC,8OAAC;oEAAI,WAAU;;wEACZ,KAAK,UAAU;wEAAC;wEAAE,KAAK,SAAS;;;;;;;8EAEnC,8OAAC;oEAAI,WAAU;8EAAyB,KAAK,KAAK;;;;;;;;;;;;;;;;;kEAGtD,8OAAC;wDAAG,WAAU;kEACZ,cAAA,8OAAC;4DAAK,WAAW,CAAC,wEAAwE,EAAE,eAAe,KAAK,MAAM,GAAG;sEACtH,qHAAA,CAAA,qBAAkB,CAAC,KAAK,MAAM,CAAoC;;;;;;;;;;;kEAGvE,8OAAC;wDAAG,WAAU;kEACX,KAAK,IAAI,IAAI;;;;;;kEAEhB,8OAAC;wDAAG,WAAU;kEACX,KAAK,KAAK,IAAI;;;;;;kEAEjB,8OAAC;wDAAG,WAAU;kEACX,IAAI,KAAK,KAAK,UAAU,EAAE,kBAAkB;;;;;;;+CAlC1C,KAAK,EAAE;;;;;;;;;;;;;;;;;;;;;wBA0CrB,cAAc,MAAM,KAAK,mBACxB,8OAAC;4BAAI,WAAU;;8CACb,8OAAC,oMAAA,CAAA,QAAK;oCAAC,WAAU;;;;;;8CACjB,8OAAC;oCAAG,WAAU;8CAAyC;;;;;;8CACvD,8OAAC;oCAAE,WAAU;8CAAgB;;;;;;;;;;;;;;;;;;gBAQlC,aAAa,mBACZ,8OAAC;oBAAI,WAAU;8BACb,cAAA,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;wCAAK,WAAU;;4CAAwB;4CAC7B;4CAAW;4CAAE;4CAAS;4CAAK;4CAAmB;;;;;;;kDAEzD,8OAAC;wCACC,OAAO;wCACP,UAAU,CAAC,IAAM,yBAAyB,OAAO,EAAE,MAAM,CAAC,KAAK;wCAC/D,WAAU;;0DAEV,8OAAC;gDAAO,OAAO;0DAAI;;;;;;0DACnB,8OAAC;gDAAO,OAAO;0DAAI;;;;;;0DACnB,8OAAC;gDAAO,OAAO;0DAAI;;;;;;0DACnB,8OAAC;gDAAO,OAAO;0DAAK;;;;;;;;;;;;;;;;;;0CAIxB,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;wCACC,SAAS,IAAM,iBAAiB,cAAc;wCAC9C,UAAU,gBAAgB;wCAC1B,WAAU;kDACX;;;;;;kDAID,8OAAC;wCAAI,WAAU;kDACZ,MAAM,IAAI,CAAC;4CAAE,QAAQ,KAAK,GAAG,CAAC,GAAG;wCAAY,GAAG,CAAC,GAAG;4CACnD,MAAM,UAAU,eAAe,IAAI,IAAI,IAAI,cAAc,IAAI;4CAC7D,IAAI,UAAU,YAAY,OAAO;4CACjC,qBACE,8OAAC;gDAEC,SAAS,IAAM,iBAAiB;gDAChC,WAAW,CAAC,0BAA0B,EACpC,YAAY,cACR,2BACA,2CACJ;0DAED;+CARI;;;;;wCAWX;;;;;;kDAGF,8OAAC;wCACC,SAAS,IAAM,iBAAiB,cAAc;wCAC9C,UAAU,gBAAgB;wCAC1B,WAAU;kDACX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYjB","debugId":null}}]
}