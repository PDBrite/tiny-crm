{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file:///Users/jdog/projects/lead-manager/src/components/layout/Sidebar.tsx"],"sourcesContent":["'use client'\n\nimport Link from 'next/link'\nimport { usePathname } from 'next/navigation'\nimport { useCompany } from '@/contexts/CompanyContext'\nimport { \n  LayoutDashboard, \n  Users, \n  Target, \n  Upload, \n  Settings,\n  Building2,\n  Calendar,\n  School,\n  MessageSquare\n} from 'lucide-react'\n\nconst baseNavigation = [\n  { name: 'Dashboard', href: '/', icon: LayoutDashboard },\n  { name: 'Outreach', href: '/outreach', icon: Calendar },\n  { name: 'Campaigns', href: '/campaigns', icon: Target },\n  { name: 'Import', href: '/import', icon: Upload },\n  { name: 'Settings', href: '/settings', icon: Settings },\n]\n\nconst craftyCodeNavigation = [\n  { name: 'Dashboard', href: '/', icon: LayoutDashboard },\n  { name: 'Leads', href: '/leads', icon: Users },\n  { name: 'Outreach', href: '/outreach', icon: MessageSquare },\n  { name: 'Campaigns', href: '/campaigns', icon: Target },\n  { name: 'Import', href: '/import', icon: Upload },\n  { name: 'Settings', href: '/settings', icon: Settings },\n]\n\nconst avalernNav = [\n  { name: 'Dashboard', href: '/', icon: LayoutDashboard },\n  { name: 'Districts', href: '/districts', icon: School },\n  { name: 'District Contacts', href: '/leads', icon: Users },\n  { name: 'Outreach', href: '/outreach', icon: MessageSquare },\n  { name: 'Campaigns', href: '/campaigns', icon: Target },\n  { name: 'Import', href: '/import', icon: Upload },\n  { name: 'Settings', href: '/settings', icon: Settings }\n]\n\nconst companies = [\n  { name: 'CraftyCode', color: 'bg-blue-500' },\n  { name: 'Avalern', color: 'bg-purple-500' }\n]\n\nexport default function Sidebar() {\n  const pathname = usePathname()\n  const { selectedCompany, setSelectedCompany } = useCompany()\n\n  return (\n    <div className=\"flex h-screen w-64 flex-col bg-white shadow-lg\">\n      {/* Logo */}\n      <div className=\"flex h-16 items-center px-6 border-b border-gray-200\">\n        <Building2 className=\"h-8 w-8 text-blue-600\" />\n        <span className=\"ml-3 text-xl font-bold text-gray-900\">Lead Manager</span>\n      </div>\n\n      {/* Company Selector - Moved to top */}\n      <div className=\"border-b border-gray-200 p-4\">\n        <div className=\"text-xs font-medium text-gray-500 uppercase tracking-wider mb-3\">\n          Active Companies\n        </div>\n        <div className=\"space-y-2\">\n          {companies.map((company) => (\n            <button\n              key={company.name}\n              onClick={() => setSelectedCompany(company.name)}\n              className={`\n                flex items-center w-full px-3 py-2 text-sm font-medium rounded-lg transition-colors\n                ${selectedCompany === company.name\n                  ? 'bg-gray-100 text-gray-900 border-l-4 border-blue-500'\n                  : 'text-gray-700 hover:bg-gray-50 hover:text-gray-900'\n                }\n              `}\n            >\n              <div className={`w-3 h-3 ${company.color} rounded-full mr-3`}></div>\n              <span>{company.name}</span>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"flex-1 px-4 py-6 space-y-2\">\n        {selectedCompany === 'CraftyCode' && craftyCodeNavigation.map((item) => {\n          const isActive = pathname === item.href\n          return (\n            <Link\n              key={item.name}\n              href={item.href}\n              className={`\n                flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors\n                ${isActive \n                  ? 'bg-blue-50 text-blue-700 border-r-2 border-blue-700' \n                  : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'\n                }\n              `}\n            >\n              <item.icon className={`mr-3 h-5 w-5 ${isActive ? 'text-blue-700' : 'text-gray-400'}`} />\n              {item.name}\n            </Link>\n          )\n        })}\n        {selectedCompany === 'Avalern' && avalernNav.map((item) => {\n          const isActive = pathname === item.href\n          return (\n            <Link\n              key={item.name}\n              href={item.href}\n              className={`\n                flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors\n                ${isActive \n                  ? 'bg-blue-50 text-blue-700 border-r-2 border-blue-700' \n                  : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'\n                }\n              `}\n            >\n              <item.icon className={`mr-3 h-5 w-5 ${isActive ? 'text-blue-700' : 'text-gray-400'}`} />\n              {item.name}\n            </Link>\n          )\n        })}\n      </nav>\n    </div>\n  )\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 310, "column": 0}, "map": {"version":3,"sources":["file:///Users/jdog/projects/lead-manager/src/components/layout/DashboardLayout.tsx"],"sourcesContent":["'use client'\n\nimport Sidebar from './Sidebar'\n\ninterface DashboardLayoutProps {\n  children: React.ReactNode\n}\n\nexport default function DashboardLayout({ children }: DashboardLayoutProps) {\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-y-auto\">\n        <div className=\"p-8\">\n          {children}\n        </div>\n      </main>\n    </div>\n  )\n} "],"names":[],"mappings":";;;;AAEA;AAFA;;;AAQe,SAAS,gBAAgB,EAAE,QAAQ,EAAwB;IACxE,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC,uIAAA,CAAA,UAAO;;;;;0BACR,8OAAC;gBAAK,WAAU;0BACd,cAAA,8OAAC;oBAAI,WAAU;8BACZ;;;;;;;;;;;;;;;;;AAKX","debugId":null}},
    {"offset": {"line": 355, "column": 0}, "map": {"version":3,"sources":["file:///Users/jdog/projects/lead-manager/src/components/CalendarPopup.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { Calendar, ChevronLeft, ChevronRight, X } from 'lucide-react'\n\ninterface CalendarPopupProps {\n  isOpen: boolean\n  onClose: () => void\n  selectedDate: string\n  onDateSelect: (date: string) => void\n  touchpointCounts: Record<string, number>\n  onMonthChange?: (startDate: string, endDate: string) => void\n}\n\nexport default function CalendarPopup({ \n  isOpen, \n  onClose, \n  selectedDate, \n  onDateSelect, \n  touchpointCounts,\n  onMonthChange \n}: CalendarPopupProps) {\n  const [currentMonth, setCurrentMonth] = useState(new Date(selectedDate))\n  const popupRef = useRef<HTMLDivElement>(null)\n\n  // Close popup when clicking outside\n  useEffect(() => {\n    function handleClickOutside(event: MouseEvent) {\n      if (popupRef.current && !popupRef.current.contains(event.target as Node)) {\n        onClose()\n      }\n    }\n\n    if (isOpen) {\n      document.addEventListener('mousedown', handleClickOutside)\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside)\n    }\n  }, [isOpen, onClose])\n\n  // Notify parent when month changes (only when user navigates)\n  const handleMonthChange = (direction: 'prev' | 'next') => {\n    const newMonth = new Date(currentMonth)\n    if (direction === 'prev') {\n      newMonth.setMonth(newMonth.getMonth() - 1)\n    } else {\n      newMonth.setMonth(newMonth.getMonth() + 1)\n    }\n    setCurrentMonth(newMonth)\n    \n    // Fetch touchpoint counts for the new month\n    if (onMonthChange) {\n      const startOfMonth = new Date(newMonth.getFullYear(), newMonth.getMonth(), 1)\n      const endOfMonth = new Date(newMonth.getFullYear(), newMonth.getMonth() + 1, 0)\n      onMonthChange(\n        startOfMonth.toISOString().split('T')[0],\n        endOfMonth.toISOString().split('T')[0]\n      )\n    }\n  }\n\n  if (!isOpen) return null\n\n  const getDaysInMonth = (date: Date) => {\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate()\n  }\n\n  const getFirstDayOfMonth = (date: Date) => {\n    return new Date(date.getFullYear(), date.getMonth(), 1).getDay()\n  }\n\n  const formatDateForAPI = (date: Date) => {\n    return date.toISOString().split('T')[0]\n  }\n\n  const isToday = (date: Date) => {\n    const today = new Date()\n    return date.toDateString() === today.toDateString()\n  }\n\n  const isSelectedDate = (date: Date) => {\n    return formatDateForAPI(date) === selectedDate\n  }\n\n\n\n  const renderCalendar = () => {\n    const daysInMonth = getDaysInMonth(currentMonth)\n    const firstDay = getFirstDayOfMonth(currentMonth)\n    const days = []\n\n    // Add empty cells for days before the first day of the month\n    for (let i = 0; i < firstDay; i++) {\n      days.push(<div key={`empty-${i}`} className=\"h-12 w-full\"></div>)\n    }\n\n    // Add days of the month\n    for (let day = 1; day <= daysInMonth; day++) {\n      const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), day)\n      const dateStr = formatDateForAPI(date)\n      const touchpointCount = touchpointCounts[dateStr] || 0\n      const isSelected = isSelectedDate(date)\n      const isTodayDate = isToday(date)\n\n      days.push(\n        <button\n          key={day}\n          onClick={() => {\n            onDateSelect(dateStr)\n            onClose()\n          }}\n          className={`h-12 w-full flex flex-col items-center justify-center text-xs rounded-md transition-all duration-200 border ${\n            isSelected\n              ? 'bg-blue-600 text-white border-blue-600 shadow-md'\n              : isTodayDate\n              ? 'bg-blue-50 text-blue-800 border-blue-200 hover:bg-blue-100'\n              : 'bg-white text-gray-700 border-gray-200 hover:bg-gray-50 hover:border-gray-300'\n          }`}\n        >\n          <span className=\"font-medium text-sm\">{day}</span>\n          {touchpointCount > 0 && (\n            <div className={`text-[10px] px-1 py-0.5 rounded-full font-medium leading-none ${\n              isSelected \n                ? 'bg-white text-blue-600' \n                : touchpointCount > 5\n                ? 'bg-red-100 text-red-700'\n                : touchpointCount > 2\n                ? 'bg-orange-100 text-orange-700'\n                : 'bg-green-100 text-green-700'\n            }`}>\n              {touchpointCount}\n            </div>\n          )}\n        </button>\n      )\n    }\n\n    return days\n  }\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-start justify-start\">\n      <div \n        ref={popupRef}\n        className=\"absolute top-20 left-4 bg-white rounded-lg shadow-xl border border-gray-200 p-4 w-80\"\n        style={{ zIndex: 1000 }}\n      >\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900 flex items-center\">\n            <Calendar className=\"h-4 w-4 mr-2 text-blue-600\" />\n            Select Date\n          </h3>\n          <button\n            onClick={onClose}\n            className=\"p-1 hover:bg-gray-100 rounded-md transition-colors\"\n          >\n            <X className=\"h-4 w-4 text-gray-500\" />\n          </button>\n        </div>\n\n        {/* Calendar Header */}\n        <div className=\"flex items-center justify-between mb-4\">\n          <button\n            onClick={() => handleMonthChange('prev')}\n            className=\"p-1 hover:bg-gray-100 rounded-md transition-colors\"\n          >\n            <ChevronLeft className=\"h-4 w-4 text-gray-600\" />\n          </button>\n          <h4 className=\"text-base font-medium text-gray-900\">\n            {currentMonth.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}\n          </h4>\n          <button\n            onClick={() => handleMonthChange('next')}\n            className=\"p-1 hover:bg-gray-100 rounded-md transition-colors\"\n          >\n            <ChevronRight className=\"h-4 w-4 text-gray-600\" />\n          </button>\n        </div>\n        \n        {/* Calendar Grid */}\n        <div className=\"grid grid-cols-7 gap-1 mb-2\">\n          {['S', 'M', 'T', 'W', 'T', 'F', 'S'].map((day, index) => (\n            <div key={index} className=\"h-6 flex items-center justify-center text-xs font-medium text-gray-500\">\n              {day}\n            </div>\n          ))}\n        </div>\n        <div className=\"grid grid-cols-7 gap-1\">\n          {renderCalendar()}\n        </div>\n\n        {/* Legend */}\n        <div className=\"mt-4 pt-3 border-t border-gray-200\">\n          <div className=\"flex items-center justify-between text-xs text-gray-600\">\n            <div className=\"flex items-center\">\n              <div className=\"w-3 h-3 bg-blue-600 rounded mr-1\"></div>\n              <span>Selected</span>\n            </div>\n            <div className=\"flex items-center\">\n              <div className=\"w-3 h-3 bg-blue-50 border border-blue-200 rounded mr-1\"></div>\n              <span>Today</span>\n            </div>\n            <div className=\"flex items-center\">\n              <div className=\"w-3 h-3 bg-green-100 rounded mr-1\"></div>\n              <span>1-2</span>\n            </div>\n            <div className=\"flex items-center\">\n              <div className=\"w-3 h-3 bg-red-100 rounded mr-1\"></div>\n              <span>5+</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n} "],"names":[],"mappings":";;;;AAAA;AACA;AAAA;AAAA;AAAA;;;;AAWe,SAAS,cAAc,EACpC,MAAM,EACN,OAAO,EACP,YAAY,EACZ,YAAY,EACZ,gBAAgB,EAChB,aAAa,EACM;IACnB,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,IAAI,KAAK;IAC1D,MAAM,WAAW,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAkB;IAExC,oCAAoC;IACpC,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,SAAS,mBAAmB,KAAiB;YAC3C,IAAI,SAAS,OAAO,IAAI,CAAC,SAAS,OAAO,CAAC,QAAQ,CAAC,MAAM,MAAM,GAAW;gBACxE;YACF;QACF;QAEA,IAAI,QAAQ;YACV,SAAS,gBAAgB,CAAC,aAAa;QACzC;QAEA,OAAO;YACL,SAAS,mBAAmB,CAAC,aAAa;QAC5C;IACF,GAAG;QAAC;QAAQ;KAAQ;IAEpB,8DAA8D;IAC9D,MAAM,oBAAoB,CAAC;QACzB,MAAM,WAAW,IAAI,KAAK;QAC1B,IAAI,cAAc,QAAQ;YACxB,SAAS,QAAQ,CAAC,SAAS,QAAQ,KAAK;QAC1C,OAAO;YACL,SAAS,QAAQ,CAAC,SAAS,QAAQ,KAAK;QAC1C;QACA,gBAAgB;QAEhB,4CAA4C;QAC5C,IAAI,eAAe;YACjB,MAAM,eAAe,IAAI,KAAK,SAAS,WAAW,IAAI,SAAS,QAAQ,IAAI;YAC3E,MAAM,aAAa,IAAI,KAAK,SAAS,WAAW,IAAI,SAAS,QAAQ,KAAK,GAAG;YAC7E,cACE,aAAa,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,EACxC,WAAW,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;QAE1C;IACF;IAEA,IAAI,CAAC,QAAQ,OAAO;IAEpB,MAAM,iBAAiB,CAAC;QACtB,OAAO,IAAI,KAAK,KAAK,WAAW,IAAI,KAAK,QAAQ,KAAK,GAAG,GAAG,OAAO;IACrE;IAEA,MAAM,qBAAqB,CAAC;QAC1B,OAAO,IAAI,KAAK,KAAK,WAAW,IAAI,KAAK,QAAQ,IAAI,GAAG,MAAM;IAChE;IAEA,MAAM,mBAAmB,CAAC;QACxB,OAAO,KAAK,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;IACzC;IAEA,MAAM,UAAU,CAAC;QACf,MAAM,QAAQ,IAAI;QAClB,OAAO,KAAK,YAAY,OAAO,MAAM,YAAY;IACnD;IAEA,MAAM,iBAAiB,CAAC;QACtB,OAAO,iBAAiB,UAAU;IACpC;IAIA,MAAM,iBAAiB;QACrB,MAAM,cAAc,eAAe;QACnC,MAAM,WAAW,mBAAmB;QACpC,MAAM,OAAO,EAAE;QAEf,6DAA6D;QAC7D,IAAK,IAAI,IAAI,GAAG,IAAI,UAAU,IAAK;YACjC,KAAK,IAAI,eAAC,8OAAC;gBAAuB,WAAU;eAAxB,CAAC,MAAM,EAAE,GAAG;;;;;QAClC;QAEA,wBAAwB;QACxB,IAAK,IAAI,MAAM,GAAG,OAAO,aAAa,MAAO;YAC3C,MAAM,OAAO,IAAI,KAAK,aAAa,WAAW,IAAI,aAAa,QAAQ,IAAI;YAC3E,MAAM,UAAU,iBAAiB;YACjC,MAAM,kBAAkB,gBAAgB,CAAC,QAAQ,IAAI;YACrD,MAAM,aAAa,eAAe;YAClC,MAAM,cAAc,QAAQ;YAE5B,KAAK,IAAI,eACP,8OAAC;gBAEC,SAAS;oBACP,aAAa;oBACb;gBACF;gBACA,WAAW,CAAC,4GAA4G,EACtH,aACI,qDACA,cACA,+DACA,iFACJ;;kCAEF,8OAAC;wBAAK,WAAU;kCAAuB;;;;;;oBACtC,kBAAkB,mBACjB,8OAAC;wBAAI,WAAW,CAAC,8DAA8D,EAC7E,aACI,2BACA,kBAAkB,IAClB,4BACA,kBAAkB,IAClB,kCACA,+BACJ;kCACC;;;;;;;eAxBA;;;;;QA6BX;QAEA,OAAO;IACT;IAEA,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YACC,KAAK;YACL,WAAU;YACV,OAAO;gBAAE,QAAQ;YAAK;;8BAGtB,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAG,WAAU;;8CACZ,8OAAC,0MAAA,CAAA,WAAQ;oCAAC,WAAU;;;;;;gCAA+B;;;;;;;sCAGrD,8OAAC;4BACC,SAAS;4BACT,WAAU;sCAEV,cAAA,8OAAC,4LAAA,CAAA,IAAC;gCAAC,WAAU;;;;;;;;;;;;;;;;;8BAKjB,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BACC,SAAS,IAAM,kBAAkB;4BACjC,WAAU;sCAEV,cAAA,8OAAC,oNAAA,CAAA,cAAW;gCAAC,WAAU;;;;;;;;;;;sCAEzB,8OAAC;4BAAG,WAAU;sCACX,aAAa,kBAAkB,CAAC,SAAS;gCAAE,OAAO;gCAAQ,MAAM;4BAAU;;;;;;sCAE7E,8OAAC;4BACC,SAAS,IAAM,kBAAkB;4BACjC,WAAU;sCAEV,cAAA,8OAAC,sNAAA,CAAA,eAAY;gCAAC,WAAU;;;;;;;;;;;;;;;;;8BAK5B,8OAAC;oBAAI,WAAU;8BACZ;wBAAC;wBAAK;wBAAK;wBAAK;wBAAK;wBAAK;wBAAK;qBAAI,CAAC,GAAG,CAAC,CAAC,KAAK,sBAC7C,8OAAC;4BAAgB,WAAU;sCACxB;2BADO;;;;;;;;;;8BAKd,8OAAC;oBAAI,WAAU;8BACZ;;;;;;8BAIH,8OAAC;oBAAI,WAAU;8BACb,cAAA,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;wCAAI,WAAU;;;;;;kDACf,8OAAC;kDAAK;;;;;;;;;;;;0CAER,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;wCAAI,WAAU;;;;;;kDACf,8OAAC;kDAAK;;;;;;;;;;;;0CAER,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;wCAAI,WAAU;;;;;;kDACf,8OAAC;kDAAK;;;;;;;;;;;;0CAER,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;wCAAI,WAAU;;;;;;kDACf,8OAAC;kDAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOpB","debugId":null}},
    {"offset": {"line": 730, "column": 0}, "map": {"version":3,"sources":["file:///Users/jdog/projects/lead-manager/src/types/leads.ts"],"sourcesContent":["export interface Campaign {\n  id: string\n  name: string\n  company: string\n  created_at: string\n  outreach_sequence_id?: string\n  outreach_sequence?: OutreachSequence\n}\n\nexport interface Touchpoint {\n  id: string\n  lead_id: string\n  type: 'email' | 'call' | 'linkedin_message'\n  subject?: string\n  content?: string\n  scheduled_at?: string\n  completed_at?: string\n  outcome?: string\n  outcome_enum?: 'replied' | 'no_answer' | 'voicemail' | 'opted_out' | 'bounced' | 'booked' | 'ignored'\n  created_at: string\n}\n\n// Keep ContactAttempt as an alias for backward compatibility during transition\nexport type ContactAttempt = Touchpoint\n\nexport interface OutreachSequence {\n  id: string\n  name: string\n  company: string\n  description?: string\n  created_at: string\n  updated_at: string\n  steps?: OutreachStep[]\n}\n\nexport interface OutreachStep {\n  id: string\n  sequence_id: string\n  step_order: number\n  type: 'email' | 'call' | 'linkedin_message'\n  name?: string\n  content_link?: string\n  day_offset: number\n  created_at: string\n  updated_at: string\n}\n\nexport interface Lead {\n  id: string\n  first_name: string\n  last_name: string\n  email: string\n  phone?: string\n  city?: string\n  state?: string\n  company?: string\n  linkedin_url?: string\n  website_url?: string\n  online_profile?: string\n  source?: string\n  status: string\n  notes?: string\n  campaign_id?: string\n  campaign?: Campaign\n  created_at: string\n  last_contacted_at?: string\n  touchpoints?: Touchpoint[]\n  touchpoints_count?: number\n  scheduled_touchpoints_count?: number\n  // Legacy fields for backward compatibility\n  contact_attempts?: ContactAttempt[]\n  contact_attempts_count?: number\n}\n\nexport interface SyncResults {\n  syncedCount: number\n  totalEmails: number\n  errors?: string[]\n}\n\n// Status mapping for display\nexport const STATUS_DISPLAY_MAP: Record<string, string> = {\n  'not_contacted': 'Not Contacted',\n  'actively_contacting': 'Actively Contacting',\n  'engaged': 'Engaged',\n  'won': 'Won',\n  'not_interested': 'Not Interested'\n}\n\n// Status descriptions for tooltips/help text\nexport const STATUS_DESCRIPTIONS: Record<string, string> = {\n  'not_contacted': 'Lead is in your database, but no outreach yet.',\n  'actively_contacting': \"You're in the process of emailing/calling/following up.\",\n  'engaged': \"They've responded or shown interest (replied, booked a call, etc.).\",\n  'won': 'They became a customer or agreed to a pilot/demo.',\n  'not_interested': 'Said no, ghosted after multiple follow-ups, or clearly not a fit.'\n} "],"names":[],"mappings":";;;;AAiFO,MAAM,qBAA6C;IACxD,iBAAiB;IACjB,uBAAuB;IACvB,WAAW;IACX,OAAO;IACP,kBAAkB;AACpB;AAGO,MAAM,sBAA8C;IACzD,iBAAiB;IACjB,uBAAuB;IACvB,WAAW;IACX,OAAO;IACP,kBAAkB;AACpB","debugId":null}},
    {"offset": {"line": 754, "column": 0}, "map": {"version":3,"sources":["file:///Users/jdog/projects/lead-manager/src/components/leads/LeadDetailPanel.tsx"],"sourcesContent":["'use client'\n\nimport { useState } from 'react'\nimport { X, Plus } from 'lucide-react'\nimport { Lead, Campaign, Touchpoint, STATUS_DISPLAY_MAP } from '../../types/leads'\n\ninterface LeadDetailPanelProps {\n  selectedLead: Lead\n  editingLead: Lead\n  onEditingLeadChange: (lead: Lead) => void\n  onClose: () => void\n  onSave: () => void\n  saving: boolean\n  campaigns: Campaign[]\n  availableStatuses: string[]\n  touchpoints: Touchpoint[]\n  showNewTouchpointForm: boolean\n  onToggleTouchpointForm: () => void\n  newTouchpoint: Partial<Touchpoint>\n  onNewTouchpointChange: (touchpoint: Partial<Touchpoint>) => void\n  onAddTouchpoint: () => void\n}\n\nexport default function LeadDetailPanel({\n  selectedLead,\n  editingLead,\n  onEditingLeadChange,\n  onClose,\n  onSave,\n  saving,\n  campaigns,\n  availableStatuses,\n  touchpoints,\n  showNewTouchpointForm,\n  onToggleTouchpointForm,\n  newTouchpoint,\n  onNewTouchpointChange,\n  onAddTouchpoint\n}: LeadDetailPanelProps) {\n  const [touchpointTab, setTouchpointTab] = useState<'past' | 'scheduled'>('past')\n  \n  // Filter touchpoints based on tab selection\n  const pastTouchpoints = touchpoints.filter(tp => tp.completed_at)\n  const scheduledTouchpoints = touchpoints.filter(tp => tp.scheduled_at && !tp.completed_at)\n  const currentTouchpoints = touchpointTab === 'past' ? pastTouchpoints : scheduledTouchpoints\n\n  return (\n    <div className=\"bg-white border border-gray-200 rounded-lg shadow-sm p-6 h-fit\">\n      <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-lg font-semibold text-gray-900\">\n          {editingLead.first_name} {editingLead.last_name}\n          </h2>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-gray-600\"\n          >\n          <X className=\"h-5 w-5\" />\n          </button>\n      </div>\n\n      <div className=\"space-y-6\">\n        {/* Contact Information */}\n        <div>\n          <h3 className=\"text-md font-medium text-gray-900 mb-3\">Contact Information</h3>\n          <div className=\"grid grid-cols-1 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">First Name</label>\n              <input\n                type=\"text\"\n                value={editingLead.first_name}\n                onChange={(e) => onEditingLeadChange({...editingLead, first_name: e.target.value})}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Last Name</label>\n              <input\n                type=\"text\"\n                value={editingLead.last_name}\n                onChange={(e) => onEditingLeadChange({...editingLead, last_name: e.target.value})}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Email</label>\n              <input\n                type=\"email\"\n                value={editingLead.email}\n                onChange={(e) => onEditingLeadChange({...editingLead, email: e.target.value})}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Phone</label>\n              <input\n                type=\"tel\"\n                value={editingLead.phone || ''}\n                onChange={(e) => onEditingLeadChange({...editingLead, phone: e.target.value})}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Status & Campaign */}\n        <div>\n          <h3 className=\"text-md font-medium text-gray-900 mb-3\">Status & Campaign</h3>\n          <div className=\"grid grid-cols-1 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Status</label>\n              <select\n                value={editingLead.status}\n                onChange={(e) => onEditingLeadChange({...editingLead, status: e.target.value})}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              >\n                {availableStatuses.map(status => (\n                  <option key={status} value={status}>\n                    {STATUS_DISPLAY_MAP[status] || status}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Campaign</label>\n              <select\n                value={editingLead.campaign_id || ''}\n                onChange={(e) => onEditingLeadChange({...editingLead, campaign_id: e.target.value || undefined})}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              >\n                <option value=\"\">No Campaign</option>\n                {campaigns.map(campaign => (\n                  <option key={campaign.id} value={campaign.id}>\n                    {campaign.name}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </div>\n\n        {/* Location & Company */}\n        <div>\n          <h3 className=\"text-md font-medium text-gray-900 mb-3\">Location & Company</h3>\n          <div className=\"grid grid-cols-1 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">City</label>\n              <input\n                type=\"text\"\n                value={editingLead.city || ''}\n                onChange={(e) => onEditingLeadChange({...editingLead, city: e.target.value})}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">State</label>\n              <input\n                type=\"text\"\n                value={editingLead.state || ''}\n                onChange={(e) => onEditingLeadChange({...editingLead, state: e.target.value})}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Company</label>\n              <input\n                type=\"text\"\n                value={editingLead.company || ''}\n                onChange={(e) => onEditingLeadChange({...editingLead, company: e.target.value})}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Source */}\n        <div>\n          <h3 className=\"text-md font-medium text-gray-900 mb-3\">Source</h3>\n              <select\n                value={editingLead.source || ''}\n                onChange={(e) => onEditingLeadChange({...editingLead, source: e.target.value})}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              >\n            <option value=\"\">Select Source</option>\n                <option value=\"Zillow\">Zillow</option>\n                <option value=\"LinkedIn\">LinkedIn</option>\n                <option value=\"Realtor.com\">Realtor.com</option>\n                <option value=\"Redfin\">Redfin</option>\n                <option value=\"Trulia\">Trulia</option>\n                <option value=\"Other\">Other</option>\n              </select>\n        </div>\n\n        {/* URLs */}\n        <div>\n          <h3 className=\"text-md font-medium text-gray-900 mb-3\">URLs & Links</h3>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">LinkedIn URL</label>\n              <input\n                type=\"url\"\n                value={editingLead.linkedin_url || ''}\n                onChange={(e) => onEditingLeadChange({...editingLead, linkedin_url: e.target.value})}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Website URL</label>\n              <input\n                type=\"url\"\n                value={editingLead.website_url || ''}\n                onChange={(e) => onEditingLeadChange({...editingLead, website_url: e.target.value})}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Notes */}\n        <div>\n          <h3 className=\"text-md font-medium text-gray-900 mb-3\">Notes</h3>\n          <textarea\n            value={editingLead.notes || ''}\n            onChange={(e) => onEditingLeadChange({...editingLead, notes: e.target.value})}\n            rows={4}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            placeholder=\"Add notes about this lead...\"\n          />\n        </div>\n\n        {/* Touchpoints */}\n        <div>\n          <div className=\"flex items-center justify-between mb-3\">\n            <h3 className=\"text-md font-medium text-gray-900\">Touchpoints</h3>\n            <button\n              onClick={onToggleTouchpointForm}\n              className=\"flex items-center px-3 py-1 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700\"\n            >\n              <Plus className=\"h-4 w-4 mr-1\" />\n              Add Touchpoint\n            </button>\n          </div>\n\n          {/* Touchpoint Tabs */}\n          <div className=\"border-b border-gray-200 mb-4\">\n            <nav className=\"-mb-px flex space-x-8\">\n              <button\n                onClick={() => setTouchpointTab('past')}\n                className={`py-2 px-1 border-b-2 font-medium text-sm ${\n                  touchpointTab === 'past'\n                    ? 'border-blue-500 text-blue-600'\n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                }`}\n              >\n                Past ({pastTouchpoints.length})\n              </button>\n              <button\n                onClick={() => setTouchpointTab('scheduled')}\n                className={`py-2 px-1 border-b-2 font-medium text-sm ${\n                  touchpointTab === 'scheduled'\n                    ? 'border-blue-500 text-blue-600'\n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                }`}\n              >\n                Scheduled ({scheduledTouchpoints.length})\n              </button>\n            </nav>\n          </div>\n\n          {/* New Touchpoint Form */}\n          {showNewTouchpointForm && (\n            <div className=\"bg-gray-50 rounded-lg p-4 mb-4\">\n              <h4 className=\"text-sm font-medium text-gray-900 mb-3\">New Touchpoint</h4>\n              <div className=\"space-y-3\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Type</label>\n                  <select\n                    value={newTouchpoint.type || 'email'}\n                    onChange={(e) => onNewTouchpointChange({...newTouchpoint, type: e.target.value as Touchpoint['type']})}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  >\n                    <option value=\"email\">Email</option>\n                    <option value=\"call\">Phone Call</option>\n                    <option value=\"meeting\">Meeting</option>\n                    <option value=\"linkedin_message\">LinkedIn Message</option>\n                    <option value=\"note\">Note</option>\n                  </select>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Date</label>\n                  <input\n                    type=\"date\"\n                    value={newTouchpoint.completed_at ? newTouchpoint.completed_at.split('T')[0] : ''}\n                    onChange={(e) => onNewTouchpointChange({...newTouchpoint, completed_at: e.target.value ? e.target.value + 'T09:00:00' : ''})}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Subject</label>\n                  <input\n                    type=\"text\"\n                    value={newTouchpoint.subject || ''}\n                    onChange={(e) => onNewTouchpointChange({...newTouchpoint, subject: e.target.value})}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"Brief subject or title\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Notes</label>\n                  <textarea\n                    value={newTouchpoint.content || ''}\n                    onChange={(e) => onNewTouchpointChange({...newTouchpoint, content: e.target.value})}\n                    rows={3}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"Details about this touchpoint...\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Outcome</label>\n                  <input\n                    type=\"text\"\n                    value={newTouchpoint.outcome || ''}\n                    onChange={(e) => onNewTouchpointChange({...newTouchpoint, outcome: e.target.value})}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"Result or outcome\"\n                  />\n                </div>\n                <div className=\"flex justify-end space-x-2\">\n                  <button\n                    onClick={onToggleTouchpointForm}\n                    className=\"px-3 py-2 text-gray-600 border border-gray-300 rounded-md hover:bg-gray-50\"\n                  >\n                    Cancel\n                  </button>\n                  <button\n                    onClick={onAddTouchpoint}\n                    disabled={saving}\n                    className=\"px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50\"\n                  >\n                    {saving ? 'Adding...' : 'Add Touchpoint'}\n                  </button>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Touchpoints List */}\n          <div className=\"space-y-3 max-h-60 overflow-y-auto\">\n            {currentTouchpoints.length === 0 ? (\n              <p className=\"text-sm text-gray-500 text-center py-4\">\n                No {touchpointTab} touchpoints yet\n              </p>\n            ) : (\n              currentTouchpoints.map((touchpoint) => (\n                <div key={touchpoint.id} className=\"bg-gray-50 rounded-lg p-3\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${\n                        touchpoint.type === 'email' ? 'bg-blue-100 text-blue-800' :\n                        touchpoint.type === 'call' ? 'bg-green-100 text-green-800' :\n                        touchpoint.type === 'meeting' ? 'bg-purple-100 text-purple-800' :\n                        touchpoint.type === 'linkedin_message' ? 'bg-indigo-100 text-indigo-800' :\n                        'bg-gray-100 text-gray-800'\n                      }`}>\n                        {touchpoint.type.replace('_', ' ').toUpperCase()}\n                      </span>\n                      {touchpoint.subject && (\n                        <span className=\"text-sm font-medium text-gray-900\">{touchpoint.subject}</span>\n                      )}\n                      {touchpoint.outcome && touchpointTab === 'past' && (\n                        <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                          COMPLETED\n                        </span>\n                      )}\n                      {touchpointTab === 'scheduled' && (\n                        <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800\">\n                          SCHEDULED\n                        </span>\n                      )}\n                    </div>\n                    <span className=\"text-xs text-gray-500\">\n                      {touchpointTab === 'past' \n                        ? (touchpoint.completed_at ? new Date(touchpoint.completed_at).toLocaleDateString() : 'No date')\n                        : (touchpoint.scheduled_at ? new Date(touchpoint.scheduled_at).toLocaleDateString() : 'No date')\n                      }\n                    </span>\n                  </div>\n                  {touchpoint.content && (\n                    <p className=\"text-sm text-gray-700 mb-2\">{touchpoint.content}</p>\n                  )}\n                  {touchpoint.outcome && touchpointTab === 'past' && (\n                    <p className=\"text-sm text-gray-600\">\n                      <span className=\"font-medium\">Outcome:</span> {touchpoint.outcome}\n                    </p>\n                  )}\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n\n        {/* Lead Information Summary */}\n        <div>\n          <h3 className=\"text-md font-medium text-gray-900 mb-3\">Lead Information</h3>\n          <div className=\"bg-gray-50 rounded-lg p-4\">\n            <div className=\"grid grid-cols-1 gap-4 text-sm\">\n              <div>\n                <span className=\"font-medium text-gray-700\">Status:</span>\n                <span className=\"ml-2 inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">\n                  {STATUS_DISPLAY_MAP[selectedLead.status] || selectedLead.status}\n                </span>\n              </div>\n              <div>\n                <span className=\"font-medium text-gray-700\">Created:</span>\n                <span className=\"ml-2 text-gray-900\">{new Date(selectedLead.created_at).toLocaleDateString()}</span>\n              </div>\n              <div>\n                <span className=\"font-medium text-gray-700\">Last Contact:</span>\n                <span className=\"ml-2 text-gray-900\">\n                  {selectedLead.last_contacted_at ? new Date(selectedLead.last_contacted_at).toLocaleDateString() : 'Never'}\n                </span>\n              </div>\n              <div>\n                <span className=\"font-medium text-gray-700\">Total Touchpoints:</span>\n                <span className=\"ml-2 text-gray-900\">{touchpoints.length}</span>\n              </div>\n              <div>\n                <span className=\"font-medium text-gray-700\">Past Touchpoints:</span>\n                <span className=\"ml-2 text-gray-900\">{pastTouchpoints.length}</span>\n              </div>\n              <div>\n                <span className=\"font-medium text-gray-700\">Scheduled Touchpoints:</span>\n                <span className=\"ml-2 text-gray-900\">{scheduledTouchpoints.length}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n        {/* Save Button */}\n        <div className=\"flex justify-end space-x-3 pt-4 border-t border-gray-200\">\n        <button\n          onClick={onClose}\n            className=\"px-4 py-2 text-gray-600 border border-gray-200 rounded-lg hover:bg-gray-50\"\n        >\n            Cancel\n        </button>\n        <button\n          onClick={onSave}\n          disabled={saving}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n        >\n          {saving ? 'Saving...' : 'Save Changes'}\n        </button>\n        </div>\n      </div>\n    </div>\n  )\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2037, "column": 0}, "map": {"version":3,"sources":["file:///Users/jdog/projects/lead-manager/src/app/outreach/page.tsx"],"sourcesContent":["'use client'\n\nimport { useState, useEffect } from 'react'\nimport DashboardLayout from '../../components/layout/DashboardLayout'\nimport { useCompany } from '../../contexts/CompanyContext'\nimport { Calendar, Phone, Mail, MessageSquare, Plus, Target, Edit2, Trash2, List, ArrowRight, RefreshCw, ChevronLeft, ChevronRight } from 'lucide-react'\nimport CalendarPopup from '../../components/CalendarPopup'\nimport LeadDetailPanel from '../../components/leads/LeadDetailPanel'\nimport { Lead, STATUS_DISPLAY_MAP } from '../../types/leads'\n\ninterface TouchpointSummary {\n  today?: {\n    total: number\n    by_type: Record<string, number>\n    touchpoints: any[]\n  }\n  overdue?: {\n    total: number\n    by_type: Record<string, number>\n    touchpoints: any[]\n  }\n  summary?: {\n    total_due: number\n    emails_due: number\n    calls_due: number\n    linkedin_due: number\n  }\n  // For specific date queries\n  touchpoints?: any[]\n  date?: string\n  total?: number\n}\n\ninterface BatchInfo {\n  available_leads_count: number\n  next_batch_date: string\n  campaign?: any\n}\n\ninterface OutreachSequence {\n  id: string\n  name: string\n  company: string\n  description?: string\n  created_at: string\n  steps?: OutreachStep[]\n}\n\ninterface OutreachStep {\n  id: string\n  sequence_id: string\n  step_order: number\n  type: string\n  name?: string\n  content_link?: string\n  day_offset: number\n}\n\ninterface SequenceFormData {\n  name: string\n  company: string\n  description: string\n  steps: {\n    type: 'email' | 'call' | 'linkedin_message'\n    name: string\n    content_link: string\n    day_offset: number\n  }[]\n}\n\nexport default function OutreachPage() {\n  const { selectedCompany } = useCompany()\n  const [activeTab, setActiveTab] = useState<'touchpoints' | 'sequences'>('touchpoints')\n  const [touchpoints, setTouchpoints] = useState<TouchpointSummary | null>(null)\n  const [sequences, setSequences] = useState<OutreachSequence[]>([])\n  const [loading, setLoading] = useState(true)\n  const [selectedCampaign, setSelectedCampaign] = useState('')\n  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]) // YYYY-MM-DD format\n  const [touchpointCounts, setTouchpointCounts] = useState<Record<string, number>>({})\n  const [selectedType, setSelectedType] = useState('')\n  const [campaigns, setCampaigns] = useState<any[]>([])\n  const [filteredTouchpoints, setFilteredTouchpoints] = useState<any[]>([])\n  const [showCreateSequenceModal, setShowCreateSequenceModal] = useState(false)\n  const [creatingSequence, setCreatingSequence] = useState(false)\n  const [showCalendarPopup, setShowCalendarPopup] = useState(false)\n  const [selectedLead, setSelectedLead] = useState<Lead | null>(null)\n  const [editingLead, setEditingLead] = useState<Lead | null>(null)\n  const [saving, setSaving] = useState(false)\n  const [leadTouchpoints, setLeadTouchpoints] = useState<any[]>([])\n  const [showNewTouchpointForm, setShowNewTouchpointForm] = useState(false)\n  const [newTouchpoint, setNewTouchpoint] = useState<any>({})\n  const [syncing, setSyncing] = useState(false)\n  \n  // Pagination states\n  const [currentPage, setCurrentPage] = useState(1)\n  const [itemsPerPage] = useState(20)\n\n  // Form data for create sequence modal\n  const [sequenceFormData, setSequenceFormData] = useState<SequenceFormData>({\n    name: '',\n    company: selectedCompany,\n    description: '',\n    steps: [\n      { type: 'email', name: '', content_link: '', day_offset: 0 }\n    ]\n  })\n\n  useEffect(() => {\n    fetchTouchpoints()\n    fetchCampaigns()\n    fetchSequences()\n    applyFilters()\n    fetchTouchpointCounts()\n  }, [selectedCompany])\n\n  // Apply filters when filter values change\n  useEffect(() => {\n    if (!loading) {\n      applyFilters()\n      fetchTouchpointCounts()\n    }\n  }, [selectedDate, selectedType, selectedCampaign])\n\n  // Update form data when selected company changes\n  useEffect(() => {\n    setSequenceFormData(prev => ({ ...prev, company: selectedCompany }))\n  }, [selectedCompany])\n\n  const fetchTouchpoints = async () => {\n    try {\n      const response = await fetch(`/api/daily-touchpoints?company=${selectedCompany}`)\n      const data = await response.json()\n      setTouchpoints(data)\n    } catch (error) {\n      console.error('Error fetching touchpoints:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const fetchCampaigns = async () => {\n    try {\n      const response = await fetch(`/api/campaigns?company=${selectedCompany}`)\n      const data = await response.json()\n      setCampaigns(data || [])\n    } catch (error) {\n      console.error('Error fetching campaigns:', error)\n    }\n  }\n\n  const fetchSequences = async () => {\n    try {\n      const response = await fetch(`/api/outreach-sequences?company=${selectedCompany}`)\n      const data = await response.json()\n      setSequences(data || [])\n    } catch (error) {\n      console.error('Error fetching sequences:', error)\n    }\n  }\n\n  const fetchTouchpointCounts = async () => {\n    try {\n      // Fetch touchpoint counts for the current month\n      const startOfMonth = new Date(selectedDate)\n      startOfMonth.setDate(1)\n      const endOfMonth = new Date(selectedDate)\n      endOfMonth.setMonth(endOfMonth.getMonth() + 1)\n      endOfMonth.setDate(0)\n\n      const params = new URLSearchParams()\n      params.append('startDate', startOfMonth.toISOString().split('T')[0])\n      params.append('endDate', endOfMonth.toISOString().split('T')[0])\n      params.append('company', selectedCompany)\n      if (selectedCampaign) {\n        params.append('campaignId', selectedCampaign)\n      }\n\n      const response = await fetch(`/api/touchpoint-counts?${params.toString()}`)\n      const result = await response.json()\n      \n      if (response.ok) {\n        setTouchpointCounts(result.counts || {})\n      }\n    } catch (error) {\n      console.error('Error fetching touchpoint counts:', error)\n    }\n  }\n\n  const applyFilters = async () => {\n    setLoading(true)\n    try {\n      // Build query parameters for specific date\n      const params = new URLSearchParams()\n      params.append('date', selectedDate)\n      params.append('company', selectedCompany)\n      if (selectedCampaign) {\n        params.append('campaignId', selectedCampaign)\n      }\n\n      const response = await fetch(`/api/daily-touchpoints?${params.toString()}`)\n      const result = await response.json()\n      \n      if (response.ok) {\n        let allTouchpoints = result.touchpoints || []\n\n        // Apply type filter if selected\n        if (selectedType) {\n          allTouchpoints = allTouchpoints.filter((tp: any) => tp.type === selectedType)\n        }\n\n        setFilteredTouchpoints(allTouchpoints)\n        setTouchpoints(result) // Keep original data for summary cards\n        setCurrentPage(1) // Reset to first page when filters change\n      } else {\n        alert(`Error: ${result.error}`)\n      }\n    } catch (error) {\n      console.error('Error fetching touchpoints:', error)\n      alert('Failed to fetch touchpoints')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const markTouchpointComplete = async (touchpointId: string, outcome: string) => {\n    try {\n      // First, get the original touchpoint details\n      const originalTouchpoint = filteredTouchpoints.find(tp => tp.id === touchpointId)\n      if (!originalTouchpoint) {\n        alert('Touchpoint not found')\n        return\n      }\n\n      // Mark the original scheduled touchpoint as completed\n      const completeResponse = await fetch('/api/daily-touchpoints', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n          touchpointId, \n          outcomeEnum: outcome,\n          notes: `Completed via outreach dashboard`\n        })\n      })\n\n      if (!completeResponse.ok) {\n        alert('Failed to mark touchpoint as complete')\n        return\n      }\n\n      // Create a new touchpoint record representing the actual interaction\n      const newTouchpointResponse = await fetch('/api/touchpoints', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          lead_id: originalTouchpoint.lead.id,\n          type: originalTouchpoint.type,\n          subject: `${originalTouchpoint.type.replace('_', ' ').toUpperCase()} - ${outcome === 'replied' ? 'Replied' : 'No Answer'}`,\n          content: `${outcome === 'replied' ? 'Lead replied to' : 'No answer from'} ${originalTouchpoint.type.replace('_', ' ')} outreach: ${originalTouchpoint.subject || 'N/A'}`,\n          completed_at: new Date().toISOString(),\n          outcome: outcome === 'replied' ? 'Replied' : 'No Answer'\n        })\n      })\n\n      if (newTouchpointResponse.ok) {\n        applyFilters() // Refresh the filtered list\n      } else {\n        // If creating new touchpoint fails, still refresh since we completed the original\n        console.error('Failed to create new touchpoint record')\n        applyFilters()\n      }\n    } catch (error) {\n      console.error('Error completing touchpoint:', error)\n      alert('Failed to complete touchpoint')\n    }\n  }\n\n  const handleCreateSequence = async () => {\n    if (!sequenceFormData.name || sequenceFormData.steps.length === 0) {\n      alert('Please fill in sequence name and add at least one step')\n      return\n    }\n\n    // Validate all steps have required fields\n    for (const step of sequenceFormData.steps) {\n      if (!step.type || !step.name || step.day_offset < 0) {\n        alert('All steps must have type, name, and valid day offset')\n        return\n      }\n    }\n\n    setCreatingSequence(true)\n    try {\n      const response = await fetch('/api/outreach-sequences', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(sequenceFormData)\n      })\n\n      const result = await response.json()\n      \n      if (response.ok) {\n        alert(`Sequence \"${sequenceFormData.name}\" created successfully!`)\n        setShowCreateSequenceModal(false)\n        setSequenceFormData({\n          name: '',\n          company: selectedCompany,\n          description: '',\n          steps: [{ type: 'email', name: '', content_link: '', day_offset: 0 }]\n        })\n        fetchSequences()\n      } else {\n        alert(`Error: ${result.error}`)\n      }\n    } catch (error) {\n      console.error('Error creating sequence:', error)\n      alert('Failed to create sequence')\n    } finally {\n      setCreatingSequence(false)\n    }\n  }\n\n  const addStep = () => {\n    const nextDayOffset = sequenceFormData.steps.length > 0 \n      ? Math.max(...sequenceFormData.steps.map(s => s.day_offset)) + 1 \n      : 0\n    \n    setSequenceFormData(prev => ({\n      ...prev,\n      steps: [\n        ...prev.steps,\n        { type: 'email', name: '', content_link: '', day_offset: nextDayOffset }\n      ]\n    }))\n  }\n\n  const removeStep = (index: number) => {\n    if (sequenceFormData.steps.length > 1) {\n      setSequenceFormData(prev => ({\n        ...prev,\n        steps: prev.steps.filter((_, i) => i !== index)\n      }))\n    }\n  }\n\n  const updateStep = (index: number, field: string, value: any) => {\n    setSequenceFormData(prev => ({\n      ...prev,\n      steps: prev.steps.map((step, i) => \n        i === index ? { ...step, [field]: value } : step\n      )\n    }))\n  }\n\n  const getStepTypeColor = (type: string) => {\n    const colors = {\n      'email': 'bg-blue-100 text-blue-800',\n      'call': 'bg-green-100 text-green-800',\n      'linkedin_message': 'bg-purple-100 text-purple-800'\n    }\n    return colors[type as keyof typeof colors] || colors['email']\n  }\n\n  const getStepTypeIcon = (type: string) => {\n    switch (type) {\n      case 'email':\n        return <Mail className=\"h-3 w-3\" />\n      case 'call':\n        return <Phone className=\"h-3 w-3\" />\n      case 'linkedin_message':\n        return <MessageSquare className=\"h-3 w-3\" />\n      default:\n        return <Mail className=\"h-3 w-3\" />\n    }\n  }\n\n  const handleCalendarMonthChange = (startDate: string, endDate: string) => {\n    // Fetch touchpoint counts for the new month\n    const params = new URLSearchParams()\n    params.append('startDate', startDate)\n    params.append('endDate', endDate)\n    if (selectedCampaign) {\n      params.append('campaignId', selectedCampaign)\n    }\n\n    fetch(`/api/touchpoint-counts?${params.toString()}`)\n      .then(response => response.json())\n      .then(result => {\n        if (result.counts) {\n          setTouchpointCounts(result.counts)\n        }\n      })\n      .catch(error => {\n        console.error('Error fetching touchpoint counts:', error)\n      })\n  }\n\n  const handleTouchpointClick = (touchpoint: any) => {\n    const lead = touchpoint.lead\n    setSelectedLead(lead)\n    setEditingLead({ ...lead })\n    setLeadTouchpoints(lead.touchpoints || [])\n  }\n\n  const handleCloseLead = () => {\n    setSelectedLead(null)\n    setEditingLead(null)\n    setLeadTouchpoints([])\n    setShowNewTouchpointForm(false)\n    setNewTouchpoint({})\n  }\n\n  const handleSaveLead = async () => {\n    if (!editingLead) return\n\n    setSaving(true)\n    try {\n      // Implementation for saving lead changes\n      console.log('Saving lead:', editingLead)\n      \n      // Refresh touchpoints data\n      await applyFilters()\n      \n      alert('Lead updated successfully!')\n      handleCloseLead()\n    } catch (error) {\n      console.error('Error saving lead:', error)\n      alert('Failed to save lead')\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  // const handleSyncInstantly = async () => {\n  //   setSyncing(true)\n  //   try {\n  //     // Get the instantly campaign ID from the selected campaign\n  //     let instantlyCampaignId = null\n      \n  //     if (selectedCampaign) {\n  //       const campaign = campaigns.find(c => c.id === selectedCampaign)\n  //       instantlyCampaignId = campaign?.instantly_campaign_id\n        \n  //       if (!instantlyCampaignId) {\n  //         alert('Selected campaign is not linked to an Instantly.ai campaign. Please configure the campaign first.')\n  //         return\n  //       }\n  //     } else {\n  //       alert('Please select a campaign to sync with Instantly.ai')\n  //       return\n  //     }\n\n  //     const response = await fetch('/api/sync-instantly', {\n  //       method: 'POST',\n  //       headers: {\n  //         'Content-Type': 'application/json',\n  //       },\n  //       body: JSON.stringify({\n  //         campaignId: selectedCampaign,\n  //         company: selectedCompany,\n  //         instantlyCampaignId: instantlyCampaignId\n  //       }),\n  //     })\n\n  //     const result = await response.json()\n\n  //     if (response.ok) {\n  //       // Refresh touchpoints data after sync\n  //       await applyFilters()\n        \n  //       alert(result.message || `Successfully synced ${result.updatedCount} touchpoints from Instantly.ai`)\n  //     } else {\n  //       throw new Error(result.error || 'Sync failed')\n  //     }\n  //   } catch (error) {\n  //     console.error('Error syncing with Instantly:', error)\n  //     alert(`Failed to sync with Instantly.ai: ${error instanceof Error ? error.message : 'Unknown error'}`)\n  //   } finally {\n  //     setSyncing(false)\n  //   }\n  // }\n\n  const availableStatuses = Object.keys(STATUS_DISPLAY_MAP)\n\n  if (loading) {\n    return (\n      <DashboardLayout>\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n        </div>\n      </DashboardLayout>\n    )\n  }\n\n  return (\n    <DashboardLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n        <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">Outreach Management</h1>\n            <p className=\"text-gray-600\">Manage daily touchpoints and outreach sequences for {selectedCompany}</p>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            {activeTab === 'sequences' && (\n              <button\n                onClick={() => setShowCreateSequenceModal(true)}\n                className=\"flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                New Sequence\n              </button>\n            )}\n          </div>\n        </div>\n\n        {/* Tab Navigation */}\n        <div className=\"border-b border-gray-200\">\n          <nav className=\"-mb-px flex space-x-8\">\n            <button\n              onClick={() => setActiveTab('touchpoints')}\n              className={`py-2 px-1 border-b-2 font-medium text-sm ${\n                activeTab === 'touchpoints'\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              }`}\n            >\n              <Calendar className=\"h-4 w-4 inline mr-2\" />\n              Daily Touchpoints\n            </button>\n            <button\n              onClick={() => setActiveTab('sequences')}\n              className={`py-2 px-1 border-b-2 font-medium text-sm ${\n                activeTab === 'sequences'\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              }`}\n            >\n              <List className=\"h-4 w-4 inline mr-2\" />\n              Outreach Sequences\n            </button>\n          </nav>\n        </div>\n\n        {/* Touchpoints Tab Content */}\n        {activeTab === 'touchpoints' && (\n          <div className={`flex gap-6 ${selectedLead ? 'grid grid-cols-2' : ''}`}>\n            <div className={selectedLead ? 'col-span-1' : 'w-full'}>\n        {/* Summary Cards */}\n        {touchpoints && (\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n              <div className=\"flex items-center\">\n                <Calendar className=\"h-8 w-8 text-blue-600 mr-3\" />\n                <div>\n                      <p className=\"text-2xl font-bold text-gray-900\">\n                        {touchpoints.summary?.total_due || touchpoints.total || filteredTouchpoints.length}\n                      </p>\n                      <p className=\"text-sm text-gray-600\">Total Due Selected Date</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n              <div className=\"flex items-center\">\n                <Mail className=\"h-8 w-8 text-green-600 mr-3\" />\n                <div>\n                      <p className=\"text-2xl font-bold text-gray-900\">\n                        {touchpoints.summary?.emails_due || filteredTouchpoints.filter(tp => tp.type === 'email').length}\n                      </p>\n                  <p className=\"text-sm text-gray-600\">Emails Due</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n              <div className=\"flex items-center\">\n                <Phone className=\"h-8 w-8 text-orange-600 mr-3\" />\n                <div>\n                      <p className=\"text-2xl font-bold text-gray-900\">\n                        {touchpoints.summary?.calls_due || filteredTouchpoints.filter(tp => tp.type === 'call').length}\n                      </p>\n                  <p className=\"text-sm text-gray-600\">Calls Due</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n              <div className=\"flex items-center\">\n                <MessageSquare className=\"h-8 w-8 text-purple-600 mr-3\" />\n                <div>\n                      <p className=\"text-2xl font-bold text-gray-900\">\n                        {touchpoints.summary?.linkedin_due || filteredTouchpoints.filter(tp => tp.type === 'linkedin_message').length}\n                      </p>\n                  <p className=\"text-sm text-gray-600\">LinkedIn Messages</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n            {/* Filters Section */}\n            <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Filter Touchpoints</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Date</label>\n                  <div className=\"relative\">\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-sm font-medium text-gray-900\">\n                        {new Date(selectedDate).toLocaleDateString('en-US', { \n                          weekday: 'short',\n                          month: 'short', \n                          day: 'numeric',\n                          year: 'numeric'\n                        })}\n                      </span>\n                      <button\n                        onClick={() => setShowCalendarPopup(true)}\n                        className=\"flex items-center space-x-1 px-3 py-2 bg-blue-50 hover:bg-blue-100 border border-blue-200 rounded-md transition-colors\"\n                      >\n                        <Calendar className=\"h-4 w-4 text-blue-600\" />\n                        <span className=\"text-sm text-blue-600\">Select Date</span>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Type</label>\n                  <select\n                    value={selectedType}\n                    onChange={(e) => setSelectedType(e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  >\n                    <option value=\"\">All Types</option>\n                    <option value=\"email\">Email</option>\n                    <option value=\"call\">Call</option>\n                    <option value=\"linkedin_message\">LinkedIn Message</option>\n                  </select>\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Campaign</label>\n                  <select\n                    value={selectedCampaign}\n                    onChange={(e) => setSelectedCampaign(e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  >\n                    <option value=\"\">All Campaigns</option>\n                    {campaigns.map(campaign => (\n                      <option key={campaign.id} value={campaign.id}>{campaign.name}</option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            </div>\n\n            {/* Touchpoints Section */}\n          <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n            <div className=\"px-6 py-4 border-b border-gray-200\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-semibold text-gray-900\">Touchpoints</h3>\n                {/* <button\n                  onClick={handleSyncInstantly}\n                  disabled={syncing}\n                  className=\"flex items-center px-3 py-1 text-sm text-white bg-purple-600 rounded-md hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n                >\n                  <RefreshCw className={`h-4 w-4 mr-1 ${syncing ? 'animate-spin' : ''}`} />\n                  {syncing ? 'Syncing...' : 'Sync Instantly'}\n                </button> */}\n              </div>\n            </div>\n            <div className=\"p-6\">\n                {filteredTouchpoints.length === 0 ? (\n                  <p className=\"text-gray-500 text-center py-8\">No touchpoints found with current filters</p>\n              ) : (\n                <div className=\"space-y-4\">\n                    {filteredTouchpoints.map((touchpoint) => (\n                      <div \n                        key={touchpoint.id} \n                        className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 cursor-pointer transition-colors\"\n                        onClick={() => handleTouchpointClick(touchpoint)}\n                      >\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2\">\n                          <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${\n                            touchpoint.type === 'email' ? 'bg-blue-100 text-blue-800' :\n                            touchpoint.type === 'call' ? 'bg-green-100 text-green-800' :\n                            touchpoint.type === 'linkedin_message' ? 'bg-purple-100 text-purple-800' :\n                            'bg-gray-100 text-gray-800'\n                          }`}>\n                            {touchpoint.type.replace('_', ' ').toUpperCase()}\n                          </span>\n                          <span className=\"font-medium\">{touchpoint.lead.first_name} {touchpoint.lead.last_name}</span>\n                            {touchpoint.lead.campaign && (\n                              <span className=\"text-xs text-gray-500 bg-gray-200 px-2 py-1 rounded\">\n                                {touchpoint.lead.campaign.name}\n                              </span>\n                            )}\n                        </div>\n                        <p className=\"text-sm text-gray-600 mt-1\">{touchpoint.subject}</p>\n                          <div className=\"flex items-center space-x-4 mt-1\">\n                        <p className=\"text-xs text-gray-500\">{touchpoint.lead.email}</p>\n                            <p className=\"text-xs text-gray-500\">\n                              Scheduled: {new Date(touchpoint.scheduled_at).toLocaleDateString()}\n                            </p>\n                          </div>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <button\n                            onClick={(e) => {\n                              e.stopPropagation()\n                              markTouchpointComplete(touchpoint.id, 'replied')\n                            }}\n                          className=\"px-3 py-1 bg-green-600 text-white text-xs rounded hover:bg-green-700\"\n                        >\n                          Replied\n                        </button>\n                        <button\n                            onClick={(e) => {\n                              e.stopPropagation()\n                              markTouchpointComplete(touchpoint.id, 'no_answer')\n                            }}\n                          className=\"px-3 py-1 bg-gray-600 text-white text-xs rounded hover:bg-gray-700\"\n                        >\n                          No Answer\n                        </button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n          </div>\n        </div>\n\n        {/* Overdue Touchpoints */}\n            {touchpoints && touchpoints.overdue && touchpoints.overdue.total > 0 && (\n          <div className=\"bg-white rounded-lg shadow-sm border border-red-200\">\n            <div className=\"px-6 py-4 border-b border-red-200 bg-red-50\">\n              <h3 className=\"text-lg font-semibold text-red-900\">Overdue Touchpoints ({touchpoints.overdue.total})</h3>\n            </div>\n            <div className=\"p-6\">\n              <div className=\"space-y-4\">\n                {touchpoints.overdue.touchpoints.map((touchpoint) => (\n                      <div \n                        key={touchpoint.id} \n                        className=\"flex items-center justify-between p-4 bg-red-50 rounded-lg border border-red-200 hover:bg-red-100 cursor-pointer transition-colors\"\n                        onClick={() => handleTouchpointClick(touchpoint)}\n                      >\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2\">\n                        <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${\n                          touchpoint.type === 'email' ? 'bg-blue-100 text-blue-800' :\n                          touchpoint.type === 'call' ? 'bg-green-100 text-green-800' :\n                          touchpoint.type === 'linkedin_message' ? 'bg-purple-100 text-purple-800' :\n                          'bg-gray-100 text-gray-800'\n                        }`}>\n                          {touchpoint.type.replace('_', ' ').toUpperCase()}\n                        </span>\n                        <span className=\"font-medium\">{touchpoint.lead.first_name} {touchpoint.lead.last_name}</span>\n                        <span className=\"text-xs text-red-600\">\n                          Due: {new Date(touchpoint.scheduled_at).toLocaleDateString()}\n                        </span>\n                      </div>\n                      <p className=\"text-sm text-gray-600 mt-1\">{touchpoint.subject}</p>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <button\n                            onClick={(e) => {\n                              e.stopPropagation()\n                              markTouchpointComplete(touchpoint.id, 'replied')\n                            }}\n                        className=\"px-3 py-1 bg-green-600 text-white text-xs rounded hover:bg-green-700\"\n                      >\n                        Replied\n                      </button>\n                      <button\n                            onClick={(e) => {\n                              e.stopPropagation()\n                              markTouchpointComplete(touchpoint.id, 'no_answer')\n                            }}\n                        className=\"px-3 py-1 bg-gray-600 text-white text-xs rounded hover:bg-gray-700\"\n                      >\n                        No Answer\n                      </button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n            </div>\n\n            {/* Lead Detail Panel */}\n            {selectedLead && editingLead && (\n              <div className=\"col-span-1\">\n                <LeadDetailPanel\n                  selectedLead={selectedLead}\n                  editingLead={editingLead}\n                  onEditingLeadChange={setEditingLead}\n                  onClose={handleCloseLead}\n                  onSave={handleSaveLead}\n                  saving={saving}\n                  campaigns={campaigns}\n                  availableStatuses={availableStatuses}\n                  touchpoints={leadTouchpoints}\n                  showNewTouchpointForm={showNewTouchpointForm}\n                  onToggleTouchpointForm={() => setShowNewTouchpointForm(!showNewTouchpointForm)}\n                  newTouchpoint={newTouchpoint}\n                  onNewTouchpointChange={setNewTouchpoint}\n                  onAddTouchpoint={() => {}}\n                />\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Sequences Tab Content */}\n        {activeTab === 'sequences' && (\n          <div className=\"space-y-6\">\n            {/* Sequences Grid */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {sequences.map((sequence) => (\n                <div key={sequence.id} className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6 hover:shadow-md transition-shadow\">\n                  {/* Header */}\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <div className={`w-3 h-3 rounded-full ${sequence.company === 'CraftyCode' ? 'bg-blue-500' : 'bg-purple-500'}`}></div>\n                        <span className=\"text-sm text-gray-600\">{sequence.company}</span>\n                      </div>\n                      <h3 className=\"text-lg font-semibold text-gray-900 mb-1\">{sequence.name}</h3>\n                      {sequence.description && (\n                        <p className=\"text-sm text-gray-600 mb-2\">{sequence.description}</p>\n                      )}\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"inline-flex items-center px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded-full\">\n                          <Target className=\"h-3 w-3 mr-1\" />\n                          {sequence.steps?.length || 0} Steps\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <button className=\"text-gray-400 hover:text-gray-600\">\n                        <Edit2 className=\"h-4 w-4\" />\n                      </button>\n                      <button className=\"text-gray-400 hover:text-red-600\">\n                        <Trash2 className=\"h-4 w-4\" />\n                      </button>\n                    </div>\n                  </div>\n\n                  {/* Steps Preview */}\n                  {sequence.steps && sequence.steps.length > 0 && (\n                    <div className=\"space-y-2 mb-4\">\n                      <h4 className=\"text-sm font-medium text-gray-700\">Steps:</h4>\n                      <div className=\"space-y-1\">\n                        {sequence.steps.slice(0, 3).map((step) => (\n                          <div key={step.id} className=\"flex items-center space-x-2 text-xs\">\n                            <span className=\"text-gray-500\">Day {step.day_offset}</span>\n                            <ArrowRight className=\"h-3 w-3 text-gray-400\" />\n                            <span className={`inline-flex items-center px-2 py-0.5 rounded-full font-medium ${getStepTypeColor(step.type)}`}>\n                              {getStepTypeIcon(step.type)}\n                              <span className=\"ml-1 capitalize\">{step.type.replace('_', ' ')}</span>\n                            </span>\n                            <span className=\"text-gray-600 truncate\">{step.name}</span>\n                          </div>\n                        ))}\n                        {sequence.steps.length > 3 && (\n                          <div className=\"text-xs text-gray-500\">\n                            +{sequence.steps.length - 3} more steps...\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Footer */}\n                  <div className=\"text-xs text-gray-500 border-t border-gray-200 pt-4\">\n                    Created: {new Date(sequence.created_at).toLocaleDateString()}\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {/* Empty State */}\n            {sequences.length === 0 && (\n              <div className=\"text-center py-12\">\n                <Target className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No outreach sequences found</h3>\n                <p className=\"text-gray-500 mb-4\">\n                  Create your first outreach sequence to start automating your lead nurturing process.\n                </p>\n                <button\n                  onClick={() => setShowCreateSequenceModal(true)}\n                  className=\"inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create Sequence\n                </button>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Create Sequence Modal */}\n        {showCreateSequenceModal && (\n          <div className=\"fixed inset-0 bg-gray-900 bg-opacity-20 backdrop-blur-sm flex items-center justify-center z-50 p-4\">\n            <div className=\"bg-white rounded-xl shadow-2xl p-8 w-full max-w-4xl max-h-[90vh] overflow-y-auto border border-gray-100\">\n              <div className=\"flex items-center mb-6\">\n                <div className=\"flex-shrink-0 w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center mr-3\">\n                  <Target className=\"h-5 w-5 text-blue-600\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-semibold text-gray-900\">Create Outreach Sequence</h3>\n                  <p className=\"text-sm text-gray-500\">Set up your automated outreach sequence with multiple touchpoints</p>\n                </div>\n              </div>\n              \n              <div className=\"space-y-6\">\n                {/* Basic Info */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Sequence Name *</label>\n                    <input\n                      type=\"text\"\n                      value={sequenceFormData.name}\n                      onChange={(e) => setSequenceFormData({ ...sequenceFormData, name: e.target.value })}\n                      className=\"w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 focus:bg-white transition-colors\"\n                      placeholder=\"Enter sequence name\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Company</label>\n                    <select \n                      value={sequenceFormData.company}\n                      onChange={(e) => setSequenceFormData({ ...sequenceFormData, company: e.target.value })}\n                      className=\"w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 focus:bg-white transition-colors\"\n                    >\n                      <option value=\"CraftyCode\">CraftyCode</option>\n                      <option value=\"Avalern\">Avalern</option>\n                    </select>\n                  </div>\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Description</label>\n                  <textarea\n                    value={sequenceFormData.description}\n                    onChange={(e) => setSequenceFormData({ ...sequenceFormData, description: e.target.value })}\n                    rows={2}\n                    className=\"w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 focus:bg-white transition-colors resize-none\"\n                    placeholder=\"Optional sequence description...\"\n                  />\n                </div>\n\n                {/* Steps */}\n                <div>\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h4 className=\"text-lg font-medium text-gray-900\">Sequence Steps</h4>\n                    <button\n                      onClick={addStep}\n                      className=\"flex items-center px-3 py-2 text-sm bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200\"\n                    >\n                      <Plus className=\"h-4 w-4 mr-1\" />\n                      Add Step\n                    </button>\n                  </div>\n                  \n                  <div className=\"space-y-4\">\n                    {sequenceFormData.steps.map((step, index) => (\n                      <div key={index} className=\"border border-gray-200 rounded-lg p-4\">\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <h5 className=\"font-medium text-gray-900\">Step {index + 1}</h5>\n                          {sequenceFormData.steps.length > 1 && (\n                            <button\n                              onClick={() => removeStep(index)}\n                              className=\"text-red-600 hover:text-red-700\"\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </button>\n                          )}\n                        </div>\n                        \n                        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n                          <div>\n                            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Type</label>\n                            <select\n                              value={step.type}\n                              onChange={(e) => updateStep(index, 'type', e.target.value)}\n                              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                            >\n                              <option value=\"email\">Email</option>\n                              <option value=\"call\">Call</option>\n                              <option value=\"linkedin_message\">LinkedIn Message</option>\n                            </select>\n                          </div>\n                          \n                          <div>\n                            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Day Offset</label>\n                            <input\n                              type=\"number\"\n                              min=\"0\"\n                              value={step.day_offset}\n                              onChange={(e) => updateStep(index, 'day_offset', parseInt(e.target.value) || 0)}\n                              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                            />\n                          </div>\n                          \n                          <div>\n                            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Name *</label>\n                            <input\n                              type=\"text\"\n                              value={step.name}\n                              onChange={(e) => updateStep(index, 'name', e.target.value)}\n                              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                              placeholder=\"Name/title for this step\"\n                            />\n                          </div>\n                        </div>\n                        \n                        <div>\n                          <label className=\"block text-sm font-medium text-gray-700 mb-1\">Content Link</label>\n                          <input\n                            type=\"text\"\n                            value={step.content_link}\n                            onChange={(e) => updateStep(index, 'content_link', e.target.value)}\n                            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                            placeholder=\"Link to content for this step\"\n                          />\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center justify-end space-x-3 pt-6 border-t border-gray-100 mt-6\">\n                <button\n                  onClick={() => setShowCreateSequenceModal(false)}\n                  className=\"px-6 py-3 text-gray-600 border border-gray-200 rounded-lg hover:bg-gray-50 hover:border-gray-300 font-medium transition-colors\"\n                >\n                  Cancel\n                </button>\n                <button \n                  onClick={handleCreateSequence}\n                  disabled={creatingSequence || !sequenceFormData.name || sequenceFormData.steps.length === 0}\n                  className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed font-medium shadow-sm transition-all flex items-center\"\n                >\n                  {creatingSequence ? (\n                    <>\n                      <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\"></div>\n                      Creating...\n                    </>\n                  ) : (\n                    <>\n                      <Target className=\"w-4 h-4 mr-2\" />\n                      Create Sequence\n                    </>\n                  )}\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Calendar Popup */}\n        <CalendarPopup\n          isOpen={showCalendarPopup}\n          onClose={() => setShowCalendarPopup(false)}\n          selectedDate={selectedDate}\n          onDateSelect={setSelectedDate}\n          touchpointCounts={touchpointCounts}\n          onMonthChange={handleCalendarMonthChange}\n        />\n      </div>\n    </DashboardLayout>\n  )\n} "],"names":[],"mappings":"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","debugId":null}}]
}