{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file:///Users/jdog/projects/lead-manager/src/components/layout/Sidebar.tsx"],"sourcesContent":["'use client'\n\nimport Link from 'next/link'\nimport { usePathname } from 'next/navigation'\nimport { useCompany } from '@/contexts/CompanyContext'\nimport { \n  LayoutDashboard, \n  Users, \n  Target, \n  Upload, \n  Settings,\n  Building2,\n  Calendar,\n  School,\n  MessageSquare\n} from 'lucide-react'\n\nconst baseNavigation = [\n  { name: 'Dashboard', href: '/', icon: LayoutDashboard },\n  { name: 'Outreach', href: '/outreach', icon: Calendar },\n  { name: 'Campaigns', href: '/campaigns', icon: Target },\n  { name: 'Import', href: '/import', icon: Upload },\n  { name: 'Settings', href: '/settings', icon: Settings },\n]\n\nconst craftyCodeNavigation = [\n  { name: 'Dashboard', href: '/', icon: LayoutDashboard },\n  { name: 'Leads', href: '/leads', icon: Users },\n  { name: 'Outreach', href: '/outreach', icon: MessageSquare },\n  { name: 'Campaigns', href: '/campaigns', icon: Target },\n  { name: 'Import', href: '/import', icon: Upload },\n  { name: 'Settings', href: '/settings', icon: Settings },\n]\n\nconst avalernNav = [\n  { name: 'Dashboard', href: '/', icon: LayoutDashboard },\n  { name: 'Districts', href: '/districts', icon: School },\n  { name: 'District Contacts', href: '/leads', icon: Users },\n  { name: 'Outreach', href: '/outreach', icon: MessageSquare },\n  { name: 'Campaigns', href: '/campaigns', icon: Target },\n  { name: 'Import', href: '/import', icon: Upload },\n  { name: 'Settings', href: '/settings', icon: Settings }\n]\n\nconst companies = [\n  { name: 'CraftyCode', color: 'bg-blue-500' },\n  { name: 'Avalern', color: 'bg-purple-500' }\n]\n\nexport default function Sidebar() {\n  const pathname = usePathname()\n  const { selectedCompany, setSelectedCompany } = useCompany()\n\n  return (\n    <div className=\"flex h-screen w-64 flex-col bg-white shadow-lg\">\n      {/* Logo */}\n      <div className=\"flex h-16 items-center px-6 border-b border-gray-200\">\n        <Building2 className=\"h-8 w-8 text-blue-600\" />\n        <span className=\"ml-3 text-xl font-bold text-gray-900\">Lead Manager</span>\n      </div>\n\n      {/* Company Selector - Moved to top */}\n      <div className=\"border-b border-gray-200 p-4\">\n        <div className=\"text-xs font-medium text-gray-500 uppercase tracking-wider mb-3\">\n          Active Companies\n        </div>\n        <div className=\"space-y-2\">\n          {companies.map((company) => (\n            <button\n              key={company.name}\n              onClick={() => setSelectedCompany(company.name)}\n              className={`\n                flex items-center w-full px-3 py-2 text-sm font-medium rounded-lg transition-colors\n                ${selectedCompany === company.name\n                  ? 'bg-gray-100 text-gray-900 border-l-4 border-blue-500'\n                  : 'text-gray-700 hover:bg-gray-50 hover:text-gray-900'\n                }\n              `}\n            >\n              <div className={`w-3 h-3 ${company.color} rounded-full mr-3`}></div>\n              <span>{company.name}</span>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"flex-1 px-4 py-6 space-y-2\">\n        {selectedCompany === 'CraftyCode' && craftyCodeNavigation.map((item) => {\n          const isActive = pathname === item.href\n          return (\n            <Link\n              key={item.name}\n              href={item.href}\n              className={`\n                flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors\n                ${isActive \n                  ? 'bg-blue-50 text-blue-700 border-r-2 border-blue-700' \n                  : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'\n                }\n              `}\n            >\n              <item.icon className={`mr-3 h-5 w-5 ${isActive ? 'text-blue-700' : 'text-gray-400'}`} />\n              {item.name}\n            </Link>\n          )\n        })}\n        {selectedCompany === 'Avalern' && avalernNav.map((item) => {\n          const isActive = pathname === item.href\n          return (\n            <Link\n              key={item.name}\n              href={item.href}\n              className={`\n                flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors\n                ${isActive \n                  ? 'bg-blue-50 text-blue-700 border-r-2 border-blue-700' \n                  : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'\n                }\n              `}\n            >\n              <item.icon className={`mr-3 h-5 w-5 ${isActive ? 'text-blue-700' : 'text-gray-400'}`} />\n              {item.name}\n            </Link>\n          )\n        })}\n      </nav>\n    </div>\n  )\n} "],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;;;;;;AAiBA,MAAM,iBAAiB;IACrB;QAAE,MAAM;QAAa,MAAM;QAAK,MAAM,4NAAA,CAAA,kBAAe;IAAC;IACtD;QAAE,MAAM;QAAY,MAAM;QAAa,MAAM,0MAAA,CAAA,WAAQ;IAAC;IACtD;QAAE,MAAM;QAAa,MAAM;QAAc,MAAM,sMAAA,CAAA,SAAM;IAAC;IACtD;QAAE,MAAM;QAAU,MAAM;QAAW,MAAM,sMAAA,CAAA,SAAM;IAAC;IAChD;QAAE,MAAM;QAAY,MAAM;QAAa,MAAM,0MAAA,CAAA,WAAQ;IAAC;CACvD;AAED,MAAM,uBAAuB;IAC3B;QAAE,MAAM;QAAa,MAAM;QAAK,MAAM,4NAAA,CAAA,kBAAe;IAAC;IACtD;QAAE,MAAM;QAAS,MAAM;QAAU,MAAM,oMAAA,CAAA,QAAK;IAAC;IAC7C;QAAE,MAAM;QAAY,MAAM;QAAa,MAAM,wNAAA,CAAA,gBAAa;IAAC;IAC3D;QAAE,MAAM;QAAa,MAAM;QAAc,MAAM,sMAAA,CAAA,SAAM;IAAC;IACtD;QAAE,MAAM;QAAU,MAAM;QAAW,MAAM,sMAAA,CAAA,SAAM;IAAC;IAChD;QAAE,MAAM;QAAY,MAAM;QAAa,MAAM,0MAAA,CAAA,WAAQ;IAAC;CACvD;AAED,MAAM,aAAa;IACjB;QAAE,MAAM;QAAa,MAAM;QAAK,MAAM,4NAAA,CAAA,kBAAe;IAAC;IACtD;QAAE,MAAM;QAAa,MAAM;QAAc,MAAM,sMAAA,CAAA,SAAM;IAAC;IACtD;QAAE,MAAM;QAAqB,MAAM;QAAU,MAAM,oMAAA,CAAA,QAAK;IAAC;IACzD;QAAE,MAAM;QAAY,MAAM;QAAa,MAAM,wNAAA,CAAA,gBAAa;IAAC;IAC3D;QAAE,MAAM;QAAa,MAAM;QAAc,MAAM,sMAAA,CAAA,SAAM;IAAC;IACtD;QAAE,MAAM;QAAU,MAAM;QAAW,MAAM,sMAAA,CAAA,SAAM;IAAC;IAChD;QAAE,MAAM;QAAY,MAAM;QAAa,MAAM,0MAAA,CAAA,WAAQ;IAAC;CACvD;AAED,MAAM,YAAY;IAChB;QAAE,MAAM;QAAc,OAAO;IAAc;IAC3C;QAAE,MAAM;QAAW,OAAO;IAAgB;CAC3C;AAEc,SAAS;IACtB,MAAM,WAAW,CAAA,GAAA,kIAAA,CAAA,cAAW,AAAD;IAC3B,MAAM,EAAE,eAAe,EAAE,kBAAkB,EAAE,GAAG,CAAA,GAAA,kIAAA,CAAA,aAAU,AAAD;IAEzD,qBACE,8OAAC;QAAI,WAAU;;0BAEb,8OAAC;gBAAI,WAAU;;kCACb,8OAAC,gNAAA,CAAA,YAAS;wBAAC,WAAU;;;;;;kCACrB,8OAAC;wBAAK,WAAU;kCAAuC;;;;;;;;;;;;0BAIzD,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAI,WAAU;kCAAkE;;;;;;kCAGjF,8OAAC;wBAAI,WAAU;kCACZ,UAAU,GAAG,CAAC,CAAC,wBACd,8OAAC;gCAEC,SAAS,IAAM,mBAAmB,QAAQ,IAAI;gCAC9C,WAAW,CAAC;;gBAEV,EAAE,oBAAoB,QAAQ,IAAI,GAC9B,yDACA,qDACH;cACH,CAAC;;kDAED,8OAAC;wCAAI,WAAW,CAAC,QAAQ,EAAE,QAAQ,KAAK,CAAC,kBAAkB,CAAC;;;;;;kDAC5D,8OAAC;kDAAM,QAAQ,IAAI;;;;;;;+BAXd,QAAQ,IAAI;;;;;;;;;;;;;;;;0BAkBzB,8OAAC;gBAAI,WAAU;;oBACZ,oBAAoB,gBAAgB,qBAAqB,GAAG,CAAC,CAAC;wBAC7D,MAAM,WAAW,aAAa,KAAK,IAAI;wBACvC,qBACE,8OAAC,4JAAA,CAAA,UAAI;4BAEH,MAAM,KAAK,IAAI;4BACf,WAAW,CAAC;;gBAEV,EAAE,WACE,wDACA,qDACH;cACH,CAAC;;8CAED,8OAAC,KAAK,IAAI;oCAAC,WAAW,CAAC,aAAa,EAAE,WAAW,kBAAkB,iBAAiB;;;;;;gCACnF,KAAK,IAAI;;2BAXL,KAAK,IAAI;;;;;oBAcpB;oBACC,oBAAoB,aAAa,WAAW,GAAG,CAAC,CAAC;wBAChD,MAAM,WAAW,aAAa,KAAK,IAAI;wBACvC,qBACE,8OAAC,4JAAA,CAAA,UAAI;4BAEH,MAAM,KAAK,IAAI;4BACf,WAAW,CAAC;;gBAEV,EAAE,WACE,wDACA,qDACH;cACH,CAAC;;8CAED,8OAAC,KAAK,IAAI;oCAAC,WAAW,CAAC,aAAa,EAAE,WAAW,kBAAkB,iBAAiB;;;;;;gCACnF,KAAK,IAAI;;2BAXL,KAAK,IAAI;;;;;oBAcpB;;;;;;;;;;;;;AAIR","debugId":null}},
    {"offset": {"line": 310, "column": 0}, "map": {"version":3,"sources":["file:///Users/jdog/projects/lead-manager/src/components/layout/DashboardLayout.tsx"],"sourcesContent":["'use client'\n\nimport Sidebar from './Sidebar'\n\ninterface DashboardLayoutProps {\n  children: React.ReactNode\n}\n\nexport default function DashboardLayout({ children }: DashboardLayoutProps) {\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-y-auto\">\n        <div className=\"p-8\">\n          {children}\n        </div>\n      </main>\n    </div>\n  )\n} "],"names":[],"mappings":";;;;AAEA;AAFA;;;AAQe,SAAS,gBAAgB,EAAE,QAAQ,EAAwB;IACxE,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC,uIAAA,CAAA,UAAO;;;;;0BACR,8OAAC;gBAAK,WAAU;0BACd,cAAA,8OAAC;oBAAI,WAAU;8BACZ;;;;;;;;;;;;;;;;;AAKX","debugId":null}},
    {"offset": {"line": 443, "column": 0}, "map": {"version":3,"sources":["file:///Users/jdog/projects/lead-manager/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\nimport { Database } from '@/types/database'\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n\nexport const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey)\n\n// Client-side Supabase client\nexport function createClientComponentClient() {\n  return createClient<Database>(supabaseUrl, supabaseAnonKey)\n} "],"names":[],"mappings":";;;;AAAA;;AAGA,MAAM;AACN,MAAM;AAEC,MAAM,WAAW,CAAA,GAAA,uLAAA,CAAA,eAAY,AAAD,EAAY,aAAa;AAGrD,SAAS;IACd,OAAO,CAAA,GAAA,uLAAA,CAAA,eAAY,AAAD,EAAY,aAAa;AAC7C","debugId":null}},
    {"offset": {"line": 461, "column": 0}, "map": {"version":3,"sources":["file:///Users/jdog/projects/lead-manager/src/components/CalendarPopup.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { Calendar, ChevronLeft, ChevronRight, X } from 'lucide-react'\n\ninterface CalendarPopupProps {\n  isOpen: boolean\n  onClose: () => void\n  selectedDate: string\n  onDateSelect: (date: string) => void\n  touchpointCounts: Record<string, number>\n  onMonthChange?: (startDate: string, endDate: string) => void\n}\n\nexport default function CalendarPopup({ \n  isOpen, \n  onClose, \n  selectedDate, \n  onDateSelect, \n  touchpointCounts,\n  onMonthChange \n}: CalendarPopupProps) {\n  const [currentMonth, setCurrentMonth] = useState(new Date(selectedDate))\n  const popupRef = useRef<HTMLDivElement>(null)\n\n  // Close popup when clicking outside\n  useEffect(() => {\n    function handleClickOutside(event: MouseEvent) {\n      if (popupRef.current && !popupRef.current.contains(event.target as Node)) {\n        onClose()\n      }\n    }\n\n    if (isOpen) {\n      document.addEventListener('mousedown', handleClickOutside)\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside)\n    }\n  }, [isOpen, onClose])\n\n  // Notify parent when month changes (only when user navigates)\n  const handleMonthChange = (direction: 'prev' | 'next') => {\n    const newMonth = new Date(currentMonth)\n    if (direction === 'prev') {\n      newMonth.setMonth(newMonth.getMonth() - 1)\n    } else {\n      newMonth.setMonth(newMonth.getMonth() + 1)\n    }\n    setCurrentMonth(newMonth)\n    \n    // Fetch touchpoint counts for the new month\n    if (onMonthChange) {\n      const startOfMonth = new Date(newMonth.getFullYear(), newMonth.getMonth(), 1)\n      const endOfMonth = new Date(newMonth.getFullYear(), newMonth.getMonth() + 1, 0)\n      onMonthChange(\n        startOfMonth.toISOString().split('T')[0],\n        endOfMonth.toISOString().split('T')[0]\n      )\n    }\n  }\n\n  if (!isOpen) return null\n\n  const getDaysInMonth = (date: Date) => {\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate()\n  }\n\n  const getFirstDayOfMonth = (date: Date) => {\n    return new Date(date.getFullYear(), date.getMonth(), 1).getDay()\n  }\n\n  const formatDateForAPI = (date: Date) => {\n    return date.toISOString().split('T')[0]\n  }\n\n  const isToday = (date: Date) => {\n    const today = new Date()\n    return date.toDateString() === today.toDateString()\n  }\n\n  const isSelectedDate = (date: Date) => {\n    return formatDateForAPI(date) === selectedDate\n  }\n\n\n\n  const renderCalendar = () => {\n    const daysInMonth = getDaysInMonth(currentMonth)\n    const firstDay = getFirstDayOfMonth(currentMonth)\n    const days = []\n\n    // Add empty cells for days before the first day of the month\n    for (let i = 0; i < firstDay; i++) {\n      days.push(<div key={`empty-${i}`} className=\"h-12 w-full\"></div>)\n    }\n\n    // Add days of the month\n    for (let day = 1; day <= daysInMonth; day++) {\n      const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), day)\n      const dateStr = formatDateForAPI(date)\n      const touchpointCount = touchpointCounts[dateStr] || 0\n      const isSelected = isSelectedDate(date)\n      const isTodayDate = isToday(date)\n\n      days.push(\n        <button\n          key={day}\n          onClick={() => {\n            onDateSelect(dateStr)\n            onClose()\n          }}\n          className={`h-12 w-full flex flex-col items-center justify-center text-xs rounded-md transition-all duration-200 border ${\n            isSelected\n              ? 'bg-blue-600 text-white border-blue-600 shadow-md'\n              : isTodayDate\n              ? 'bg-blue-50 text-blue-800 border-blue-200 hover:bg-blue-100'\n              : 'bg-white text-gray-700 border-gray-200 hover:bg-gray-50 hover:border-gray-300'\n          }`}\n        >\n          <span className=\"font-medium text-sm\">{day}</span>\n          {touchpointCount > 0 && (\n            <div className={`text-[10px] px-1 py-0.5 rounded-full font-medium leading-none ${\n              isSelected \n                ? 'bg-white text-blue-600' \n                : touchpointCount > 5\n                ? 'bg-red-100 text-red-700'\n                : touchpointCount > 2\n                ? 'bg-orange-100 text-orange-700'\n                : 'bg-green-100 text-green-700'\n            }`}>\n              {touchpointCount}\n            </div>\n          )}\n        </button>\n      )\n    }\n\n    return days\n  }\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-start justify-start\">\n      <div \n        ref={popupRef}\n        className=\"absolute top-20 left-4 bg-white rounded-lg shadow-xl border border-gray-200 p-4 w-80\"\n        style={{ zIndex: 1000 }}\n      >\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900 flex items-center\">\n            <Calendar className=\"h-4 w-4 mr-2 text-blue-600\" />\n            Select Date\n          </h3>\n          <button\n            onClick={onClose}\n            className=\"p-1 hover:bg-gray-100 rounded-md transition-colors\"\n          >\n            <X className=\"h-4 w-4 text-gray-500\" />\n          </button>\n        </div>\n\n        {/* Calendar Header */}\n        <div className=\"flex items-center justify-between mb-4\">\n          <button\n            onClick={() => handleMonthChange('prev')}\n            className=\"p-1 hover:bg-gray-100 rounded-md transition-colors\"\n          >\n            <ChevronLeft className=\"h-4 w-4 text-gray-600\" />\n          </button>\n          <h4 className=\"text-base font-medium text-gray-900\">\n            {currentMonth.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}\n          </h4>\n          <button\n            onClick={() => handleMonthChange('next')}\n            className=\"p-1 hover:bg-gray-100 rounded-md transition-colors\"\n          >\n            <ChevronRight className=\"h-4 w-4 text-gray-600\" />\n          </button>\n        </div>\n        \n        {/* Calendar Grid */}\n        <div className=\"grid grid-cols-7 gap-1 mb-2\">\n          {['S', 'M', 'T', 'W', 'T', 'F', 'S'].map((day, index) => (\n            <div key={index} className=\"h-6 flex items-center justify-center text-xs font-medium text-gray-500\">\n              {day}\n            </div>\n          ))}\n        </div>\n        <div className=\"grid grid-cols-7 gap-1\">\n          {renderCalendar()}\n        </div>\n\n        {/* Legend */}\n        <div className=\"mt-4 pt-3 border-t border-gray-200\">\n          <div className=\"flex items-center justify-between text-xs text-gray-600\">\n            <div className=\"flex items-center\">\n              <div className=\"w-3 h-3 bg-blue-600 rounded mr-1\"></div>\n              <span>Selected</span>\n            </div>\n            <div className=\"flex items-center\">\n              <div className=\"w-3 h-3 bg-blue-50 border border-blue-200 rounded mr-1\"></div>\n              <span>Today</span>\n            </div>\n            <div className=\"flex items-center\">\n              <div className=\"w-3 h-3 bg-green-100 rounded mr-1\"></div>\n              <span>1-2</span>\n            </div>\n            <div className=\"flex items-center\">\n              <div className=\"w-3 h-3 bg-red-100 rounded mr-1\"></div>\n              <span>5+</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 836, "column": 0}, "map": {"version":3,"sources":["file:///Users/jdog/projects/lead-manager/src/app/page.tsx"],"sourcesContent":["'use client'\n\nimport { useState, useEffect } from 'react'\nimport DashboardLayout from '@/components/layout/DashboardLayout'\nimport { useCompany } from '@/contexts/CompanyContext'\nimport { supabase } from '../lib/supabase'\nimport { Campaign, Lead, Touchpoint } from '../types/database'\nimport { \n  Users, \n  Mail,\n  Phone,\n  Calendar,\n  Upload,\n  Download,\n  TrendingUp,\n  Target\n} from 'lucide-react'\nimport CalendarPopup from '@/components/CalendarPopup'\n\ninterface DashboardStats {\n  totalLeads: number\n  emailsSent: number\n  callsMade: number\n  conversions: number\n  activeLeads: number\n  totalCampaigns: number\n}\n\ninterface CampaignStats extends Campaign {\n  lead_count: number\n  email_count: number\n  call_count: number\n  conversion_count: number\n}\n\nexport default function Dashboard() {\n  const { selectedCompany } = useCompany()\n  const [stats, setStats] = useState<DashboardStats>({\n    totalLeads: 0,\n    emailsSent: 0,\n    callsMade: 0,\n    conversions: 0,\n    activeLeads: 0,\n    totalCampaigns: 0\n  })\n  const [campaigns, setCampaigns] = useState<CampaignStats[]>([])\n  const [recentLeads, setRecentLeads] = useState<Lead[]>([])\n  const [scheduledTouchpoints, setScheduledTouchpoints] = useState<any[]>([])\n  const [loading, setLoading] = useState(true)\n  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0])\n  const [selectedType, setSelectedType] = useState('')\n  const [selectedCampaign, setSelectedCampaign] = useState('')\n  const [showCalendarPopup, setShowCalendarPopup] = useState(false)\n  const [touchpointCounts, setTouchpointCounts] = useState<Record<string, number>>({})\n  const [currentPage, setCurrentPage] = useState(1)\n  const touchpointsPerPage = 20\n\n  // Fetch dashboard data from Supabase\n  useEffect(() => {\n    const fetchDashboardData = async () => {\n      try {\n        setLoading(true)\n\n        // Fetch campaigns for selected company\n        const { data: campaignsData, error: campaignsError } = await supabase\n          .from('campaigns')\n          .select('*')\n          .eq('company', selectedCompany)\n\n        if (campaignsError) {\n          console.error('Error fetching campaigns:', campaignsError)\n          // Continue with empty campaigns data\n        }\n\n        // Fetch leads for selected company campaigns\n        const campaignIds = campaignsData?.map(c => c.id) || []\n        \n        let leadsData = null\n        if (campaignIds.length > 0) {\n          const { data: fetchedLeadsData, error: leadsError } = await supabase\n            .from('leads')\n            .select('*')\n            .in('campaign_id', campaignIds)\n\n          if (leadsError) {\n            console.error('Error fetching leads:', leadsError)\n          } else {\n            leadsData = fetchedLeadsData\n          }\n        }\n\n        // Fetch touchpoints for email and call counts\n        const leadIds = leadsData?.map(l => l.id) || []\n        \n        let touchpointsData = []\n        if (leadIds.length > 0) {\n          try {\n            const { data: fetchedTouchpointsData, error: touchpointsError } = await supabase\n              .from('touchpoints')\n              .select('*')\n              .in('lead_id', leadIds)\n\n            if (touchpointsError) {\n              console.error('Error fetching touchpoints:', touchpointsError.message || touchpointsError.details || touchpointsError.hint || 'Unknown error')\n              touchpointsData = []\n            } else {\n              touchpointsData = fetchedTouchpointsData || []\n            }\n          } catch (error) {\n            console.error('Unexpected error fetching touchpoints:', error)\n            touchpointsData = []\n          }\n        }\n\n        // Calculate stats - focus on today's activities\n        const today = new Date()\n        const todayStart = new Date(today.getFullYear(), today.getMonth(), today.getDate())\n        const todayEnd = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1)\n        \n        const totalLeads = leadsData?.length || 0\n        const emailsMadeToday = touchpointsData?.filter(t => \n          t.type === 'email' && \n          t.completed_at && \n          new Date(t.completed_at) >= todayStart && \n          new Date(t.completed_at) < todayEnd\n        ).length || 0\n        const callsMadeToday = touchpointsData?.filter(t => \n          t.type === 'call' && \n          t.completed_at && \n          new Date(t.completed_at) >= todayStart && \n          new Date(t.completed_at) < todayEnd\n        ).length || 0\n        const activeLeads = leadsData?.filter(l => !['won', 'lost'].includes(l.status)).length || 0\n\n        setStats({\n          totalLeads: totalLeads,\n          emailsSent: emailsMadeToday,\n          callsMade: callsMadeToday,\n          conversions: 0, // Remove conversions from display\n          activeLeads: activeLeads,\n          totalCampaigns: campaignsData?.length || 0\n        })\n\n        // Calculate campaign stats\n        const campaignStats: CampaignStats[] = campaignsData?.map(campaign => {\n          const campaignLeads = leadsData?.filter(l => l.campaign_id === campaign.id) || []\n          const campaignLeadIds = campaignLeads.map(l => l.id)\n          const campaignTouchpoints = touchpointsData?.filter(t => campaignLeadIds.includes(t.lead_id)) || []\n\n          return {\n            ...campaign,\n            lead_count: campaignLeads.length,\n            email_count: campaignTouchpoints.filter(t => t.type === 'email').length,\n            call_count: campaignTouchpoints.filter(t => t.type === 'call').length,\n            conversion_count: campaignLeads.filter(l => l.status === 'won').length\n          }\n        }) || []\n\n        setCampaigns(campaignStats)\n\n        // Set recent leads (last 5)\n        const sortedLeads = (leadsData || []).sort((a, b) => \n          new Date(b.created_at).getTime() - new Date(a.created_at).getTime()\n        ).slice(0, 5)\n        \n        setRecentLeads(sortedLeads)\n\n        // Initialize scheduled touchpoints as empty - will be loaded by filter function\n        setScheduledTouchpoints([])\n\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error)\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchDashboardData()\n  }, [selectedCompany])\n\n  // Load filtered touchpoints after initial data is loaded\n  useEffect(() => {\n    if (!loading) {\n      fetchFilteredTouchpoints()\n      fetchTouchpointCounts()\n    }\n  }, [loading])\n\n  // Apply filters when filter values change\n  useEffect(() => {\n    if (!loading) {\n      fetchFilteredTouchpoints()\n      fetchTouchpointCounts()\n    }\n  }, [selectedDate, selectedType, selectedCampaign])\n\n  // Reset pagination when filters change\n  useEffect(() => {\n    setCurrentPage(1)\n  }, [selectedDate, selectedType, selectedCampaign])\n\n  // Calculate pagination\n  const totalPages = Math.ceil(scheduledTouchpoints.length / touchpointsPerPage)\n  const startIndex = (currentPage - 1) * touchpointsPerPage\n  const endIndex = startIndex + touchpointsPerPage\n  const paginatedTouchpoints = scheduledTouchpoints.slice(startIndex, endIndex)\n\n  const statCards = [\n    {\n      title: 'Total Leads',\n      value: stats.totalLeads.toLocaleString(),\n      change: `${stats.activeLeads} active leads`,\n      icon: Users,\n      color: 'blue'\n    },\n    {\n      title: 'Emails Made Today',\n      value: stats.emailsSent.toLocaleString(),\n      change: 'Completed today',\n      icon: Mail,\n      color: 'green'\n    },\n    {\n      title: 'Calls Made Today',\n      value: stats.callsMade.toLocaleString(),\n      change: 'Completed today',\n      icon: Phone,\n      color: 'orange'\n    },\n    {\n      title: 'Active Campaigns',\n      value: stats.totalCampaigns.toLocaleString(),\n      change: `${selectedCompany} campaigns`,\n      icon: Target,\n      color: 'purple'\n    }\n  ]\n\n  const getColorClasses = (color: string) => {\n    const colors = {\n      blue: 'bg-blue-50 text-blue-600 border-blue-200',\n      green: 'bg-green-50 text-green-600 border-green-200',\n      orange: 'bg-orange-50 text-orange-600 border-orange-200',\n      purple: 'bg-purple-50 text-purple-600 border-purple-200',\n      indigo: 'bg-indigo-50 text-indigo-600 border-indigo-200'\n    }\n    return colors[color as keyof typeof colors] || colors.blue\n  }\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString)\n    const now = new Date()\n    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60))\n    \n    if (diffInHours < 1) return 'Just now'\n    if (diffInHours < 24) return `${diffInHours} hours ago`\n    if (diffInHours < 48) return '1 day ago'\n    return `${Math.floor(diffInHours / 24)} days ago`\n  }\n\n  const getStatusColor = (status: string) => {\n    const colors = {\n      'not_contacted': 'bg-gray-100 text-gray-800',\n      'emailed': 'bg-blue-100 text-blue-800',\n      'warm': 'bg-orange-100 text-orange-800',\n      'called': 'bg-purple-100 text-purple-800',\n      'booked': 'bg-green-100 text-green-800',\n      'won': 'bg-emerald-100 text-emerald-800',\n      'lost': 'bg-red-100 text-red-800'\n    }\n    return colors[status as keyof typeof colors] || colors.not_contacted\n  }\n\n  const getStatusLabel = (status: string) => {\n    const labels = {\n      'not_contacted': 'Not Contacted',\n      'emailed': 'Emailed',\n      'warm': 'Warm',\n      'called': 'Called',\n      'booked': 'Booked',\n      'won': 'Won',\n      'lost': 'Lost'\n    }\n    return labels[status as keyof typeof labels] || status\n  }\n\n  const handleImportLeads = () => {\n    window.location.href = '/import'\n  }\n\n  const handleExportLeads = () => {\n    window.location.href = '/leads'\n  }\n\n  const fetchFilteredTouchpoints = async () => {\n    try {\n      // Build query parameters for specific date\n      const params = new URLSearchParams()\n      params.append('date', selectedDate)\n      if (selectedCampaign) {\n        params.append('campaignId', selectedCampaign)\n      }\n\n      const response = await fetch(`/api/daily-touchpoints?${params.toString()}`)\n      const result = await response.json()\n      \n      if (response.ok) {\n        let allTouchpoints = result.touchpoints || []\n\n        // Apply type filter if selected\n        if (selectedType) {\n          allTouchpoints = allTouchpoints.filter((tp: any) => tp.type === selectedType)\n        }\n\n        setScheduledTouchpoints(allTouchpoints)\n      } else {\n        console.error('Error fetching filtered touchpoints:', result.error)\n        setScheduledTouchpoints([])\n      }\n    } catch (error) {\n      console.error('Error fetching filtered touchpoints:', error)\n      setScheduledTouchpoints([])\n    }\n  }\n\n  const fetchTouchpointCounts = async () => {\n    try {\n      // Fetch touchpoint counts for the current month\n      const startOfMonth = new Date(selectedDate)\n      startOfMonth.setDate(1)\n      const endOfMonth = new Date(selectedDate)\n      endOfMonth.setMonth(endOfMonth.getMonth() + 1)\n      endOfMonth.setDate(0)\n\n      const params = new URLSearchParams()\n      params.append('startDate', startOfMonth.toISOString().split('T')[0])\n      params.append('endDate', endOfMonth.toISOString().split('T')[0])\n      if (selectedCampaign) {\n        params.append('campaignId', selectedCampaign)\n      }\n\n      const response = await fetch(`/api/touchpoint-counts?${params.toString()}`)\n      const result = await response.json()\n      \n      if (response.ok) {\n        setTouchpointCounts(result.counts || {})\n      }\n    } catch (error) {\n      console.error('Error fetching touchpoint counts:', error)\n    }\n  }\n\n  const handleCalendarMonthChange = (startDate: string, endDate: string) => {\n    // Fetch touchpoint counts for the new month\n    const params = new URLSearchParams()\n    params.append('startDate', startDate)\n    params.append('endDate', endDate)\n    if (selectedCampaign) {\n      params.append('campaignId', selectedCampaign)\n    }\n\n    fetch(`/api/touchpoint-counts?${params.toString()}`)\n      .then(response => response.json())\n      .then(result => {\n        if (result.counts) {\n          setTouchpointCounts(result.counts)\n        }\n      })\n      .catch(error => {\n        console.error('Error fetching touchpoint counts:', error)\n      })\n  }\n\n  const markTouchpointComplete = async (touchpointId: string, outcome: string) => {\n    try {\n      const response = await fetch('/api/daily-touchpoints', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n          touchpointId, \n          outcomeEnum: outcome,\n          notes: `Completed via dashboard`\n        })\n      })\n\n      if (response.ok) {\n        // Refresh filtered touchpoints instead of full page reload\n        fetchFilteredTouchpoints()\n      } else {\n        alert('Failed to mark touchpoint as complete')\n      }\n    } catch (error) {\n      console.error('Error completing touchpoint:', error)\n      alert('Failed to complete touchpoint')\n    }\n  }\n\n  if (loading) {\n    return (\n      <DashboardLayout>\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n        </div>\n      </DashboardLayout>\n    )\n  }\n\n  return (\n    <DashboardLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Dashboard</h1>\n            <p className=\"text-gray-600 mt-1\">\n              Welcome back! Here's what's happening with {selectedCompany} campaigns.\n            </p>\n          </div>\n          <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n            <Calendar className=\"h-4 w-4\" />\n            <span>Last updated: {new Date().toLocaleDateString()}</span>\n          </div>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <button \n            onClick={handleImportLeads}\n            className=\"flex items-center justify-between p-6 bg-blue-50 rounded-lg hover:bg-blue-100 transition-colors border border-blue-200\"\n          >\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"p-3 bg-blue-600 rounded-lg\">\n                <Upload className=\"h-6 w-6 text-white\" />\n              </div>\n              <div className=\"text-left\">\n                <h3 className=\"text-lg font-semibold text-blue-900\">Import New Leads</h3>\n                <p className=\"text-sm text-blue-700\">Upload CSV files to add prospects</p>\n              </div>\n            </div>\n            <span className=\"text-blue-600 text-xl\">→</span>\n          </button>\n          \n          <button \n            onClick={handleExportLeads}\n            className=\"flex items-center justify-between p-6 bg-green-50 rounded-lg hover:bg-green-100 transition-colors border border-green-200\"\n          >\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"p-3 bg-green-600 rounded-lg\">\n                <Download className=\"h-6 w-6 text-white\" />\n              </div>\n              <div className=\"text-left\">\n                <h3 className=\"text-lg font-semibold text-green-900\">Export Leads</h3>\n                <p className=\"text-sm text-green-700\">Download leads for campaigns</p>\n              </div>\n            </div>\n            <span className=\"text-green-600 text-xl\">→</span>\n          </button>\n        </div>\n\n        {/* Stats Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {statCards.map((stat, index) => (\n            <div\n              key={index}\n              className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6 hover:shadow-md transition-shadow\"\n            >\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">{stat.title}</p>\n                  <p className=\"text-2xl font-bold text-gray-900 mt-2\">{stat.value}</p>\n                  <p className=\"text-xs text-gray-500 mt-1\">{stat.change}</p>\n                </div>\n                <div className={`p-3 rounded-lg ${getColorClasses(stat.color)}`}>\n                  <stat.icon className=\"h-5 w-5\" />\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Touchpoint Filters */}\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Filter Touchpoints</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Date</label>\n              <div className=\"relative\">\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-sm font-medium text-gray-900\">\n                    {new Date(selectedDate).toLocaleDateString('en-US', { \n                      weekday: 'short',\n                      month: 'short', \n                      day: 'numeric',\n                      year: 'numeric'\n                    })}\n                  </span>\n                  <button\n                    onClick={() => setShowCalendarPopup(true)}\n                    className=\"flex items-center space-x-1 px-3 py-2 bg-blue-50 hover:bg-blue-100 border border-blue-200 rounded-md transition-colors\"\n                  >\n                    <Calendar className=\"h-4 w-4 text-blue-600\" />\n                    <span className=\"text-sm text-blue-600\">Select Date</span>\n                  </button>\n                </div>\n              </div>\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Type</label>\n              <select\n                value={selectedType}\n                onChange={(e) => setSelectedType(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              >\n                <option value=\"\">All Types</option>\n                <option value=\"email\">Email</option>\n                <option value=\"call\">Call</option>\n                <option value=\"linkedin_message\">LinkedIn Message</option>\n                <option value=\"meeting\">Meeting</option>\n              </select>\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Campaign</label>\n              <select\n                value={selectedCampaign}\n                onChange={(e) => setSelectedCampaign(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              >\n                <option value=\"\">All Campaigns</option>\n                {campaigns.map(campaign => (\n                  <option key={campaign.id} value={campaign.id}>{campaign.name}</option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </div>\n\n        {/* Scheduled Touchpoints */}\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900\">Scheduled Touchpoints</h3>\n                <p className=\"text-sm text-gray-600 mt-1\">\n                  {selectedDate ? `Touchpoints for ${new Date(selectedDate).toLocaleDateString()}` : `Upcoming touchpoints for ${selectedCompany}`}\n                </p>\n              </div>\n              <div className=\"flex items-center space-x-4 text-sm text-gray-500\">\n                <span>Total: {scheduledTouchpoints.length}</span>\n                {totalPages > 1 && (\n                  <span>Page {currentPage} of {totalPages}</span>\n                )}\n                {!selectedDate && (\n                  <>\n                    <span>Today: {scheduledTouchpoints.filter(tp => new Date(tp.scheduled_at).toDateString() === new Date().toDateString()).length}</span>\n                    <span>Overdue: {scheduledTouchpoints.filter(tp => new Date(tp.scheduled_at) < new Date()).length}</span>\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n          <div className=\"p-6\">\n            {scheduledTouchpoints.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-500\">No scheduled touchpoints found</p>\n                <p className=\"text-sm text-gray-400 mt-2\">\n                  Go to the Outreach page to create touchpoint sequences for your leads\n                </p>\n              </div>\n            ) : (\n              <>\n                <div className=\"space-y-3\">\n                  {paginatedTouchpoints.map((touchpoint) => {\n                  const scheduledDate = new Date(touchpoint.scheduled_at)\n                  const isOverdue = scheduledDate < new Date()\n                  const isToday = scheduledDate.toDateString() === new Date().toDateString()\n                  \n                  return (\n                    <div \n                      key={touchpoint.id} \n                      className={`flex items-center justify-between p-4 rounded-lg border transition-colors ${\n                        isOverdue ? 'bg-red-50 border-red-200' : \n                        isToday ? 'bg-blue-50 border-blue-200' :\n                        'bg-gray-50 border-gray-200'\n                      }`}\n                    >\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2\">\n                          <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${\n                            touchpoint.type === 'email' ? 'bg-blue-100 text-blue-800' :\n                            touchpoint.type === 'call' ? 'bg-green-100 text-green-800' :\n                            touchpoint.type === 'linkedin_message' ? 'bg-purple-100 text-purple-800' :\n                            'bg-gray-100 text-gray-800'\n                          }`}>\n                            {touchpoint.type.replace('_', ' ').toUpperCase()}\n                          </span>\n                          <span className=\"font-medium\">{touchpoint.lead?.first_name} {touchpoint.lead?.last_name}</span>\n                          {touchpoint.lead?.campaign && (\n                            <span className=\"text-xs text-gray-500 bg-gray-200 px-2 py-1 rounded\">\n                              {(touchpoint.lead.campaign as any).name}\n                            </span>\n                          )}\n                          {isOverdue && (\n                            <span className=\"text-xs text-red-600 font-medium bg-red-100 px-2 py-1 rounded\">\n                              OVERDUE\n                            </span>\n                          )}\n                          {isToday && (\n                            <span className=\"text-xs text-blue-600 font-medium bg-blue-100 px-2 py-1 rounded\">\n                              TODAY\n                            </span>\n                          )}\n                        </div>\n                        <p className=\"text-sm text-gray-600 mt-1\">{touchpoint.subject}</p>\n                        <div className=\"flex items-center space-x-4 mt-1\">\n                          <p className=\"text-xs text-gray-500\">{touchpoint.lead?.email}</p>\n                          <p className=\"text-xs text-gray-500\">\n                                                                Scheduled: {scheduledDate.toLocaleDateString()}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <button\n                          onClick={() => markTouchpointComplete(touchpoint.id, 'replied')}\n                          className=\"px-3 py-1 bg-green-600 text-white text-xs rounded hover:bg-green-700 transition-colors\"\n                        >\n                          Replied\n                        </button>\n                        <button\n                          onClick={() => markTouchpointComplete(touchpoint.id, 'no_answer')}\n                          className=\"px-3 py-1 bg-gray-600 text-white text-xs rounded hover:bg-gray-700 transition-colors\"\n                        >\n                          No Answer\n                        </button>\n                      </div>\n                    </div>\n                  )\n                })}\n                </div>\n\n                {/* Pagination Controls */}\n                {totalPages > 1 && (\n                  <div className=\"flex items-center justify-between mt-6 pt-4 border-t border-gray-200\">\n                    <div className=\"text-sm text-gray-500\">\n                      Showing {startIndex + 1} to {Math.min(endIndex, scheduledTouchpoints.length)} of {scheduledTouchpoints.length} touchpoints\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <button\n                        onClick={() => setCurrentPage(currentPage - 1)}\n                        disabled={currentPage === 1}\n                        className=\"px-3 py-2 text-sm bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\"\n                      >\n                        Previous\n                      </button>\n                      <span className=\"text-sm text-gray-700\">\n                        Page {currentPage} of {totalPages}\n                      </span>\n                      <button\n                        onClick={() => setCurrentPage(currentPage + 1)}\n                        disabled={currentPage === totalPages}\n                        className=\"px-3 py-2 text-sm bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\"\n                      >\n                        Next\n                      </button>\n                    </div>\n                  </div>\n                )}\n              </>\n            )}\n          </div>\n        </div>\n\n        {/* Recent Activity & Campaign Performance */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Recent Leads */}\n          <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Recent Leads</h3>\n            <div className=\"space-y-4\">\n              {recentLeads.length > 0 ? (\n                recentLeads.map((lead, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className={`w-2 h-2 rounded-full ${selectedCompany === 'CraftyCode' ? 'bg-blue-500' : 'bg-purple-500'}`}></div>\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-900\">\n                          {lead.first_name} {lead.last_name}\n                        </p>\n                        <p className=\"text-xs text-gray-500\">{lead.email}</p>\n                        <p className=\"text-xs text-gray-400\">{formatDate(lead.created_at)}</p>\n                      </div>\n                    </div>\n                    <span className={`px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(lead.status)}`}>\n                      {getStatusLabel(lead.status)}\n                    </span>\n                  </div>\n                ))\n              ) : (\n                <p className=\"text-gray-500 text-center py-8\">No leads found. Import some leads to get started!</p>\n              )}\n            </div>\n          </div>\n\n          {/* Campaign Performance */}\n          <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">{selectedCompany} Campaign Performance</h3>\n            <div className=\"space-y-4\">\n              {campaigns.length > 0 ? (\n                campaigns.map((campaign, index) => (\n                  <div key={index} className=\"border rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className={`w-3 h-3 rounded-full ${campaign.company === 'CraftyCode' ? 'bg-blue-500' : 'bg-purple-500'}`}></div>\n                        <h4 className=\"font-medium text-gray-900\">{campaign.name}</h4>\n                      </div>\n                      <span className=\"text-sm font-medium text-gray-600\">\n                        {campaign.lead_count > 0 ? Math.round((campaign.conversion_count / campaign.lead_count) * 100) : 0}% conversion\n                      </span>\n                    </div>\n                    <div className=\"grid grid-cols-4 gap-4 text-center\">\n                      <div>\n                        <p className=\"text-sm text-gray-500\">Leads</p>\n                        <p className=\"font-semibold text-gray-900\">{campaign.lead_count}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-500\">Emails</p>\n                        <p className=\"font-semibold text-gray-900\">{campaign.email_count}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-500\">Calls</p>\n                        <p className=\"font-semibold text-gray-900\">{campaign.call_count}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-500\">Conversions</p>\n                        <p className=\"font-semibold text-gray-900\">{campaign.conversion_count}</p>\n                      </div>\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <p className=\"text-gray-500 text-center py-8\">No campaigns found for {selectedCompany}.</p>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Calendar Popup */}\n        <CalendarPopup\n          isOpen={showCalendarPopup}\n          onClose={() => setShowCalendarPopup(false)}\n          selectedDate={selectedDate}\n          onDateSelect={setSelectedDate}\n          touchpointCounts={touchpointCounts}\n          onMonthChange={handleCalendarMonthChange}\n        />\n      </div>\n    </DashboardLayout>\n  )\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}