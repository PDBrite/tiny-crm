{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/jdog/projects/lead-manager/src/components/layout/Sidebar.tsx"],"sourcesContent":["'use client'\n\nimport Link from 'next/link'\nimport { usePathname } from 'next/navigation'\nimport { useCompany } from '@/contexts/CompanyContext'\nimport { \n  LayoutDashboard, \n  Users, \n  Target, \n  Upload, \n  Settings,\n  Building2,\n  Calendar,\n  School,\n  MessageSquare\n} from 'lucide-react'\n\nconst baseNavigation = [\n  { name: 'Dashboard', href: '/', icon: LayoutDashboard },\n  { name: 'Outreach', href: '/outreach', icon: Calendar },\n  { name: 'Campaigns', href: '/campaigns', icon: Target },\n  { name: 'Import', href: '/import', icon: Upload },\n  { name: 'Settings', href: '/settings', icon: Settings },\n]\n\nconst craftyCodeNavigation = [\n  { name: 'Dashboard', href: '/', icon: LayoutDashboard },\n  { name: 'Leads', href: '/leads', icon: Users },\n  { name: 'Outreach', href: '/outreach', icon: MessageSquare },\n  { name: 'Campaigns', href: '/campaigns', icon: Target },\n  { name: 'Import', href: '/import', icon: Upload },\n  { name: 'Settings', href: '/settings', icon: Settings },\n]\n\nconst avalernNav = [\n  { name: 'Dashboard', href: '/', icon: LayoutDashboard },\n  { name: 'Districts', href: '/districts', icon: School },\n  { name: 'District Contacts', href: '/leads', icon: Users },\n  { name: 'Outreach', href: '/outreach', icon: MessageSquare },\n  { name: 'Campaigns', href: '/campaigns', icon: Target },\n  { name: 'Import', href: '/import', icon: Upload },\n  { name: 'Settings', href: '/settings', icon: Settings }\n]\n\nconst companies = [\n  { name: 'CraftyCode', color: 'bg-blue-500' },\n  { name: 'Avalern', color: 'bg-purple-500' }\n]\n\nexport default function Sidebar() {\n  const pathname = usePathname()\n  const { selectedCompany, setSelectedCompany } = useCompany()\n\n  return (\n    <div className=\"flex h-screen w-64 flex-col bg-white shadow-lg\">\n      {/* Logo */}\n      <div className=\"flex h-16 items-center px-6 border-b border-gray-200\">\n        <Building2 className=\"h-8 w-8 text-blue-600\" />\n        <span className=\"ml-3 text-xl font-bold text-gray-900\">Lead Manager</span>\n      </div>\n\n      {/* Company Selector - Moved to top */}\n      <div className=\"border-b border-gray-200 p-4\">\n        <div className=\"text-xs font-medium text-gray-500 uppercase tracking-wider mb-3\">\n          Active Companies\n        </div>\n        <div className=\"space-y-2\">\n          {companies.map((company) => (\n            <button\n              key={company.name}\n              onClick={() => setSelectedCompany(company.name)}\n              className={`\n                flex items-center w-full px-3 py-2 text-sm font-medium rounded-lg transition-colors\n                ${selectedCompany === company.name\n                  ? 'bg-gray-100 text-gray-900 border-l-4 border-blue-500'\n                  : 'text-gray-700 hover:bg-gray-50 hover:text-gray-900'\n                }\n              `}\n            >\n              <div className={`w-3 h-3 ${company.color} rounded-full mr-3`}></div>\n              <span>{company.name}</span>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"flex-1 px-4 py-6 space-y-2\">\n        {selectedCompany === 'CraftyCode' && craftyCodeNavigation.map((item) => {\n          const isActive = pathname === item.href\n          return (\n            <Link\n              key={item.name}\n              href={item.href}\n              className={`\n                flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors\n                ${isActive \n                  ? 'bg-blue-50 text-blue-700 border-r-2 border-blue-700' \n                  : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'\n                }\n              `}\n            >\n              <item.icon className={`mr-3 h-5 w-5 ${isActive ? 'text-blue-700' : 'text-gray-400'}`} />\n              {item.name}\n            </Link>\n          )\n        })}\n        {selectedCompany === 'Avalern' && avalernNav.map((item) => {\n          const isActive = pathname === item.href\n          return (\n            <Link\n              key={item.name}\n              href={item.href}\n              className={`\n                flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors\n                ${isActive \n                  ? 'bg-blue-50 text-blue-700 border-r-2 border-blue-700' \n                  : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'\n                }\n              `}\n            >\n              <item.icon className={`mr-3 h-5 w-5 ${isActive ? 'text-blue-700' : 'text-gray-400'}`} />\n              {item.name}\n            </Link>\n          )\n        })}\n      </nav>\n    </div>\n  )\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 300, "column": 0}, "map": {"version":3,"sources":["file:///Users/jdog/projects/lead-manager/src/components/layout/DashboardLayout.tsx"],"sourcesContent":["'use client'\n\nimport Sidebar from './Sidebar'\n\ninterface DashboardLayoutProps {\n  children: React.ReactNode\n}\n\nexport default function DashboardLayout({ children }: DashboardLayoutProps) {\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-y-auto\">\n        <div className=\"p-8\">\n          {children}\n        </div>\n      </main>\n    </div>\n  )\n} "],"names":[],"mappings":";;;;AAEA;AAFA;;;AAQe,SAAS,gBAAgB,EAAE,QAAQ,EAAwB;IACxE,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC,0IAAA,CAAA,UAAO;;;;;0BACR,6LAAC;gBAAK,WAAU;0BACd,cAAA,6LAAC;oBAAI,WAAU;8BACZ;;;;;;;;;;;;;;;;;AAKX;KAXwB","debugId":null}},
    {"offset": {"line": 351, "column": 0}, "map": {"version":3,"sources":["file:///Users/jdog/projects/lead-manager/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\nimport { Database } from '@/types/database'\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n\nexport const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey)\n\n// Client-side Supabase client\nexport function createClientComponentClient() {\n  return createClient<Database>(supabaseUrl, supabaseAnonKey)\n} "],"names":[],"mappings":";;;;AAGoB;AAHpB;;AAGA,MAAM;AACN,MAAM;AAEC,MAAM,WAAW,CAAA,GAAA,0LAAA,CAAA,eAAY,AAAD,EAAY,aAAa;AAGrD,SAAS;IACd,OAAO,CAAA,GAAA,0LAAA,CAAA,eAAY,AAAD,EAAY,aAAa;AAC7C","debugId":null}},
    {"offset": {"line": 373, "column": 0}, "map": {"version":3,"sources":["file:///Users/jdog/projects/lead-manager/src/app/campaigns/page.tsx"],"sourcesContent":["'use client'\n\nimport { useState, useEffect } from 'react'\nimport DashboardLayout from '@/components/layout/DashboardLayout'\nimport { useCompany } from '@/contexts/CompanyContext'\nimport { supabase } from '@/lib/supabase'\nimport {\n  Target,\n  Plus,\n  Users,\n  Mail,\n  Phone,\n  Calendar,\n  TrendingUp,\n  Activity,\n  CheckCircle,\n  Clock\n} from 'lucide-react'\n\ninterface Campaign {\n  id: string\n  name: string\n  company: string\n  status?: string\n  start_date?: string\n  created_at: string\n  outreach_sequence_id?: string\n  outreach_sequence?: {\n    id: string\n    name: string\n    description?: string\n  }\n  leadCount: number\n  emailsSent: number\n  callsMade: number\n  appointmentsBooked: number\n  sales: number\n  conversionRate: number\n  launch_date: string\n  description?: string\n}\n\ninterface OutreachSequence {\n  id: string\n  name: string\n  description?: string\n  company: string\n}\n\ninterface CampaignFormData {\n  name: string\n  company: string\n  launchDate: string\n  endDate: string\n  outreachSequenceId: string\n  description?: string\n  instantlyCampaignId?: string\n}\n\nexport default function CampaignsPage() {\n  const { selectedCompany } = useCompany()\n  const [campaigns, setCampaigns] = useState<Campaign[]>([])\n  const [outreachSequences, setOutreachSequences] = useState<OutreachSequence[]>([])\n  const [loading, setLoading] = useState(true)\n  const [selectedStatus, setSelectedStatus] = useState('all')\n  const [showCreateModal, setShowCreateModal] = useState(false)\n  const [creating, setCreating] = useState(false)\n  \n  // Form data for create campaign modal\n  const [formData, setFormData] = useState<CampaignFormData>({\n    name: '',\n    company: selectedCompany,\n    launchDate: new Date().toISOString().split('T')[0],\n    endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 30 days from now\n    outreachSequenceId: '',\n    description: '',\n    instantlyCampaignId: ''\n  })\n\n  // Fetch campaigns\n  useEffect(() => {\n    const fetchCampaigns = async () => {\n      try {\n        setLoading(true)\n        const { data, error } = await supabase\n          .from('campaigns')\n          .select(`\n            id, name, company, start_date, created_at, outreach_sequence_id,\n            leads(id, status, touchpoints(type, completed_at)),\n            outreach_sequence:outreach_sequences(id, name, description)\n          `)\n          .eq('company', selectedCompany)\n\n        if (error) {\n          console.error('Error fetching campaigns:', error)\n          return\n        }\n\n        const enriched = data.map(campaign => {\n          const leadCount = campaign.leads?.length || 0\n          \n          // Flatten touchpoints from all leads\n          const allTouchpoints = campaign.leads?.flatMap((lead: any) => lead.touchpoints || []) || []\n          const emailsSent = allTouchpoints.filter((tp: any) => tp.type === 'email' && tp.completed_at).length\n          const callsMade = allTouchpoints.filter((tp: any) => tp.type === 'call' && tp.completed_at).length\n          \n          const appointmentsBooked = campaign.leads?.filter((lead: any) => lead.status === 'engaged').length || 0\n          const sales = campaign.leads?.filter((lead: any) => lead.status === 'won').length || 0\n          const conversionRate = leadCount > 0 ? Number(((sales / leadCount) * 100).toFixed(1)) : 0\n\n          return {\n            ...campaign,\n            leadCount,\n            emailsSent,\n            callsMade,\n            appointmentsBooked,\n            sales,\n            conversionRate,\n            launch_date: campaign.start_date || campaign.created_at,\n            status: leadCount > 0 ? 'active' : 'queued',\n            outreach_sequence: Array.isArray(campaign.outreach_sequence) ? campaign.outreach_sequence[0] : campaign.outreach_sequence\n          } as Campaign\n        })\n\n        setCampaigns(enriched)\n      } catch (error) {\n        console.error('Error fetching campaigns:', error)\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchCampaigns()\n  }, [selectedCompany])\n\n  // Fetch outreach sequences\n  useEffect(() => {\n    const fetchOutreachSequences = async () => {\n      try {\n        const { data, error } = await supabase\n          .from('outreach_sequences')\n          .select('id, name, description, company')\n          .eq('company', selectedCompany)\n\n        if (error) {\n          console.error('Error fetching outreach sequences:', error)\n          return\n        }\n\n        setOutreachSequences(data || [])\n      } catch (error) {\n        console.error('Error fetching outreach sequences:', error)\n      }\n    }\n\n    fetchOutreachSequences()\n  }, [selectedCompany])\n\n  // Update form company when selectedCompany changes\n  useEffect(() => {\n    setFormData(prev => ({ ...prev, company: selectedCompany }))\n  }, [selectedCompany])\n\n  const getStatusColor = (status: string) => {\n    const colors = {\n      active: 'bg-green-100 text-green-800',\n      queued: 'bg-yellow-100 text-yellow-800',\n      completed: 'bg-blue-100 text-blue-800'\n    }\n    return colors[status as keyof typeof colors] || colors.queued\n  }\n\n  const getStatusIcon = (status: string) => {\n    const icons = {\n      active: <Activity className=\"h-3 w-3\" />,\n      queued: <Clock className=\"h-3 w-3\" />,\n      completed: <CheckCircle className=\"h-3 w-3\" />\n    }\n    return icons[status as keyof typeof icons] || icons.queued\n  }\n\n  const handleCreateCampaign = () => {\n    if (!formData.name || !formData.outreachSequenceId || !formData.endDate) {\n      alert('Please fill in all required fields')\n      return\n    }\n\n    // Navigate to appropriate selection page based on company\n    const params = new URLSearchParams({\n      campaignName: formData.name,\n      outreachSequenceId: formData.outreachSequenceId,\n      launchDate: formData.launchDate,\n      endDate: formData.endDate,\n      description: formData.description || '',\n      instantlyCampaignId: formData.instantlyCampaignId || ''\n    })\n    \n    // For Avalern, go to district selection; for CraftyCode, go to lead selection\n    const selectionPath = selectedCompany === 'Avalern' \n      ? '/campaigns/select-districts' \n      : '/campaigns/select-leads'\n    \n    window.location.href = `${selectionPath}?${params.toString()}`\n  }\n\n  const handleViewCampaign = (campaign: Campaign) => {\n    window.location.href = `/campaigns/${campaign.id}`\n  }\n\n  const filteredCampaigns = campaigns.filter(campaign => {\n    if (selectedStatus === 'all') return true\n    return campaign.status === selectedStatus\n  })\n\n  if (loading) {\n    return (\n      <DashboardLayout>\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n        </div>\n      </DashboardLayout>\n    )\n  }\n\n  return (\n    <DashboardLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Campaigns</h1>\n            <p className=\"text-gray-600 mt-1\">\n              Manage your outreach campaigns for {selectedCompany}\n            </p>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <button\n              onClick={() => setShowCreateModal(true)}\n              className=\"flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 shadow-sm\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              New Campaign\n            </button>\n          </div>\n        </div>\n\n        {/* Filters */}\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n          <div className=\"flex items-center space-x-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Status</label>\n              <select\n                value={selectedStatus}\n                onChange={(e) => setSelectedStatus(e.target.value)}\n                className=\"px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              >\n                <option value=\"all\">All Statuses</option>\n                {['active', 'queued', 'completed'].map(status => (\n                  <option key={status} value={status} className=\"capitalize\">{status}</option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </div>\n\n        {/* Campaign Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredCampaigns.map((campaign) => (\n            <div \n              key={campaign.id} \n              onClick={() => handleViewCampaign(campaign)}\n              className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6 hover:shadow-md transition-shadow cursor-pointer\"\n            >\n              {/* Header */}\n              <div className=\"flex items-start justify-between mb-4\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <div className={`w-3 h-3 rounded-full ${campaign.company === 'CraftyCode' ? 'bg-blue-500' : 'bg-purple-500'}`}></div>\n                    <span className=\"text-sm text-gray-600\">{campaign.company}</span>\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-1\">{campaign.name}</h3>\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <span className={`inline-flex items-center px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(campaign.status || 'queued')}`}>\n                      {getStatusIcon(campaign.status || 'queued')}\n                      <span className=\"ml-1 capitalize\">{campaign.status || 'queued'}</span>\n                    </span>\n                  </div>\n                  {/* Sequence Used Tag */}\n                  {campaign.outreach_sequence && (\n                    <div className=\"inline-flex items-center px-2 py-1 text-xs bg-indigo-100 text-indigo-800 rounded-full\">\n                      <Target className=\"h-3 w-3 mr-1\" />\n                      {campaign.outreach_sequence.name}\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Stats */}\n              <div className=\"space-y-3 mb-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"flex items-center text-sm text-gray-600\">\n                    <Users className=\"h-4 w-4 mr-2\" />\n                    Leads\n                  </span>\n                  <span className=\"font-semibold\">{campaign.leadCount}</span>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <span className=\"flex items-center text-sm text-gray-600\">\n                    <Mail className=\"h-4 w-4 mr-2\" />\n                    Emails Sent\n                  </span>\n                  <span className=\"font-semibold\">{campaign.emailsSent}</span>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <span className=\"flex items-center text-sm text-gray-600\">\n                    <Phone className=\"h-4 w-4 mr-2\" />\n                    Calls Made\n                  </span>\n                  <span className=\"font-semibold\">{campaign.callsMade}</span>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <span className=\"flex items-center text-sm text-gray-600\">\n                    <Calendar className=\"h-4 w-4 mr-2\" />\n                    Engaged Leads\n                  </span>\n                  <span className=\"font-semibold text-blue-600\">{campaign.appointmentsBooked}</span>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <span className=\"flex items-center text-sm text-gray-600\">\n                    <TrendingUp className=\"h-4 w-4 mr-2\" />\n                    Sales\n                  </span>\n                  <span className=\"font-semibold text-green-600\">{campaign.sales}</span>\n                </div>\n              </div>\n\n              {/* Conversion Rate */}\n              <div className=\"border-t border-gray-200 pt-4\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm text-gray-600\">Conversion Rate</span>\n                  <span className=\"text-lg font-bold text-gray-900\">{campaign.conversionRate}%</span>\n                </div>\n                <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                  <div \n                    className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n                    style={{ width: `${Math.min(campaign.conversionRate, 10) * 10}%` }}\n                  ></div>\n                </div>\n              </div>\n\n              {/* Dates */}\n              <div className=\"mt-4 flex items-center justify-between text-xs text-gray-500\">\n                <div className=\"flex items-center\">\n                  <Calendar className=\"h-3 w-3 mr-1\" />\n                  Launch: {new Date(campaign.launch_date).toLocaleDateString()}\n                </div>\n                <div>\n                  Created: {new Date(campaign.created_at).toLocaleDateString()}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Empty State */}\n        {filteredCampaigns.length === 0 && (\n          <div className=\"text-center py-12\">\n            <Target className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No campaigns found</h3>\n            <p className=\"text-gray-500 mb-4\">\n              {selectedStatus !== 'all' \n                ? `No ${selectedStatus} campaigns found for ${selectedCompany}.`\n                : `No campaigns found for ${selectedCompany}. Get started by creating your first campaign.`\n              }\n            </p>\n            <button\n              onClick={() => setShowCreateModal(true)}\n              className=\"inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Campaign\n            </button>\n          </div>\n        )}\n\n        {/* Summary Stats */}\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">{selectedCompany} Campaign Summary</h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-blue-600\">{filteredCampaigns.length}</p>\n              <p className=\"text-sm text-gray-600\">Total Campaigns</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-green-600\">\n                {filteredCampaigns.filter(c => c.status === 'active').length}\n              </p>\n              <p className=\"text-sm text-gray-600\">Active</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {filteredCampaigns.reduce((sum, c) => sum + c.leadCount, 0)}\n              </p>\n              <p className=\"text-sm text-gray-600\">Total Leads</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-purple-600\">\n                {filteredCampaigns.reduce((sum, c) => sum + c.sales, 0)}\n              </p>\n              <p className=\"text-sm text-gray-600\">Total Sales</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Create Campaign Modal */}\n        {showCreateModal && (\n          <div className=\"fixed inset-0 bg-gray-900 bg-opacity-20 backdrop-blur-sm flex items-center justify-center z-50 p-4\">\n            <div className=\"bg-white rounded-xl shadow-2xl p-8 w-full max-w-lg max-h-[90vh] overflow-y-auto border border-gray-100\">\n              <div className=\"flex items-center mb-6\">\n                <div className=\"flex-shrink-0 w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center mr-3\">\n                  <Target className=\"h-5 w-5 text-blue-600\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-semibold text-gray-900\">Create New Campaign</h3>\n                  <p className=\"text-sm text-gray-500\">Set up your outreach campaign with automated touchpoints</p>\n                </div>\n              </div>\n              <div className=\"space-y-5\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Campaign Name *</label>\n                  <input\n                    type=\"text\"\n                    value={formData.name}\n                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                    className=\"w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 focus:bg-white transition-colors\"\n                    placeholder=\"Enter campaign name\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Company</label>\n                  <div className=\"w-full px-4 py-3 bg-gray-100 border border-gray-200 rounded-lg text-gray-700\">\n                    <div className=\"flex items-center\">\n                      <div className={`w-3 h-3 rounded-full mr-2 ${selectedCompany === 'CraftyCode' ? 'bg-blue-500' : 'bg-purple-500'}`}></div>\n                      {selectedCompany}\n                    </div>\n                  </div>\n                  <p className=\"text-xs text-gray-500 mt-1\">Campaign will be created for the currently selected company</p>\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Launch Date</label>\n                  <input\n                    type=\"date\"\n                    value={formData.launchDate}\n                    onChange={(e) => setFormData({ ...formData, launchDate: e.target.value })}\n                    className=\"w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 focus:bg-white transition-colors\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">End Date *</label>\n                  <input\n                    type=\"date\"\n                    value={formData.endDate}\n                    onChange={(e) => setFormData({ ...formData, endDate: e.target.value })}\n                    min={formData.launchDate}\n                    className=\"w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 focus:bg-white transition-colors\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Outreach Sequence *</label>\n                  <select\n                    value={formData.outreachSequenceId}\n                    onChange={(e) => setFormData({ ...formData, outreachSequenceId: e.target.value })}\n                    className=\"w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 focus:bg-white transition-colors\"\n                  >\n                    <option value=\"\">Select an outreach sequence...</option>\n                    {outreachSequences.map(sequence => (\n                      <option key={sequence.id} value={sequence.id}>\n                        {sequence.name} {sequence.description && `- ${sequence.description}`}\n                      </option>\n                    ))}\n                  </select>\n                  {outreachSequences.length === 0 && (\n                    <p className=\"text-xs text-red-500 mt-2 flex items-center\">\n                      <span className=\"w-1 h-1 bg-red-500 rounded-full mr-2\"></span>\n                      No outreach sequences available for {selectedCompany}\n                    </p>\n                  )}\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Description</label>\n                  <textarea\n                    value={formData.description}\n                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                    rows={3}\n                    className=\"w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 focus:bg-white transition-colors resize-none\"\n                    placeholder=\"Optional campaign description...\"\n                  />\n                </div>\n                \n                {/* <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Instantly.ai Campaign ID\n                    <span className=\"text-gray-500 text-xs ml-1\">(Optional - for email sync integration)</span>\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={formData.instantlyCampaignId}\n                    onChange={(e) => setFormData({ ...formData, instantlyCampaignId: e.target.value })}\n                    className=\"w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 focus:bg-white transition-colors\"\n                    placeholder=\"Enter your Instantly.ai campaign ID...\"\n                  />\n                </div> */}\n              </div>\n              \n              <div className=\"flex items-center justify-end space-x-3 pt-6 border-t border-gray-100 mt-6\">\n                <button\n                  onClick={() => setShowCreateModal(false)}\n                  className=\"px-6 py-3 text-gray-600 border border-gray-200 rounded-lg hover:bg-gray-50 hover:border-gray-300 font-medium transition-colors\"\n                >\n                  Cancel\n                </button>\n                <button \n                  onClick={handleCreateCampaign}\n                  disabled={creating || !formData.name || !formData.outreachSequenceId}\n                  className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed font-medium shadow-sm transition-all flex items-center\"\n                >\n                  <Target className=\"w-4 h-4 mr-2\" />\n                  Continue to {selectedCompany === 'Avalern' ? 'District' : 'Lead'} Selection\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </DashboardLayout>\n  )\n} "],"names":[],"mappings":"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","debugId":null}}]
}