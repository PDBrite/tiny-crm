{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/jdog/projects/lead-manager/src/components/layout/Sidebar.tsx"],"sourcesContent":["'use client'\n\nimport Link from 'next/link'\nimport { usePathname } from 'next/navigation'\nimport { useCompany } from '@/contexts/CompanyContext'\nimport { \n  LayoutDashboard, \n  Users, \n  Target, \n  Upload, \n  Settings,\n  Building2,\n  Calendar,\n  School,\n  MessageSquare,\n  User\n} from 'lucide-react'\n\nconst craftyCodeNavigation = [\n  { name: 'Dashboard', href: '/', icon: LayoutDashboard },\n  { name: 'Leads', href: '/leads', icon: Users },\n  { name: 'Outreach', href: '/outreach', icon: MessageSquare },\n  { name: 'Campaigns', href: '/campaigns', icon: Target },\n  { name: 'Import', href: '/import', icon: Upload },\n]\n\nconst avalernNav = [\n  { name: 'Dashboard', href: '/', icon: LayoutDashboard },\n  { name: 'Districts', href: '/districts', icon: School },\n  { name: 'District Contacts', href: '/leads', icon: Users },\n  { name: 'Outreach', href: '/outreach', icon: MessageSquare },\n  { name: 'Campaigns', href: '/campaigns', icon: Target },\n  { name: 'Import', href: '/import', icon: Upload },\n]\n\nconst companyColors: Record<string, string> = {\n  'CraftyCode': 'bg-blue-500',\n  'Avalern': 'bg-purple-500'\n}\n\nexport default function Sidebar() {\n  const pathname = usePathname()\n  const { selectedCompany, setSelectedCompany, availableCompanies } = useCompany()\n\n  return (\n    <div className=\"flex h-screen w-64 flex-col bg-white shadow-lg\">\n      {/* Logo */}\n      <div className=\"flex h-16 items-center px-6 border-b border-gray-200\">\n        <Building2 className=\"h-8 w-8 text-blue-600\" />\n        <span className=\"ml-3 text-xl font-bold text-gray-900\">Lead Manager</span>\n      </div>\n\n      {/* User Info */}\n      <div className=\"border-b border-gray-200 p-4\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center\">\n            <User className=\"h-4 w-4 text-gray-500\" />\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-medium text-gray-900 truncate\">\n              Current User\n            </p>\n            <p className=\"text-xs text-gray-500 truncate\">\n              User\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Company Selector */}\n      {availableCompanies.length > 0 && (\n        <div className=\"border-b border-gray-200 p-4\">\n          <div className=\"text-xs font-medium text-gray-500 uppercase tracking-wider mb-3\">\n            Active Companies\n          </div>\n          <div className=\"space-y-2\">\n            {availableCompanies.map((company) => (\n              <button\n                key={company}\n                onClick={() => setSelectedCompany(company)}\n                className={`\n                  flex items-center w-full px-3 py-2 text-sm font-medium rounded-lg transition-colors\n                  ${selectedCompany === company\n                    ? 'bg-gray-100 text-gray-900 border-l-4 border-blue-500'\n                    : 'text-gray-700 hover:bg-gray-50 hover:text-gray-900'\n                  }\n                `}\n              >\n                <div className={`w-3 h-3 ${companyColors[company] || 'bg-gray-500'} rounded-full mr-3`}></div>\n                <span>{company}</span>\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Navigation */}\n      <nav className=\"flex-1 px-4 py-6 space-y-2\">\n        {selectedCompany === 'CraftyCode' && craftyCodeNavigation.map((item) => {\n          const isActive = pathname === item.href\n          return (\n            <Link\n              key={item.name}\n              href={item.href}\n              className={`\n                flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors\n                ${isActive \n                  ? 'bg-blue-50 text-blue-700 border-r-2 border-blue-700' \n                  : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'\n                }\n              `}\n            >\n              <item.icon className={`mr-3 h-5 w-5 ${isActive ? 'text-blue-700' : 'text-gray-400'}`} />\n              {item.name}\n            </Link>\n          )\n        })}\n        {selectedCompany === 'Avalern' && avalernNav.map((item) => {\n          const isActive = pathname === item.href\n          return (\n            <Link\n              key={item.name}\n              href={item.href}\n              className={`\n                flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors\n                ${isActive \n                  ? 'bg-blue-50 text-blue-700 border-r-2 border-blue-700' \n                  : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'\n                }\n              `}\n            >\n              <item.icon className={`mr-3 h-5 w-5 ${isActive ? 'text-blue-700' : 'text-gray-400'}`} />\n              {item.name}\n            </Link>\n          )\n        })}\n      </nav>\n    </div>\n  )\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 311, "column": 0}, "map": {"version":3,"sources":["file:///Users/jdog/projects/lead-manager/src/components/layout/DashboardLayout.tsx"],"sourcesContent":["'use client'\n\nimport Sidebar from './Sidebar'\n\ninterface DashboardLayoutProps {\n  children: React.ReactNode\n}\n\nexport default function DashboardLayout({ children }: DashboardLayoutProps) {\n  return (\n    <div className=\"flex h-screen bg-gray-100\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-auto\">\n        <div className=\"p-8\">\n          {children}\n        </div>\n      </main>\n    </div>\n  )\n} "],"names":[],"mappings":";;;;AAEA;AAFA;;;AAQe,SAAS,gBAAgB,EAAE,QAAQ,EAAwB;IACxE,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC,0IAAA,CAAA,UAAO;;;;;0BACR,6LAAC;gBAAK,WAAU;0BACd,cAAA,6LAAC;oBAAI,WAAU;8BACZ;;;;;;;;;;;;;;;;;AAKX;KAXwB","debugId":null}},
    {"offset": {"line": 362, "column": 0}, "map": {"version":3,"sources":["file:///Users/jdog/projects/lead-manager/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\nimport { Database } from '@/types/database'\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n\nexport const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey)\n\n// Client-side Supabase client\nexport function createClientComponentClient() {\n  return createClient<Database>(supabaseUrl, supabaseAnonKey)\n} "],"names":[],"mappings":";;;;AAGoB;AAHpB;;AAGA,MAAM;AACN,MAAM;AAEC,MAAM,WAAW,CAAA,GAAA,0LAAA,CAAA,eAAY,AAAD,EAAY,aAAa;AAGrD,SAAS;IACd,OAAO,CAAA,GAAA,0LAAA,CAAA,eAAY,AAAD,EAAY,aAAa;AAC7C","debugId":null}},
    {"offset": {"line": 384, "column": 0}, "map": {"version":3,"sources":["file:///Users/jdog/projects/lead-manager/src/app/campaigns/page.tsx"],"sourcesContent":["'use client'\n\nimport { useState, useEffect } from 'react'\nimport DashboardLayout from '@/components/layout/DashboardLayout'\nimport { useCompany } from '@/contexts/CompanyContext'\nimport { supabase } from '@/lib/supabase'\nimport {\n  Target,\n  Plus,\n  Users,\n  Mail,\n  Phone,\n  Calendar,\n  TrendingUp,\n  Activity,\n  CheckCircle,\n  Clock,\n  MessageSquare,\n  ChevronLeft,\n  ChevronRight,\n  Eye\n} from 'lucide-react'\n\ninterface Campaign {\n  id: string\n  name: string\n  company: string\n  status?: string\n  start_date?: string\n  created_at: string\n  outreach_sequence_id?: string\n  outreach_sequence?: {\n    id: string\n    name: string\n    description?: string\n  }\n  leadCount: number\n  emailsSent: number\n  callsMade: number\n  linkedinMessages?: number\n  appointmentsBooked: number\n  sales: number\n  conversionRate: number\n  launch_date: string\n  description?: string\n}\n\ninterface OutreachSequence {\n  id: string\n  name: string\n  description?: string\n  company: string\n}\n\ninterface CampaignFormData {\n  name: string\n  company: string\n  launchDate: string\n  endDate: string\n  outreachSequenceId: string\n  description?: string\n  instantlyCampaignId?: string\n}\n\nexport default function CampaignsPage() {\n  const { selectedCompany } = useCompany()\n  const [campaigns, setCampaigns] = useState<Campaign[]>([])\n  const [outreachSequences, setOutreachSequences] = useState<OutreachSequence[]>([])\n  const [loading, setLoading] = useState(true)\n  const [selectedStatus, setSelectedStatus] = useState('all')\n  const [showCreateModal, setShowCreateModal] = useState(false)\n  const [creating, setCreating] = useState(false)\n  const [selectedSequenceSteps, setSelectedSequenceSteps] = useState<Array<{\n    id: string;\n    step_order: number;\n    type: string;\n    content_link: string;\n    day_offset: number;\n    sequence_id: string;\n  }>>([])\n  const [fetchingSteps, setFetchingSteps] = useState(false)\n  \n  // Pagination\n  const [currentPage, setCurrentPage] = useState(1)\n  const [itemsPerPage] = useState(10)\n  \n  // Form data for create campaign modal\n  const [formData, setFormData] = useState<CampaignFormData>({\n    name: '',\n    company: selectedCompany,\n    launchDate: new Date().toISOString().split('T')[0],\n    endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 30 days from now\n    outreachSequenceId: '',\n    description: '',\n    instantlyCampaignId: ''\n  })\n\n  // Fetch campaigns\n  useEffect(() => {\n    const fetchCampaigns = async () => {\n      if (!selectedCompany) {\n        console.log('No company selected, skipping campaigns fetch')\n        setLoading(false)\n        return\n      }\n      \n      try {\n        setLoading(true)\n        \n        // Fetch campaigns with different data models based on company\n        let campaignsData\n        \n        // Fetch campaigns with basic data first (no joins)\n        console.log('Fetching campaigns for company:', selectedCompany)\n        const { data: basicCampaigns, error: campaignsError } = await supabase\n          .from('campaigns')\n          .select('id, name, company, start_date, created_at, outreach_sequence_id')\n          .eq('company', selectedCompany)\n\n        if (campaignsError) {\n          console.error('Error fetching campaigns:', campaignsError.message || campaignsError)\n          setCampaigns([])\n          setLoading(false)\n          return\n        }\n\n        // Fetch outreach sequences for all campaigns\n        let allSequences: any[] = []\n        try {\n          const { data: sequences, error: seqError } = await supabase\n            .from('outreach_sequences')\n            .select('id, name, description, company')\n            .eq('company', selectedCompany)\n          \n          if (!seqError && sequences) {\n            allSequences = sequences\n          }\n        } catch (error) {\n          console.warn('Could not fetch outreach sequences:', error)\n        }\n\n        // Now fetch related data separately to avoid complex join issues\n        campaignsData = []\n        console.log('Processing campaigns:', basicCampaigns?.length || 0)\n        \n        for (const campaign of basicCampaigns || []) {\n          let campaignWithData = { ...campaign }\n          \n          // Add outreach sequence info\n          const outreachSequence = allSequences.find(seq => seq.id === campaign.outreach_sequence_id)\n          if (outreachSequence) {\n            (campaignWithData as any).outreach_sequence = outreachSequence\n          }\n          \n          if (selectedCompany === 'Avalern') {\n            // For Avalern: Fetch district_leads\n            try {\n              const { data: districtLeads, error: districtError } = await supabase\n                .from('district_leads')\n                .select('id, status')\n                .eq('campaign_id', campaign.id)\n\n              if (districtError) {\n                console.warn('Error fetching district leads for campaign', campaign.id, ':', districtError)\n                (campaignWithData as any).district_leads = []\n              } else if (districtLeads) {\n                // Fetch district contacts for these district leads\n                const districtLeadIds = districtLeads.map(dl => dl.id)\n                let districtContacts: any[] = []\n                \n                if (districtLeadIds.length > 0) {\n                  const { data: contacts, error: contactsError } = await supabase\n                    .from('district_contacts')\n                    .select('id, district_lead_id')\n                    .in('district_lead_id', districtLeadIds)\n\n                  if (contactsError) {\n                    console.warn('Error fetching district contacts:', contactsError)\n                  } else if (contacts) {\n                    districtContacts = contacts\n                  }\n                }\n\n                // Fetch touchpoints for district contacts\n                const contactIds = districtContacts.map(c => c.id)\n                let touchpoints: any[] = []\n                \n                if (contactIds.length > 0) {\n                  const { data: tps, error: tpError } = await supabase\n                    .from('touchpoints')\n                    .select('type, completed_at, outcome, district_contact_id')\n                    .in('district_contact_id', contactIds)\n\n                  if (tpError) {\n                    console.warn('Error fetching district touchpoints:', tpError)\n                  } else if (tps) {\n                    touchpoints = tps\n                  }\n                }\n\n                // Attach data to campaign\n                (campaignWithData as any).district_leads = districtLeads.map(dl => ({\n                  ...dl,\n                  district_contacts: districtContacts\n                    .filter(c => c.district_lead_id === dl.id)\n                    .map(c => ({\n                      ...c,\n                      touchpoints: touchpoints.filter(tp => tp.district_contact_id === c.id)\n                    }))\n                }))\n              } else {\n                (campaignWithData as any).district_leads = []\n              }\n            } catch (error) {\n              console.warn('Error in Avalern data fetching:', error)\n              (campaignWithData as any).district_leads = []\n            }\n          } else {\n            // For CraftyCode: Fetch regular leads\n            try {\n              const { data: leads, error: leadsError } = await supabase\n                .from('leads')\n                .select('id, status')\n                .eq('campaign_id', campaign.id)\n\n              if (leadsError) {\n                console.warn('Error fetching leads for campaign', campaign.id, ':', leadsError)\n                (campaignWithData as any).leads = []\n              } else if (leads) {\n                // Fetch touchpoints for leads\n                const leadIds = leads.map(l => l.id)\n                let touchpoints: any[] = []\n                \n                if (leadIds.length > 0) {\n                  const { data: tps, error: tpError } = await supabase\n                    .from('touchpoints')\n                    .select('type, completed_at, outcome, lead_id')\n                    .in('lead_id', leadIds)\n\n                  if (tpError) {\n                    console.warn('Error fetching lead touchpoints:', tpError)\n                  } else if (tps) {\n                    touchpoints = tps\n                  }\n                }\n\n                // Attach data to campaign\n                (campaignWithData as any).leads = leads.map(lead => ({\n                  ...lead,\n                  touchpoints: touchpoints.filter(tp => tp.lead_id === lead.id)\n                }))\n              } else {\n                (campaignWithData as any).leads = []\n              }\n            } catch (error) {\n              console.warn('Error in CraftyCode data fetching:', error)\n              (campaignWithData as any).leads = []\n            }\n          }\n          \n          campaignsData.push(campaignWithData)\n        }\n\n        console.log('Enriching campaign data for', campaignsData.length, 'campaigns')\n        const enriched = campaignsData.map(campaign => {\n          console.log('Processing campaign:', campaign.name, 'for company:', selectedCompany)\n          let leadCount = 0\n          let allTouchpoints: any[] = []\n          let engagedCount = 0\n          let wonCount = 0\n\n          if (selectedCompany === 'Avalern') {\n            // Handle district_leads data structure\n            const districtLeads = (campaign as any).district_leads || []\n            leadCount = districtLeads.length\n            \n            // Flatten touchpoints from all district contacts\n            allTouchpoints = districtLeads.flatMap((districtLead: any) =>\n              districtLead.district_contacts?.flatMap((contact: any) => contact.touchpoints || []) || []\n            )\n            \n            engagedCount = districtLeads.filter((dl: any) => dl.status === 'engaged').length\n            wonCount = districtLeads.filter((dl: any) => dl.status === 'won').length\n          } else {\n            // Handle regular leads data structure\n            const leads = (campaign as any).leads || []\n            leadCount = leads.length\n            \n            // Flatten touchpoints from all leads\n            allTouchpoints = leads.flatMap((lead: any) => lead.touchpoints || [])\n            \n            engagedCount = leads.filter((lead: any) => lead.status === 'engaged').length\n            wonCount = leads.filter((lead: any) => lead.status === 'won').length\n          }\n          \n          const emailsSent = allTouchpoints.filter((tp: any) => tp.type === 'email' && tp.completed_at && tp.outcome).length\n          const callsMade = allTouchpoints.filter((tp: any) => tp.type === 'call' && tp.completed_at && tp.outcome).length\n          const linkedinMessages = allTouchpoints.filter((tp: any) => tp.type === 'linkedin_message' && tp.completed_at && tp.outcome).length\n          \n          const conversionRate = leadCount > 0 ? Number(((wonCount / leadCount) * 100).toFixed(1)) : 0\n\n          return {\n            ...campaign,\n            leadCount,\n            emailsSent,\n            callsMade,\n            linkedinMessages,\n            appointmentsBooked: engagedCount,\n            sales: wonCount,\n            conversionRate,\n            launch_date: campaign.start_date || campaign.created_at,\n            status: leadCount > 0 ? 'active' : 'queued',\n            outreach_sequence: (campaign as any).outreach_sequence || null\n          } as Campaign\n        })\n\n        setCampaigns(enriched)\n      } catch (error) {\n        console.error('Error fetching campaigns:', error)\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchCampaigns()\n  }, [selectedCompany])\n\n  // Fetch outreach sequences\n  useEffect(() => {\n    const fetchOutreachSequences = async () => {\n      if (!selectedCompany) {\n        console.log('No company selected, skipping outreach sequences fetch')\n        return\n      }\n      \n      try {\n        // Check if outreach_sequences table exists\n        const { data, error } = await supabase\n          .from('outreach_sequences')\n          .select('id, name, description, company')\n          .eq('company', selectedCompany)\n\n        if (error) {\n          console.warn('Outreach sequences table may not exist or be accessible:', error)\n          // Set empty array if table doesn't exist\n          setOutreachSequences([])\n          return\n        }\n\n        setOutreachSequences(data || [])\n      } catch (error) {\n        console.warn('Error fetching outreach sequences, using empty array:', error)\n        setOutreachSequences([])\n      }\n    }\n\n    fetchOutreachSequences()\n  }, [selectedCompany])\n\n  // Update form company when selectedCompany changes\n  useEffect(() => {\n    setFormData(prev => ({ ...prev, company: selectedCompany }))\n  }, [selectedCompany])\n\n  // Fetch sequence steps when outreach sequence is selected\n  const fetchSequenceSteps = async (sequenceId: string) => {\n    if (!sequenceId) {\n      setSelectedSequenceSteps([])\n      return\n    }\n    \n    console.log('Fetching steps for sequence:', sequenceId)\n    setFetchingSteps(true)\n    try {\n      const { data: steps, error } = await supabase\n        .from('outreach_steps')\n        .select('id, step_order, type, content_link, day_offset, sequence_id')\n        .eq('sequence_id', sequenceId)\n        .order('step_order', { ascending: true })\n\n      if (error) {\n        console.warn('Error fetching sequence steps:', error)\n        setSelectedSequenceSteps([])\n      } else {\n        console.log('Received sequence steps:', steps)\n        setSelectedSequenceSteps(steps || [])\n        \n                 // Auto-calculate end date based on last step\n         if (steps && steps.length > 0 && formData.launchDate) {\n           try {\n             const lastStep = steps[steps.length - 1]\n             console.log('Using last step for end date calculation:', lastStep)\n             const launchDate = new Date(formData.launchDate)\n             \n             // Make sure we have a valid day_offset value (default to 30 if undefined/null/NaN)\n             let delayDays = 30; // Default to 30 days if no valid day_offset found\n             \n             if (lastStep && lastStep.day_offset !== undefined && lastStep.day_offset !== null) {\n               const parsedDelay = parseInt(String(lastStep.day_offset))\n               if (!isNaN(parsedDelay)) {\n                 delayDays = parsedDelay\n               } else {\n                 console.warn('Invalid day_offset value, using default 30 days:', lastStep.day_offset)\n               }\n             } else {\n               console.warn('No day_offset found in last step, using default 30 days')\n             }\n             \n             console.log('Using delay days:', delayDays)\n             \n             // Calculate end date safely\n             const endDate = new Date(launchDate)\n             endDate.setDate(launchDate.getDate() + delayDays)\n             \n             if (isNaN(endDate.getTime())) {\n               console.warn('Invalid end date calculated, using default 30 days from now')\n               const defaultEndDate = new Date(launchDate)\n               defaultEndDate.setDate(launchDate.getDate() + 30)\n               \n               setFormData(prev => ({\n                 ...prev,\n                 endDate: defaultEndDate.toISOString().split('T')[0]\n               }))\n             } else {\n               console.log('Calculated end date:', endDate.toISOString().split('T')[0])\n               setFormData(prev => ({\n                 ...prev,\n                 endDate: endDate.toISOString().split('T')[0]\n               }))\n             }\n           } catch (error) {\n             console.error('Error calculating end date:', error)\n             // Set a default end date 30 days from launch date\n             try {\n               const launchDate = new Date(formData.launchDate)\n               const defaultEndDate = new Date(launchDate)\n               defaultEndDate.setDate(launchDate.getDate() + 30)\n               \n               setFormData(prev => ({\n                 ...prev,\n                 endDate: defaultEndDate.toISOString().split('T')[0]\n               }))\n             } catch (e) {\n               console.error('Failed to set default end date:', e)\n             }\n           }\n         } else {\n           // No steps found, set default end date 30 days from launch date\n           try {\n             if (formData.launchDate) {\n               const launchDate = new Date(formData.launchDate)\n               const defaultEndDate = new Date(launchDate)\n               defaultEndDate.setDate(launchDate.getDate() + 30)\n               \n               setFormData(prev => ({\n                 ...prev,\n                 endDate: defaultEndDate.toISOString().split('T')[0]\n               }))\n             }\n           } catch (e) {\n             console.error('Failed to set default end date with no steps:', e)\n           }\n         }\n      }\n    } catch (error) {\n      console.warn('Error fetching sequence steps:', error)\n      setSelectedSequenceSteps([])\n    } finally {\n      setFetchingSteps(false)\n    }\n  }\n\n  // Handle sequence selection change\n  const handleSequenceChange = (sequenceId: string) => {\n    console.log('Sequence selected:', sequenceId)\n    setFormData(prev => ({ ...prev, outreachSequenceId: sequenceId }))\n    \n    // Clear steps first to ensure UI updates properly\n    if (!sequenceId) {\n      setSelectedSequenceSteps([])\n      console.log('Clearing sequence steps')\n    } else {\n      console.log('Fetching steps for sequence:', sequenceId)\n      fetchSequenceSteps(sequenceId)\n    }\n  }\n\n  // Handle launch date change - recalculate end date\n  const handleLaunchDateChange = (launchDate: string) => {\n    setFormData(prev => ({ ...prev, launchDate }))\n    \n    // Recalculate end date if sequence is selected\n    if (selectedSequenceSteps.length > 0 && launchDate) {\n      try {\n        const lastStep = selectedSequenceSteps[selectedSequenceSteps.length - 1]\n        console.log('Recalculating end date with launch date change, using step:', lastStep)\n        const newLaunchDate = new Date(launchDate)\n        \n        // Make sure we have a valid day_offset value (default to 30 if undefined/null/NaN)\n        let delayDays = 30; // Default to 30 days if no valid day_offset found\n        \n        if (lastStep && lastStep.day_offset !== undefined && lastStep.day_offset !== null) {\n          const parsedDelay = parseInt(String(lastStep.day_offset))\n          if (!isNaN(parsedDelay)) {\n            delayDays = parsedDelay\n          } else {\n            console.warn('Invalid day_offset value in launch date change, using default 30 days:', lastStep.day_offset)\n          }\n        } else {\n          console.warn('No day_offset found in last step during launch date change, using default 30 days')\n        }\n        \n        console.log('Using delay days for launch date change:', delayDays)\n        \n        // Calculate end date safely\n        const endDate = new Date(newLaunchDate)\n        endDate.setDate(newLaunchDate.getDate() + delayDays)\n        \n        if (isNaN(endDate.getTime())) {\n          console.warn('Invalid end date calculated during launch date change, using default 30 days from now')\n          const defaultEndDate = new Date(newLaunchDate)\n          defaultEndDate.setDate(newLaunchDate.getDate() + 30)\n          \n          setFormData(prev => ({\n            ...prev,\n            endDate: defaultEndDate.toISOString().split('T')[0]\n          }))\n        } else {\n          console.log('Calculated new end date after launch date change:', endDate.toISOString().split('T')[0])\n          setFormData(prev => ({\n            ...prev,\n            endDate: endDate.toISOString().split('T')[0]\n          }))\n        }\n      } catch (error) {\n        console.error('Error calculating end date during launch date change:', error)\n        // Set a default end date 30 days from launch date\n        try {\n          const newLaunchDate = new Date(launchDate)\n          const defaultEndDate = new Date(newLaunchDate)\n          defaultEndDate.setDate(newLaunchDate.getDate() + 30)\n          \n          setFormData(prev => ({\n            ...prev,\n            endDate: defaultEndDate.toISOString().split('T')[0]\n          }))\n        } catch (e) {\n          console.error('Failed to set default end date during launch date change:', e)\n        }\n      }\n    } else if (launchDate) {\n      // No sequence steps, set default end date 30 days from launch date\n      try {\n        const newLaunchDate = new Date(launchDate)\n        const defaultEndDate = new Date(newLaunchDate)\n        defaultEndDate.setDate(newLaunchDate.getDate() + 30)\n        \n        setFormData(prev => ({\n          ...prev,\n          endDate: defaultEndDate.toISOString().split('T')[0]\n        }))\n      } catch (e) {\n        console.error('Failed to set default end date with no sequence:', e)\n      }\n    }\n  }\n\n  const getStatusColor = (status: string) => {\n    const colors = {\n      active: 'bg-green-100 text-green-800',\n      queued: 'bg-yellow-100 text-yellow-800',\n      completed: 'bg-blue-100 text-blue-800'\n    }\n    return colors[status as keyof typeof colors] || colors.queued\n  }\n\n  const getStatusIcon = (status: string) => {\n    const icons = {\n      active: <Activity className=\"h-3 w-3\" />,\n      queued: <Clock className=\"h-3 w-3\" />,\n      completed: <CheckCircle className=\"h-3 w-3\" />\n    }\n    return icons[status as keyof typeof icons] || icons.queued\n  }\n\n  const handleCreateCampaign = () => {\n    if (!formData.name || !formData.outreachSequenceId) {\n      alert('Please fill in all required fields')\n      return\n    }\n    \n    // Ensure end date is properly set based on sequence before proceeding\n    if (selectedSequenceSteps.length > 0) {\n      console.log('Using fixed end date from sequence:', formData.endDate)\n    }\n\n    // Navigate to appropriate selection page based on company\n    const params = new URLSearchParams({\n      campaignName: formData.name,\n      outreachSequenceId: formData.outreachSequenceId,\n      launchDate: formData.launchDate,\n      endDate: formData.endDate,\n      description: formData.description || '',\n      instantlyCampaignId: formData.instantlyCampaignId || ''\n    })\n    \n    // For Avalern, go to district selection; for CraftyCode, go to lead selection\n    const selectionPath = selectedCompany === 'Avalern' \n      ? '/campaigns/select-districts' \n      : '/campaigns/select-leads'\n    \n    window.location.href = `${selectionPath}?${params.toString()}`\n  }\n\n  const handleViewCampaign = (campaign: Campaign) => {\n    window.location.href = `/campaigns/${campaign.id}`\n  }\n\n  const filteredCampaigns = campaigns.filter(campaign => {\n    if (selectedStatus === 'all') return true\n    return campaign.status === selectedStatus\n  })\n\n  // Pagination calculations\n  const totalPages = Math.ceil(filteredCampaigns.length / itemsPerPage)\n  const startIndex = (currentPage - 1) * itemsPerPage\n  const endIndex = startIndex + itemsPerPage\n  const currentCampaigns = filteredCampaigns.slice(startIndex, endIndex)\n\n  // Reset to page 1 when filters change\n  useEffect(() => {\n    setCurrentPage(1)\n  }, [selectedStatus])\n  \n  // Debug when sequence steps change\n  useEffect(() => {\n    console.log('Selected sequence steps changed:', selectedSequenceSteps)\n  }, [selectedSequenceSteps])\n\n  if (loading) {\n    return (\n      <DashboardLayout>\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n        </div>\n      </DashboardLayout>\n    )\n  }\n\n  return (\n    <DashboardLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Campaigns</h1>\n            <p className=\"text-gray-600 mt-1\">\n              Manage your outreach campaigns for {selectedCompany}\n            </p>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <button\n              onClick={() => setShowCreateModal(true)}\n              className=\"flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 shadow-sm\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              New Campaign\n            </button>\n          </div>\n        </div>\n\n        {/* Summary Stats */}\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">{selectedCompany} Campaign Summary</h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-blue-600\">{filteredCampaigns.length}</p>\n              <p className=\"text-sm text-gray-600\">Total Campaigns</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-green-600\">\n                {filteredCampaigns.filter(c => c.status === 'active').length}\n              </p>\n              <p className=\"text-sm text-gray-600\">Active</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {filteredCampaigns.reduce((sum, c) => sum + c.leadCount, 0)}\n              </p>\n              <p className=\"text-sm text-gray-600\">Total Leads</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-purple-600\">\n                {filteredCampaigns.reduce((sum, c) => sum + (c.linkedinMessages || 0), 0)}\n              </p>\n              <p className=\"text-sm text-gray-600\">LinkedIn Messages</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Filters */}\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-6\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Status</label>\n                <select\n                  value={selectedStatus}\n                  onChange={(e) => setSelectedStatus(e.target.value)}\n                  className=\"px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                >\n                  <option value=\"all\">All Statuses</option>\n                  {['active', 'queued', 'completed'].map(status => (\n                    <option key={status} value={status} className=\"capitalize\">{status}</option>\n                  ))}\n                </select>\n              </div>\n            </div>\n            \n            <div className=\"text-sm text-gray-600\">\n              Showing {startIndex + 1} to {Math.min(endIndex, filteredCampaigns.length)} of {filteredCampaigns.length} campaigns\n            </div>\n          </div>\n        </div>\n\n        {/* Campaigns Table */}\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden\">\n          {filteredCampaigns.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <Target className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No campaigns found</h3>\n              <p className=\"text-gray-500 mb-4\">\n                {selectedStatus !== 'all' \n                  ? `No ${selectedStatus} campaigns found for ${selectedCompany}.`\n                  : `No campaigns found for ${selectedCompany}. Get started by creating your first campaign.`\n                }\n              </p>\n              <button\n                onClick={() => setShowCreateModal(true)}\n                className=\"inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Create Campaign\n              </button>\n            </div>\n          ) : (\n            <>\n              <div className=\"overflow-x-auto\">\n                <table className=\"min-w-full divide-y divide-gray-200\">\n                  <thead className=\"bg-gray-50\">\n                    <tr>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Campaign\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Status\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Leads\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Email\n                      </th>\n                                             <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                         Calls\n                       </th>\n                       <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                         LinkedIn\n                       </th>\n                       <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                         Engaged\n                       </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Launch Date\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Actions\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-white divide-y divide-gray-200\">\n                    {currentCampaigns.map((campaign) => (\n                      <tr \n                        key={campaign.id} \n                        className=\"hover:bg-gray-50 cursor-pointer\"\n                        onClick={() => handleViewCampaign(campaign)}\n                      >\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"flex items-center\">\n                            <div className={`w-3 h-3 rounded-full mr-3 ${campaign.company === 'CraftyCode' ? 'bg-blue-500' : 'bg-purple-500'}`}></div>\n                            <div>\n                              <div className=\"text-sm font-medium text-gray-900\">{campaign.name}</div>\n                              {campaign.outreach_sequence && (\n                                <div className=\"text-xs text-gray-500 flex items-center mt-1\">\n                                  <Target className=\"h-3 w-3 mr-1\" />\n                                  {campaign.outreach_sequence.name}\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <span className={`inline-flex items-center px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(campaign.status || 'queued')}`}>\n                            {getStatusIcon(campaign.status || 'queued')}\n                            <span className=\"ml-1 capitalize\">{campaign.status || 'queued'}</span>\n                          </span>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"flex items-center text-sm text-gray-900\">\n                            <Users className=\"h-4 w-4 mr-2 text-gray-400\" />\n                            <span className=\"font-semibold\">{campaign.leadCount}</span>\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"flex items-center text-sm text-gray-900\">\n                            <Mail className=\"h-4 w-4 mr-2 text-gray-400\" />\n                            <span>{campaign.emailsSent}</span>\n                          </div>\n                        </td>\n                                                 <td className=\"px-6 py-4 whitespace-nowrap\">\n                           <div className=\"flex items-center text-sm text-gray-900\">\n                             <Phone className=\"h-4 w-4 mr-2 text-gray-400\" />\n                             <span>{campaign.callsMade}</span>\n                           </div>\n                         </td>\n                         <td className=\"px-6 py-4 whitespace-nowrap\">\n                           <div className=\"flex items-center text-sm text-gray-900\">\n                             <MessageSquare className=\"h-4 w-4 mr-2 text-gray-400\" />\n                             <span>{campaign.linkedinMessages || 0}</span>\n                           </div>\n                         </td>\n                         <td className=\"px-6 py-4 whitespace-nowrap\">\n                           <div className=\"flex items-center text-sm text-blue-600\">\n                             <Calendar className=\"h-4 w-4 mr-2\" />\n                             <span className=\"font-semibold\">{campaign.appointmentsBooked}</span>\n                           </div>\n                         </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                          {new Date(campaign.launch_date).toLocaleDateString()}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                          <button\n                            onClick={(e) => {\n                              e.stopPropagation()\n                              handleViewCampaign(campaign)\n                            }}\n                            className=\"text-blue-600 hover:text-blue-900 inline-flex items-center\"\n                          >\n                            <Eye className=\"h-4 w-4 mr-1\" />\n                            View\n                          </button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n\n              {/* Pagination */}\n              {totalPages > 1 && (\n                <div className=\"bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6\">\n                  <div className=\"flex-1 flex justify-between sm:hidden\">\n                    <button\n                      onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n                      disabled={currentPage === 1}\n                      className=\"relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\"\n                    >\n                      Previous\n                    </button>\n                    <button\n                      onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}\n                      disabled={currentPage === totalPages}\n                      className=\"ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\"\n                    >\n                      Next\n                    </button>\n                  </div>\n                  <div className=\"hidden sm:flex-1 sm:flex sm:items-center sm:justify-between\">\n                    <div>\n                      <p className=\"text-sm text-gray-700\">\n                        Showing <span className=\"font-medium\">{startIndex + 1}</span> to{' '}\n                        <span className=\"font-medium\">{Math.min(endIndex, filteredCampaigns.length)}</span> of{' '}\n                        <span className=\"font-medium\">{filteredCampaigns.length}</span> campaigns\n                      </p>\n                    </div>\n                    <div>\n                      <nav className=\"relative z-0 inline-flex rounded-md shadow-sm -space-x-px\" aria-label=\"Pagination\">\n                        <button\n                          onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n                          disabled={currentPage === 1}\n                          className=\"relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\"\n                        >\n                          <ChevronLeft className=\"h-5 w-5\" />\n                        </button>\n                        \n                        {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                          <button\n                            key={page}\n                            onClick={() => setCurrentPage(page)}\n                            className={`relative inline-flex items-center px-4 py-2 border text-sm font-medium ${\n                              page === currentPage\n                                ? 'z-10 bg-blue-50 border-blue-500 text-blue-600'\n                                : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'\n                            }`}\n                          >\n                            {page}\n                          </button>\n                        ))}\n                        \n                        <button\n                          onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}\n                          disabled={currentPage === totalPages}\n                          className=\"relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\"\n                        >\n                          <ChevronRight className=\"h-5 w-5\" />\n                        </button>\n                      </nav>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </>\n          )}\n        </div>\n\n        {/* Create Campaign Modal */}\n        {showCreateModal && (\n          <div className=\"fixed inset-0 bg-gray-900 bg-opacity-20 backdrop-blur-sm flex items-center justify-center z-50 p-4\">\n            <div className=\"bg-white rounded-xl shadow-2xl p-8 w-full max-w-lg max-h-[90vh] overflow-y-auto border border-gray-100\">\n              <div className=\"flex items-center mb-6\">\n                <div className=\"flex-shrink-0 w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center mr-3\">\n                  <Target className=\"h-5 w-5 text-blue-600\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-semibold text-gray-900\">Create New Campaign</h3>\n                  <p className=\"text-sm text-gray-500\">Set up your outreach campaign with automated touchpoints</p>\n                </div>\n              </div>\n              <div className=\"space-y-5\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Campaign Name *</label>\n                  <input\n                    type=\"text\"\n                    value={formData.name}\n                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                    className=\"w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 focus:bg-white transition-colors\"\n                    placeholder=\"Enter campaign name\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Company</label>\n                  <div className=\"w-full px-4 py-3 bg-gray-100 border border-gray-200 rounded-lg text-gray-700\">\n                    <div className=\"flex items-center\">\n                      <div className={`w-3 h-3 rounded-full mr-2 ${selectedCompany === 'CraftyCode' ? 'bg-blue-500' : 'bg-purple-500'}`}></div>\n                      {selectedCompany}\n                    </div>\n                  </div>\n                  <p className=\"text-xs text-gray-500 mt-1\">Campaign will be created for the currently selected company</p>\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Launch Date</label>\n                  <input\n                    type=\"date\"\n                    value={formData.launchDate}\n                    onChange={(e) => handleLaunchDateChange(e.target.value)}\n                    className=\"w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 focus:bg-white transition-colors\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    End Date * \n                    {selectedSequenceSteps.length > 0 && (() => {\n                      console.log('Rendering with steps:', selectedSequenceSteps);\n                      return (\n                        <span className=\"text-xs font-bold text-green-600 ml-1\">\n                          (Fixed - Based on Sequence with {selectedSequenceSteps.length} steps)\n                        </span>\n                      );\n                    })()}\n                  </label>\n                  {selectedSequenceSteps.length > 0 ? (\n                    <div className=\"relative\">\n                      <input\n                        type=\"date\"\n                        value={formData.endDate}\n                        readOnly={true}\n                        disabled={true}\n                        className=\"w-full px-4 py-3 border border-green-300 rounded-lg bg-green-50 text-green-800 cursor-not-allowed\"\n                      />\n                      <div className=\"absolute inset-0 bg-green-50 bg-opacity-50 flex items-center justify-center pointer-events-none\">\n                        <div className=\"text-sm font-medium text-green-800 bg-green-50 px-2 py-1 rounded\">\n                          {new Date(formData.endDate).toLocaleDateString()} (Fixed)\n                        </div>\n                      </div>\n                    </div>\n                  ) : (\n                    <input\n                      type=\"date\"\n                      value={formData.endDate}\n                      onChange={(e) => setFormData({ ...formData, endDate: e.target.value })}\n                      min={formData.launchDate}\n                      className=\"w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 focus:bg-white transition-colors\"\n                    />\n                  )}\n                  {selectedSequenceSteps.length > 0 && (\n                    <p className=\"text-xs text-green-700 mt-1 font-medium\">\n                      This date is fixed based on the last scheduled touchpoint in your sequence ({selectedSequenceSteps.length} steps)\n                    </p>\n                  )}\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Outreach Sequence *</label>\n                  <select\n                    value={formData.outreachSequenceId}\n                    onChange={(e) => handleSequenceChange(e.target.value)}\n                    disabled={fetchingSteps}\n                    className=\"w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 focus:bg-white transition-colors disabled:opacity-50\"\n                  >\n                    <option value=\"\">Select an outreach sequence...</option>\n                    {outreachSequences.map(sequence => (\n                      <option key={sequence.id} value={sequence.id}>\n                        {sequence.name}\n                      </option>\n                    ))}\n                  </select>\n                  {fetchingSteps && (\n                    <p className=\"text-xs text-blue-600 mt-1 flex items-center\">\n                      <span className=\"animate-spin rounded-full h-3 w-3 border-b-2 border-blue-600 mr-2\"></span>\n                      Calculating campaign timeline...\n                    </p>\n                  )}\n                  {outreachSequences.length === 0 && (\n                    <p className=\"text-xs text-red-500 mt-2 flex items-center\">\n                      <span className=\"w-1 h-1 bg-red-500 rounded-full mr-2\"></span>\n                      No outreach sequences available for {selectedCompany}\n                    </p>\n                  )}\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Description</label>\n                  <textarea\n                    value={formData.description}\n                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                    rows={3}\n                    className=\"w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 focus:bg-white transition-colors resize-none\"\n                    placeholder=\"Optional campaign description...\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"flex items-center justify-end space-x-3 pt-6 border-t border-gray-100 mt-6\">\n                <button\n                  onClick={() => setShowCreateModal(false)}\n                  className=\"px-6 py-3 text-gray-600 border border-gray-200 rounded-lg hover:bg-gray-50 hover:border-gray-300 font-medium transition-colors\"\n                >\n                  Cancel\n                </button>\n                <button \n                  onClick={handleCreateCampaign}\n                  disabled={creating || !formData.name || !formData.outreachSequenceId}\n                  className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed font-medium shadow-sm transition-all flex items-center\"\n                >\n                  <Target className=\"w-4 h-4 mr-2\" />\n                  Continue to {selectedCompany === 'Avalern' ? 'District' : 'Lead'} Selection\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </DashboardLayout>\n  )\n} "],"names":[],"mappings":"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","debugId":null}}]
}